import gensim.models
import os
from . import text_processing

'''
Назначение данного модуля обучение языковых моделей (моделей векторизации)
В данный момент обучается модель Word2Vec, но предполагается что в дальнейшем можно добавить возможность 
для обучения бругих языковых моделей, таких как Doc2Vec, FastText, Glove, BERT и др.
'''
def train_word2vec(tokens: list[str], window: int = 6, vector_size: int = 100, sg: int = 0) -> int:

    '''
    tokens - набор токенов слов из предложений инструкций ЛС. Может иметь тип строки, списка строк, списка списка строк.
    На этих токенах обучается модель. 
    window - размер окна, определяется сколько  анализируется слов  перед целевым словом и после целевого слова. Тип целочисленный.
    vector_size - длина вектора, которых соответсвует слову в модели. Тип целочисленный.
    sg - определяет какой алгоритм будет использоваться, CBOW, если 0, или SkipGram, если 1. 
    '''

    # задание пути к файлу модели
    model_W2V = 'model_W2V' + '_' + str(window) + '_' + str(window) + '_' + str(sg)
    model_W2V = os.path.join(r'D:\The job\loaderDB\loaderDB\medicalNLP\NLP_models\LM_models', model_W2V)
    try:
        '''
        Непосредственно обучение модели.
        Параметр обучения:
            sentences - токены (текст) для обучения;
            window, vector_size - влияют на скорость обучения модели и точность её работы,
            чем больше их значения тем модель точнее, но при это дольше процесс обучения,
            соотвественно уменьшение их значений влечёт ускрорение обучения, но снижение качества,
            показатели эффективности и скорости варируется в диапазоне от 5 до 15 для window, и от 300 до 900.
            Большее увеличение этих значений не имеет смысла, поскольку существенного улучшения качества модели не происходит.
            sg - отвечает за алгоритм обучения - CBOW или SkipGram. CBOW обучается быстрее, SkipGram работет точнее.
        '''
        model = gensim.models.Word2Vec(sentences=tokens, window=window, vector_size=vector_size, sg=sg)
        # сохранение модели
        if os.path.exists(model_W2V):
            os.remove(model_W2V)
        model.save(model_W2V)
    except:
        print(str(Exception))
        return -1
    return 1
    
    
    
    