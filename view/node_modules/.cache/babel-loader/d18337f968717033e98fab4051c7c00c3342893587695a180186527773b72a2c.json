{"ast":null,"code":"export class DataParser {\n  constructor(data) {\n    this.inputData = data;\n  }\n  Parse() {\n    let outputData = {\n      \"nodes\": [],\n      \"links\": []\n    };\n\n    //Запись связей\n    this.inputData.links.map(elem => {\n      let newLink = {\n        'source': elem.source,\n        'target': elem.target\n      };\n      outputData.links.push(newLink);\n    });\n\n    //Запись узлов\n    this.inputData.nodes.map(elem => {\n      let newNode = this._createNewNode(elem);\n      outputData.nodes.push(newNode);\n    });\n    console.log(outputData);\n    return outputData;\n  }\n  _createNewNode(node) {\n    //Создание нового узла\n    let newNode = {\n      'id': node.id,\n      'name': this._modifyString(node.id),\n      'level': node.level\n    };\n    return newNode;\n  }\n  _modifyString(str) {\n    str = str.replaceAll('_', ' ');\n    return str;\n  }\n}","map":{"version":3,"names":["DataParser","constructor","data","inputData","Parse","outputData","links","map","elem","newLink","source","target","push","nodes","newNode","_createNewNode","console","log","node","id","_modifyString","level","str","replaceAll"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/graph_model_midicine/view/src/components/graph/DataParser.js"],"sourcesContent":["export class DataParser{\r\n    constructor(data){\r\n        this.inputData = data\r\n    }\r\n\r\n    Parse(){\r\n        let outputData = {\"nodes\":[], \"links\": []}\r\n        \r\n        //Запись связей\r\n        this.inputData.links.map((elem) => {\r\n            let newLink = {'source':elem.source, 'target': elem.target}\r\n            outputData.links.push(newLink)\r\n        })\r\n        \r\n        //Запись узлов\r\n        this.inputData.nodes.map((elem)=>{\r\n            let newNode = this._createNewNode(elem)\r\n            outputData.nodes.push(newNode)\r\n        })\r\n\r\n\r\n        console.log(outputData)\r\n\r\n        return outputData\r\n    }\r\n\r\n    _createNewNode(node){\r\n\r\n\r\n        //Создание нового узла\r\n        let newNode = {\r\n            'id': node.id,\r\n            'name': this._modifyString(node.id),\r\n            'level': node.level\r\n        }\r\n        \r\n        \r\n        return newNode\r\n    }\r\n\r\n    _modifyString(str){\r\n        str = str.replaceAll('_', ' ')\r\n        return str\r\n    }\r\n}"],"mappings":"AAAA,OAAO,MAAMA,UAAU;EACnBC,WAAWA,CAACC,IAAI,EAAC;IACb,IAAI,CAACC,SAAS,GAAGD,IAAI;EACzB;EAEAE,KAAKA,CAAA,EAAE;IACH,IAAIC,UAAU,GAAG;MAAC,OAAO,EAAC,EAAE;MAAE,OAAO,EAAE;IAAE,CAAC;;IAE1C;IACA,IAAI,CAACF,SAAS,CAACG,KAAK,CAACC,GAAG,CAAEC,IAAI,IAAK;MAC/B,IAAIC,OAAO,GAAG;QAAC,QAAQ,EAACD,IAAI,CAACE,MAAM;QAAE,QAAQ,EAAEF,IAAI,CAACG;MAAM,CAAC;MAC3DN,UAAU,CAACC,KAAK,CAACM,IAAI,CAACH,OAAO,CAAC;IAClC,CAAC,CAAC;;IAEF;IACA,IAAI,CAACN,SAAS,CAACU,KAAK,CAACN,GAAG,CAAEC,IAAI,IAAG;MAC7B,IAAIM,OAAO,GAAG,IAAI,CAACC,cAAc,CAACP,IAAI,CAAC;MACvCH,UAAU,CAACQ,KAAK,CAACD,IAAI,CAACE,OAAO,CAAC;IAClC,CAAC,CAAC;IAGFE,OAAO,CAACC,GAAG,CAACZ,UAAU,CAAC;IAEvB,OAAOA,UAAU;EACrB;EAEAU,cAAcA,CAACG,IAAI,EAAC;IAGhB;IACA,IAAIJ,OAAO,GAAG;MACV,IAAI,EAAEI,IAAI,CAACC,EAAE;MACb,MAAM,EAAE,IAAI,CAACC,aAAa,CAACF,IAAI,CAACC,EAAE,CAAC;MACnC,OAAO,EAAED,IAAI,CAACG;IAClB,CAAC;IAGD,OAAOP,OAAO;EAClB;EAEAM,aAAaA,CAACE,GAAG,EAAC;IACdA,GAAG,GAAGA,GAAG,CAACC,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC;IAC9B,OAAOD,GAAG;EACd;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}