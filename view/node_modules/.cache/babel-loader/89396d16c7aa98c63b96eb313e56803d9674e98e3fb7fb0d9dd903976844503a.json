{"ast":null,"code":"var _jsxFileName = \"C:\\\\UsersFolders\\\\Polina\\\\\\u0420\\u042D\\u0423\\\\Graph\\\\view\\\\src\\\\components\\\\graph\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport * as d3 from \"d3\";\nimport './graph.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst myData = {\n  \"nodes\": [{\n    \"id\": \"id1\",\n    \"name\": \"name1\",\n    \"val\": 1,\n    \"color\": \"#D9EDFF\"\n  }, {\n    \"id\": \"id2\",\n    \"name\": \"name2\",\n    \"val\": 10,\n    \"color\": \"#B3CFE9\"\n  }, {\n    \"id\": \"id3\",\n    \"name\": \"name3\",\n    \"val\": 1,\n    \"color\": \"#D9EDFF\"\n  }],\n  \"links\": [{\n    \"source\": \"id1\",\n    \"target\": \"id2\"\n  }, {\n    \"source\": \"id2\",\n    \"target\": \"id3\"\n  }]\n};\nexport const GraphView = () => {\n  _s();\n  const graphRef = useRef(null);\n  const forceRef = useRef();\n  useEffect(() => {\n    // forceRef.current.d3Force(\"collide\", d3.forceCollide(13));\n    forceRef.current.d3Force(\"charge\").strength(-40);\n    forceRef.current.d3Force(\"link\").distance(50);\n    forceRef.current.d3Force(\"charge\").distanceMax(150);\n  }, []);\n  const handleNodeClick = node => {\n    alert(`Выбрали узел ${node.name}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Graphcontainer flex jc-center\",\n    ref: graphRef,\n    children: /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n      graphData: myData,\n      width: 1105,\n      height: 500,\n      ref: forceRef,\n      onNodeClick: handleNodeClick,\n      nodeCanvasObject: (node, ctx, globalScale) => {\n        const label = node.name;\n        const fontSize = node.isClusterNode ? 14 * (node.val / 1500) : 14 / (globalScale * 1.2);\n        ctx.font = `${fontSize}px Sans-Serif`;\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = node.isClusterNode ? \"white\" : \"black\"; //node.color;\n        if (node.isClusterNode) {\n          // console.log();\n          const lineHeight = fontSize * 1.2;\n          const lines = label.split(\",\");\n          let x = node.x;\n          let y = node.y - lineHeight;\n          for (let i = 0; i < lines.length; ++i) {\n            ctx.fillText(lines[i], x, y);\n            y += lineHeight;\n          }\n        } else if (globalScale >= 3.5) {\n          ctx.fillText(label, node.x, node.y + 2.5);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n_s(GraphView, \"b/ySJWiewjWb4EyaDm6U6o1BL1k=\");\n_c = GraphView;\nvar _c;\n$RefreshReg$(_c, \"GraphView\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ForceGraph2D","d3","jsxDEV","_jsxDEV","myData","GraphView","_s","graphRef","forceRef","current","d3Force","strength","distance","distanceMax","handleNodeClick","node","alert","name","className","ref","children","graphData","width","height","onNodeClick","nodeCanvasObject","ctx","globalScale","label","fontSize","isClusterNode","val","font","textAlign","textBaseline","fillStyle","lineHeight","lines","split","x","y","i","length","fillText","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/view/src/components/graph/graph.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport ForceGraph2D from \"react-force-graph-2d\";\r\nimport * as d3 from \"d3\";\r\n\r\nimport './graph.css'\r\n\r\nconst myData = {\r\n    \"nodes\": [ \r\n        { \r\n          \"id\": \"id1\",\r\n          \"name\": \"name1\",\r\n          \"val\": 1,\r\n          \"color\": \"#D9EDFF\"\r\n        },\r\n        { \r\n          \"id\": \"id2\",\r\n          \"name\": \"name2\",\r\n          \"val\": 10,\r\n          \"color\": \"#B3CFE9\" \r\n        },\r\n        { \r\n            \"id\": \"id3\",\r\n            \"name\": \"name3\",\r\n            \"val\": 1,\r\n            \"color\": \"#D9EDFF\" \r\n        },\r\n    ],\r\n    \"links\": [\r\n        {\r\n            \"source\": \"id1\",\r\n            \"target\": \"id2\"\r\n        },\r\n        {\r\n            \"source\": \"id2\",\r\n            \"target\": \"id3\"\r\n        },\r\n    ]\r\n}\r\n\r\nexport const GraphView =() =>{\r\n    const graphRef = useRef(null);\r\n    const forceRef = useRef();\r\n\r\n    useEffect(() => {\r\n        // forceRef.current.d3Force(\"collide\", d3.forceCollide(13));\r\n        forceRef.current.d3Force(\"charge\").strength(-40);\r\n        forceRef.current.d3Force(\"link\").distance(50);\r\n        forceRef.current.d3Force(\"charge\").distanceMax(150);\r\n      }, [])\r\n    \r\n      const handleNodeClick = (node) => {\r\n        alert(`Выбрали узел ${node.name}`)\r\n      };\r\n\r\n    return(\r\n        <div className='Graphcontainer flex jc-center' ref={graphRef}>\r\n            <ForceGraph2D\r\n                graphData={myData}\r\n                width = {1105}\r\n                height = {500}\r\n                ref={forceRef}\r\n                onNodeClick={handleNodeClick}\r\n                nodeCanvasObject={(node, ctx, globalScale) => {\r\n                    const label = node.name;\r\n                    const fontSize = node.isClusterNode\r\n                      ? 14 * (node.val / 1500)\r\n                      : 14 / (globalScale * 1.2);\r\n                    ctx.font = `${fontSize}px Sans-Serif`;\r\n                    ctx.textAlign = \"center\";\r\n                    ctx.textBaseline = \"middle\";\r\n                    ctx.fillStyle = node.isClusterNode ? \"white\" : \"black\"; //node.color;\r\n                    if (node.isClusterNode) {\r\n                      // console.log();\r\n                      const lineHeight = fontSize * 1.2;\r\n                      const lines = label.split(\",\");\r\n                      let x = node.x;\r\n                      let y = node.y - lineHeight;\r\n                      for (let i = 0; i < lines.length; ++i) {\r\n                        ctx.fillText(lines[i], x, y);\r\n                        y += lineHeight;\r\n                      }\r\n                    } else if (globalScale >= 3.5) {\r\n                      ctx.fillText(label, node.x, node.y + 2.5);\r\n                    }\r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}