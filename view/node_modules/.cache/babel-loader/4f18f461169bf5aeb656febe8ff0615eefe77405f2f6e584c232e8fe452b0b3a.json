{"ast":null,"code":"import { BufferAttribute as t, BufferGeometry as e, Vector3 as s, Plane as r, Triangle as n, Object3D as o, Mesh as i, SphereGeometry as h, MeshBasicMaterial as c, BoxGeometry as a, LineBasicMaterial as u, Line as l } from \"three\";\nclass d {\n  static roundNumber(t, e) {\n    const s = Math.pow(10, e);\n    return Math.round(t * s) / s;\n  }\n  static sample(t) {\n    return t[Math.floor(Math.random() * t.length)];\n  }\n  static distanceToSquared(t, e) {\n    var s = t.x - e.x,\n      r = t.y - e.y,\n      n = t.z - e.z;\n    return s * s + r * r + n * n;\n  }\n  static isPointInPoly(t, e) {\n    for (var s = !1, r = -1, n = t.length, o = n - 1; ++r < n; o = r) (t[r].z <= e.z && e.z < t[o].z || t[o].z <= e.z && e.z < t[r].z) && e.x < (t[o].x - t[r].x) * (e.z - t[r].z) / (t[o].z - t[r].z) + t[r].x && (s = !s);\n    return s;\n  }\n  static isVectorInPolygon(t, e, s) {\n    var r = 1e5,\n      n = -1e5,\n      o = [];\n    return e.vertexIds.forEach(t => {\n      r = Math.min(s[t].y, r), n = Math.max(s[t].y, n), o.push(s[t]);\n    }), !!(t.y < n + .5 && t.y > r - .5 && this.isPointInPoly(o, t));\n  }\n  static triarea2(t, e, s) {\n    return (s.x - t.x) * (e.z - t.z) - (e.x - t.x) * (s.z - t.z);\n  }\n  static vequal(t, e) {\n    return this.distanceToSquared(t, e) < 1e-5;\n  }\n  static mergeVertices(s, r = 1e-4) {\n    r = Math.max(r, Number.EPSILON);\n    for (var n = {}, o = s.getIndex(), i = s.getAttribute(\"position\"), h = o ? o.count : i.count, c = 0, a = [], u = [], l = Math.log10(1 / r), d = Math.pow(10, l), p = 0; p < h; p++) {\n      var g = o ? o.getX(p) : p,\n        f = \"\";\n      f += ~~(i.getX(g) * d) + \",\", f += ~~(i.getY(g) * d) + \",\", (f += ~~(i.getZ(g) * d) + \",\") in n ? a.push(n[f]) : (u.push(i.getX(g)), u.push(i.getY(g)), u.push(i.getZ(g)), n[f] = c, a.push(c), c++);\n    }\n    const v = new t(new Float32Array(u), i.itemSize, i.normalized),\n      b = new e();\n    return b.setAttribute(\"position\", v), b.setIndex(a), b;\n  }\n}\nclass p {\n  constructor(t) {\n    this.content = [], this.scoreFunction = t;\n  }\n  push(t) {\n    this.content.push(t), this.sinkDown(this.content.length - 1);\n  }\n  pop() {\n    const t = this.content[0],\n      e = this.content.pop();\n    return this.content.length > 0 && (this.content[0] = e, this.bubbleUp(0)), t;\n  }\n  remove(t) {\n    const e = this.content.indexOf(t),\n      s = this.content.pop();\n    e !== this.content.length - 1 && (this.content[e] = s, this.scoreFunction(s) < this.scoreFunction(t) ? this.sinkDown(e) : this.bubbleUp(e));\n  }\n  size() {\n    return this.content.length;\n  }\n  rescoreElement(t) {\n    this.sinkDown(this.content.indexOf(t));\n  }\n  sinkDown(t) {\n    const e = this.content[t];\n    for (; t > 0;) {\n      const s = (t + 1 >> 1) - 1,\n        r = this.content[s];\n      if (!(this.scoreFunction(e) < this.scoreFunction(r))) break;\n      this.content[s] = e, this.content[t] = r, t = s;\n    }\n  }\n  bubbleUp(t) {\n    const e = this.content.length,\n      s = this.content[t],\n      r = this.scoreFunction(s);\n    for (;;) {\n      const n = t + 1 << 1,\n        o = n - 1;\n      let i,\n        h = null;\n      if (o < e && (i = this.scoreFunction(this.content[o]), i < r && (h = o)), n < e && this.scoreFunction(this.content[n]) < (null === h ? r : i) && (h = n), null === h) break;\n      this.content[t] = this.content[h], this.content[h] = s, t = h;\n    }\n  }\n}\nclass g {\n  constructor() {\n    this.portals = [];\n  }\n  push(t, e) {\n    void 0 === e && (e = t), this.portals.push({\n      left: t,\n      right: e\n    });\n  }\n  stringPull() {\n    const t = this.portals,\n      e = [];\n    let s,\n      r,\n      n,\n      o = 0,\n      i = 0,\n      h = 0;\n    s = t[0].left, r = t[0].left, n = t[0].right, e.push(s);\n    for (let c = 1; c < t.length; c++) {\n      const a = t[c].left,\n        u = t[c].right;\n      if (d.triarea2(s, n, u) <= 0) {\n        if (!(d.vequal(s, n) || d.triarea2(s, r, u) > 0)) {\n          e.push(r), s = r, o = i, r = s, n = s, i = o, h = o, c = o;\n          continue;\n        }\n        n = u, h = c;\n      }\n      if (d.triarea2(s, r, a) >= 0) {\n        if (!(d.vequal(s, r) || d.triarea2(s, n, a) < 0)) {\n          e.push(n), s = n, o = h, r = s, n = s, i = o, h = o, c = o;\n          continue;\n        }\n        r = a, i = c;\n      }\n    }\n    return 0 !== e.length && d.vequal(e[e.length - 1], t[t.length - 1].left) || e.push(t[t.length - 1].left), this.path = e, e;\n  }\n}\nclass f {\n  constructor() {\n    this.zones = {};\n  }\n  static createZone(t, e = 1e-4) {\n    return class {\n      static buildZone(t, e) {\n        const r = this._buildNavigationMesh(t, e),\n          n = {};\n        r.vertices.forEach(t => {\n          t.x = d.roundNumber(t.x, 2), t.y = d.roundNumber(t.y, 2), t.z = d.roundNumber(t.z, 2);\n        }), n.vertices = r.vertices;\n        const o = this._buildPolygonGroups(r);\n        return n.groups = new Array(o.length), o.forEach((t, e) => {\n          const r = new Map();\n          t.forEach((t, e) => {\n            r.set(t, e);\n          });\n          const o = new Array(t.length);\n          t.forEach((t, e) => {\n            const i = [];\n            t.neighbours.forEach(t => i.push(r.get(t)));\n            const h = [];\n            t.neighbours.forEach(e => h.push(this._getSharedVerticesInOrder(t, e)));\n            const c = new s(0, 0, 0);\n            c.add(n.vertices[t.vertexIds[0]]), c.add(n.vertices[t.vertexIds[1]]), c.add(n.vertices[t.vertexIds[2]]), c.divideScalar(3), c.x = d.roundNumber(c.x, 2), c.y = d.roundNumber(c.y, 2), c.z = d.roundNumber(c.z, 2), o[e] = {\n              id: e,\n              neighbours: i,\n              vertexIds: t.vertexIds,\n              centroid: c,\n              portals: h\n            };\n          }), n.groups[e] = o;\n        }), n;\n      }\n      static _buildNavigationMesh(t, e) {\n        return t = d.mergeVertices(t, e), this._buildPolygonsFromGeometry(t);\n      }\n      static _spreadGroupId(t) {\n        let e = new Set([t]);\n        for (; e.size > 0;) {\n          const s = e;\n          e = new Set(), s.forEach(s => {\n            s.group = t.group, s.neighbours.forEach(t => {\n              void 0 === t.group && e.add(t);\n            });\n          });\n        }\n      }\n      static _buildPolygonGroups(t) {\n        const e = [];\n        return t.polygons.forEach(t => {\n          void 0 !== t.group ? e[t.group].push(t) : (t.group = e.length, this._spreadGroupId(t), e.push([t]));\n        }), e;\n      }\n      static _buildPolygonNeighbours(t, e) {\n        const s = new Set(),\n          r = e[t.vertexIds[1]],\n          n = e[t.vertexIds[2]];\n        return e[t.vertexIds[0]].forEach(e => {\n          e !== t && (r.includes(e) || n.includes(e)) && s.add(e);\n        }), r.forEach(e => {\n          e !== t && n.includes(e) && s.add(e);\n        }), s;\n      }\n      static _buildPolygonsFromGeometry(t) {\n        const e = [],\n          r = [],\n          n = t.attributes.position,\n          o = t.index,\n          i = [];\n        for (let t = 0; t < n.count; t++) r.push(new s().fromBufferAttribute(n, t)), i[t] = [];\n        for (let s = 0; s < t.index.count; s += 3) {\n          const t = o.getX(s),\n            r = o.getX(s + 1),\n            n = o.getX(s + 2),\n            h = {\n              vertexIds: [t, r, n],\n              neighbours: null\n            };\n          e.push(h), i[t].push(h), i[r].push(h), i[n].push(h);\n        }\n        return e.forEach(t => {\n          t.neighbours = this._buildPolygonNeighbours(t, i);\n        }), {\n          polygons: e,\n          vertices: r\n        };\n      }\n      static _getSharedVerticesInOrder(t, e) {\n        const s = t.vertexIds,\n          r = s[0],\n          n = s[1],\n          o = s[2],\n          i = e.vertexIds,\n          h = i.includes(r),\n          c = i.includes(n),\n          a = i.includes(o);\n        return h && c && a ? Array.from(s) : h && c ? [r, n] : c && a ? [n, o] : h && a ? [o, r] : (console.warn(\"Error processing navigation mesh neighbors; neighbors with <2 shared vertices found.\"), []);\n      }\n    }.buildZone(t, e);\n  }\n  setZoneData(t, e) {\n    this.zones[t] = e;\n  }\n  getRandomNode(t, e, r, n) {\n    if (!this.zones[t]) return new s();\n    r = r || null, n = n || 0;\n    const o = [];\n    return this.zones[t].groups[e].forEach(t => {\n      r && n ? d.distanceToSquared(r, t.centroid) < n * n && o.push(t.centroid) : o.push(t.centroid);\n    }), d.sample(o) || new s();\n  }\n  getClosestNode(t, e, s, r = !1) {\n    const n = this.zones[e].vertices;\n    let o = null,\n      i = Infinity;\n    return this.zones[e].groups[s].forEach(e => {\n      const s = d.distanceToSquared(e.centroid, t);\n      s < i && (!r || d.isVectorInPolygon(t, e, n)) && (o = e, i = s);\n    }), o;\n  }\n  findPath(t, e, r, n) {\n    const o = this.zones[r].groups[n],\n      i = this.zones[r].vertices,\n      h = this.getClosestNode(t, r, n, !0),\n      c = this.getClosestNode(e, r, n, !0);\n    if (!h || !c) return null;\n    const a = class {\n        static init(t) {\n          for (let e = 0; e < t.length; e++) {\n            const s = t[e];\n            s.f = 0, s.g = 0, s.h = 0, s.cost = 1, s.visited = !1, s.closed = !1, s.parent = null;\n          }\n        }\n        static cleanUp(t) {\n          for (let e = 0; e < t.length; e++) {\n            const s = t[e];\n            delete s.f, delete s.g, delete s.h, delete s.cost, delete s.visited, delete s.closed, delete s.parent;\n          }\n        }\n        static heap() {\n          return new p(function (t) {\n            return t.f;\n          });\n        }\n        static search(t, e, s) {\n          this.init(t);\n          const r = this.heap();\n          for (r.push(e); r.size() > 0;) {\n            const e = r.pop();\n            if (e === s) {\n              let t = e;\n              const s = [];\n              for (; t.parent;) s.push(t), t = t.parent;\n              return this.cleanUp(s), s.reverse();\n            }\n            e.closed = !0;\n            const n = this.neighbours(t, e);\n            for (let t = 0, o = n.length; t < o; t++) {\n              const o = n[t];\n              if (o.closed) continue;\n              const i = e.g + o.cost,\n                h = o.visited;\n              if (!h || i < o.g) {\n                if (o.visited = !0, o.parent = e, !o.centroid || !s.centroid) throw new Error(\"Unexpected state\");\n                o.h = o.h || this.heuristic(o.centroid, s.centroid), o.g = i, o.f = o.g + o.h, h ? r.rescoreElement(o) : r.push(o);\n              }\n            }\n          }\n          return [];\n        }\n        static heuristic(t, e) {\n          return d.distanceToSquared(t, e);\n        }\n        static neighbours(t, e) {\n          const s = [];\n          for (let r = 0; r < e.neighbours.length; r++) s.push(t[e.neighbours[r]]);\n          return s;\n        }\n      }.search(o, h, c),\n      u = function (t, e) {\n        for (var s = 0; s < t.neighbours.length; s++) if (t.neighbours[s] === e.id) return t.portals[s];\n      },\n      l = new g();\n    l.push(t);\n    for (let t = 0; t < a.length; t++) {\n      const e = a[t],\n        s = a[t + 1];\n      if (s) {\n        const t = u(e, s);\n        l.push(i[t[0]], i[t[1]]);\n      }\n    }\n    l.push(e), l.stringPull();\n    const f = l.path.map(t => new s(t.x, t.y, t.z));\n    return f.shift(), f;\n  }\n}\nf.prototype.getGroup = function () {\n  const t = new r();\n  return function (e, s, r = !1) {\n    if (!this.zones[e]) return null;\n    let n = null,\n      o = Math.pow(50, 2);\n    const i = this.zones[e];\n    for (let e = 0; e < i.groups.length; e++) {\n      const h = i.groups[e];\n      for (const c of h) {\n        if (r && (t.setFromCoplanarPoints(i.vertices[c.vertexIds[0]], i.vertices[c.vertexIds[1]], i.vertices[c.vertexIds[2]]), Math.abs(t.distanceToPoint(s)) < .01) && d.isPointInPoly([i.vertices[c.vertexIds[0]], i.vertices[c.vertexIds[1]], i.vertices[c.vertexIds[2]]], s)) return e;\n        const h = d.distanceToSquared(c.centroid, s);\n        h < o && (n = e, o = h);\n      }\n    }\n    return n;\n  };\n}(), f.prototype.clampStep = function () {\n  const t = new s(),\n    e = new r(),\n    o = new n(),\n    i = new s();\n  let h,\n    c,\n    a = new s();\n  return function (s, r, n, u, l, d) {\n    const p = this.zones[u].vertices,\n      g = this.zones[u].groups[l],\n      f = [n],\n      v = {};\n    v[n.id] = 0, h = void 0, a.set(0, 0, 0), c = Infinity, e.setFromCoplanarPoints(p[n.vertexIds[0]], p[n.vertexIds[1]], p[n.vertexIds[2]]), e.projectPoint(r, t), i.copy(t);\n    for (let e = f.pop(); e; e = f.pop()) {\n      o.set(p[e.vertexIds[0]], p[e.vertexIds[1]], p[e.vertexIds[2]]), o.closestPointToPoint(i, t), t.distanceToSquared(i) < c && (h = e, a.copy(t), c = t.distanceToSquared(i));\n      const s = v[e.id];\n      if (!(s > 2)) for (let t = 0; t < e.neighbours.length; t++) {\n        const r = g[e.neighbours[t]];\n        r.id in v || (f.push(r), v[r.id] = s + 1);\n      }\n    }\n    return d.copy(a), h;\n  };\n}();\nclass v extends o {\n  constructor() {\n    super(), this._playerMarker = new i(new h(.25, 32, 32), new c({\n      color: 15631215\n    })), this._targetMarker = new i(new a(.3, .3, .3), new c({\n      color: 14469912\n    })), this._nodeMarker = new i(new a(.1, .8, .1), new c({\n      color: 4417387\n    })), this._stepMarker = new i(new a(.1, 1, .1), new c({\n      color: 14472114\n    })), this._pathMarker = new o(), this._pathLineMaterial = new u({\n      color: 41903,\n      linewidth: 2\n    }), this._pathPointMaterial = new c({\n      color: 41903\n    }), this._pathPointGeometry = new h(.08), this._markers = [this._playerMarker, this._targetMarker, this._nodeMarker, this._stepMarker, this._pathMarker], this._markers.forEach(t => {\n      t.visible = !1, this.add(t);\n    });\n  }\n  setPath(s) {\n    for (; this._pathMarker.children.length;) this._pathMarker.children[0].visible = !1, this._pathMarker.remove(this._pathMarker.children[0]);\n    s = [this._playerMarker.position].concat(s);\n    const r = new e();\n    r.setAttribute(\"position\", new t(new Float32Array(3 * s.length), 3));\n    for (let t = 0; t < s.length; t++) r.attributes.position.setXYZ(t, s[t].x, s[t].y + .2, s[t].z);\n    this._pathMarker.add(new l(r, this._pathLineMaterial));\n    for (let t = 0; t < s.length - 1; t++) {\n      const e = new i(this._pathPointGeometry, this._pathPointMaterial);\n      e.position.copy(s[t]), e.position.y += .2, this._pathMarker.add(e);\n    }\n    return this._pathMarker.visible = !0, this;\n  }\n  setPlayerPosition(t) {\n    return this._playerMarker.position.copy(t), this._playerMarker.visible = !0, this;\n  }\n  setTargetPosition(t) {\n    return this._targetMarker.position.copy(t), this._targetMarker.visible = !0, this;\n  }\n  setNodePosition(t) {\n    return this._nodeMarker.position.copy(t), this._nodeMarker.visible = !0, this;\n  }\n  setStepPosition(t) {\n    return this._stepMarker.position.copy(t), this._stepMarker.visible = !0, this;\n  }\n  reset() {\n    for (; this._pathMarker.children.length;) this._pathMarker.children[0].visible = !1, this._pathMarker.remove(this._pathMarker.children[0]);\n    return this._markers.forEach(t => {\n      t.visible = !1;\n    }), this;\n  }\n}\nexport { f as Pathfinding, v as PathfindingHelper };","map":{"version":3,"names":["d","roundNumber","t","e","s","Math","pow","round","sample","floor","random","length","distanceToSquared","x","r","y","n","z","isPointInPoly","o","isVectorInPolygon","vertexIds","forEach","min","max","push","triarea2","vequal","mergeVertices","Number","EPSILON","getIndex","i","getAttribute","h","count","c","a","u","l","log10","p","g","getX","f","getY","getZ","v","Float32Array","itemSize","normalized","b","setAttribute","setIndex","constructor","content","scoreFunction","sinkDown","pop","bubbleUp","remove","indexOf","size","rescoreElement","portals","left","right","stringPull","path","zones","createZone","buildZone","_buildNavigationMesh","vertices","_buildPolygonGroups","groups","Array","Map","set","neighbours","get","_getSharedVerticesInOrder","add","divideScalar","id","centroid","_buildPolygonsFromGeometry","_spreadGroupId","Set","group","polygons","_buildPolygonNeighbours","includes","attributes","position","index","fromBufferAttribute","from","console","warn","setZoneData","getRandomNode","getClosestNode","Infinity","findPath","init","cost","visited","closed","parent","cleanUp","heap","search","reverse","Error","heuristic","getPortalFromTo","map","shift","prototype","getGroup","setFromCoplanarPoints","abs","distanceToPoint","clampStep","projectPoint","copy","closestPointToPoint","_playerMarker","color","_targetMarker","_nodeMarker","_stepMarker","_pathMarker","_pathLineMaterial","linewidth","_pathPointMaterial","_pathPointGeometry","_markers","visible","setPath","children","concat","setXYZ","setPlayerPosition","setTargetPosition","setNodePosition","setStepPosition","reset","Pathfinding","PathfindingHelper"],"sources":["C:\\UsersFolders\\Polina\\РЭУ\\Graph\\view\\node_modules\\three-pathfinding\\src\\Utils.js","C:\\UsersFolders\\Polina\\РЭУ\\Graph\\view\\node_modules\\three-pathfinding\\src\\BinaryHeap.js","C:\\UsersFolders\\Polina\\РЭУ\\Graph\\view\\node_modules\\three-pathfinding\\src\\Channel.js","C:\\UsersFolders\\Polina\\РЭУ\\Graph\\view\\node_modules\\three-pathfinding\\src\\Pathfinding.js","C:\\UsersFolders\\Polina\\РЭУ\\Graph\\view\\node_modules\\three-pathfinding\\src\\Builder.js","C:\\UsersFolders\\Polina\\РЭУ\\Graph\\view\\node_modules\\three-pathfinding\\src\\AStar.js","C:\\UsersFolders\\Polina\\РЭУ\\Graph\\view\\node_modules\\three-pathfinding\\src\\PathfindingHelper.js"],"sourcesContent":["import { BufferAttribute, BufferGeometry } from 'three';\n\nclass Utils {\n\n  static roundNumber (value, decimals) {\n    const factor = Math.pow(10, decimals);\n    return Math.round(value * factor) / factor;\n  }\n\n  static sample (list) {\n    return list[Math.floor(Math.random() * list.length)];\n  }\n\n  static distanceToSquared (a, b) {\n\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;\n    var dz = a.z - b.z;\n\n    return dx * dx + dy * dy + dz * dz;\n\n  }\n\n  //+ Jonas Raoni Soares Silva\n  //@ http://jsfromhell.com/math/is-point-in-poly [rev. #0]\n  static isPointInPoly (poly, pt) {\n    for (var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)\n      ((poly[i].z <= pt.z && pt.z < poly[j].z) || (poly[j].z <= pt.z && pt.z < poly[i].z)) && (pt.x < (poly[j].x - poly[i].x) * (pt.z - poly[i].z) / (poly[j].z - poly[i].z) + poly[i].x) && (c = !c);\n    return c;\n  }\n\n  static isVectorInPolygon (vector, polygon, vertices) {\n\n    // reference point will be the centroid of the polygon\n    // We need to rotate the vector as well as all the points which the polygon uses\n\n    var lowestPoint = 100000;\n    var highestPoint = -100000;\n\n    var polygonVertices = [];\n\n    polygon.vertexIds.forEach((vId) => {\n      lowestPoint = Math.min(vertices[vId].y, lowestPoint);\n      highestPoint = Math.max(vertices[vId].y, highestPoint);\n      polygonVertices.push(vertices[vId]);\n    });\n\n    if (vector.y < highestPoint + 0.5 && vector.y > lowestPoint - 0.5 &&\n      this.isPointInPoly(polygonVertices, vector)) {\n      return true;\n    }\n    return false;\n  }\n\n  static triarea2 (a, b, c) {\n    var ax = b.x - a.x;\n    var az = b.z - a.z;\n    var bx = c.x - a.x;\n    var bz = c.z - a.z;\n    return bx * az - ax * bz;\n  }\n\n  static vequal (a, b) {\n    return this.distanceToSquared(a, b) < 0.00001;\n  }\n\n  /**\n   * Modified version of BufferGeometryUtils.mergeVertices, ignoring vertex\n   * attributes other than position.\n   *\n   * @param {THREE.BufferGeometry} geometry\n   * @param {number} tolerance\n   * @return {THREE.BufferGeometry>}\n   */\n  static mergeVertices (geometry, tolerance = 1e-4) {\n\n    tolerance = Math.max( tolerance, Number.EPSILON );\n\n    // Generate an index buffer if the geometry doesn't have one, or optimize it\n    // if it's already available.\n    var hashToIndex = {};\n    var indices = geometry.getIndex();\n    var positions = geometry.getAttribute( 'position' );\n    var vertexCount = indices ? indices.count : positions.count;\n\n    // Next value for triangle indices.\n    var nextIndex = 0;\n\n    var newIndices = [];\n    var newPositions = [];\n\n    // Convert the error tolerance to an amount of decimal places to truncate to.\n    var decimalShift = Math.log10( 1 / tolerance );\n    var shiftMultiplier = Math.pow( 10, decimalShift );\n\n    for ( var i = 0; i < vertexCount; i ++ ) {\n\n      var index = indices ? indices.getX( i ) : i;\n\n      // Generate a hash for the vertex attributes at the current index 'i'.\n      var hash = '';\n\n      // Double tilde truncates the decimal value.\n      hash += `${ ~ ~ ( positions.getX( index ) * shiftMultiplier ) },`;\n      hash += `${ ~ ~ ( positions.getY( index ) * shiftMultiplier ) },`;\n      hash += `${ ~ ~ ( positions.getZ( index ) * shiftMultiplier ) },`;\n\n      // Add another reference to the vertex if it's already\n      // used by another index.\n      if ( hash in hashToIndex ) {\n\n        newIndices.push( hashToIndex[ hash ] );\n\n      } else {\n\n        newPositions.push( positions.getX( index ) );\n        newPositions.push( positions.getY( index ) );\n        newPositions.push( positions.getZ( index ) );\n\n        hashToIndex[ hash ] = nextIndex;\n        newIndices.push( nextIndex );\n        nextIndex ++;\n\n      }\n\n    }\n\n    // Construct merged BufferGeometry.\n\n    const positionAttribute = new BufferAttribute(\n      new Float32Array( newPositions ),\n      positions.itemSize,\n      positions.normalized\n    );\n\n    const result = new BufferGeometry();\n    result.setAttribute( 'position', positionAttribute );\n    result.setIndex( newIndices );\n\n    return result;\n\n  }\n}\n\nexport { Utils };\n","// javascript-astar\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a binary heap.\n\nclass BinaryHeap {\n  constructor (scoreFunction) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n  }\n\n  push (element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n\n    // Allow it to sink down.\n    this.sinkDown(this.content.length - 1);\n  }\n\n  pop () {\n    // Store the first element so we can return it later.\n    const result = this.content[0];\n    // Get the element at the end of the array.\n    const end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it bubble up.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.bubbleUp(0);\n    }\n    return result;\n  }\n\n  remove (node) {\n    const i = this.content.indexOf(node);\n\n    // When it is found, the process seen in 'pop' is repeated\n    // to fill up the hole.\n    const end = this.content.pop();\n\n    if (i !== this.content.length - 1) {\n      this.content[i] = end;\n\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\n        this.sinkDown(i);\n      } else {\n        this.bubbleUp(i);\n      }\n    }\n  }\n\n  size () {\n    return this.content.length;\n  }\n\n  rescoreElement (node) {\n    this.sinkDown(this.content.indexOf(node));\n  }\n\n  sinkDown (n) {\n    // Fetch the element that has to be sunk.\n    const element = this.content[n];\n\n    // When at 0, an element can not sink any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      const parentN = ((n + 1) >> 1) - 1;\n      const parent = this.content[parentN];\n\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        // Swap the elements if the parent is greater.\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      } else {\n        // Found a parent that is less, no need to sink any further.\n        break;\n      }\n    }\n  }\n\n  bubbleUp (n) {\n    // Look up the target element and its score.\n    const length = this.content.length,\n      element = this.content[n],\n      elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      const child2N = (n + 1) << 1,\n        child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      let swap = null;\n      let child1Score;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        const child1 = this.content[child1N];\n        child1Score = this.scoreFunction(child1);\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        const child2 = this.content[child2N],\n          child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      }\n\n      // Otherwise, we are done.\n      else {\n        break;\n      }\n    }\n  }\n\n}\n\nexport { BinaryHeap };\n","import { Utils } from './Utils';\n\nclass Channel {\n  constructor () {\n    this.portals = [];\n  }\n\n  push (p1, p2) {\n    if (p2 === undefined) p2 = p1;\n    this.portals.push({\n      left: p1,\n      right: p2\n    });\n  }\n\n  stringPull () {\n    const portals = this.portals;\n    const pts = [];\n    // Init scan state\n    let portalApex, portalLeft, portalRight;\n    let apexIndex = 0,\n      leftIndex = 0,\n      rightIndex = 0;\n\n    portalApex = portals[0].left;\n    portalLeft = portals[0].left;\n    portalRight = portals[0].right;\n\n    // Add start point.\n    pts.push(portalApex);\n\n    for (let i = 1; i < portals.length; i++) {\n      const left = portals[i].left;\n      const right = portals[i].right;\n\n      // Update right vertex.\n      if (Utils.triarea2(portalApex, portalRight, right) <= 0.0) {\n        if (Utils.vequal(portalApex, portalRight) || Utils.triarea2(portalApex, portalLeft, right) > 0.0) {\n          // Tighten the funnel.\n          portalRight = right;\n          rightIndex = i;\n        } else {\n          // Right over left, insert left to path and restart scan from portal left point.\n          pts.push(portalLeft);\n          // Make current left the new apex.\n          portalApex = portalLeft;\n          apexIndex = leftIndex;\n          // Reset portal\n          portalLeft = portalApex;\n          portalRight = portalApex;\n          leftIndex = apexIndex;\n          rightIndex = apexIndex;\n          // Restart scan\n          i = apexIndex;\n          continue;\n        }\n      }\n\n      // Update left vertex.\n      if (Utils.triarea2(portalApex, portalLeft, left) >= 0.0) {\n        if (Utils.vequal(portalApex, portalLeft) || Utils.triarea2(portalApex, portalRight, left) < 0.0) {\n          // Tighten the funnel.\n          portalLeft = left;\n          leftIndex = i;\n        } else {\n          // Left over right, insert right to path and restart scan from portal right point.\n          pts.push(portalRight);\n          // Make current right the new apex.\n          portalApex = portalRight;\n          apexIndex = rightIndex;\n          // Reset portal\n          portalLeft = portalApex;\n          portalRight = portalApex;\n          leftIndex = apexIndex;\n          rightIndex = apexIndex;\n          // Restart scan\n          i = apexIndex;\n          continue;\n        }\n      }\n    }\n\n    if ((pts.length === 0) || (!Utils.vequal(pts[pts.length - 1], portals[portals.length - 1].left))) {\n      // Append last point to path.\n      pts.push(portals[portals.length - 1].left);\n    }\n\n    this.path = pts;\n    return pts;\n  }\n}\n\nexport { Channel };\n","import {\n\tVector3,\n\tPlane,\n\tTriangle,\n} from 'three';\n\nimport { Utils } from './Utils';\nimport { AStar } from './AStar';\nimport { Builder } from './Builder';\nimport { Channel } from './Channel';\n\n/**\n * Defines an instance of the pathfinding module, with one or more zones.\n */\nclass Pathfinding {\n\tconstructor () {\n\t\tthis.zones = {};\n\t}\n\n\t/**\n\t * (Static) Builds a zone/node set from navigation mesh geometry.\n\t * @param  {BufferGeometry} geometry\n\t * @param  {number} tolerance Vertex welding tolerance.\n\t * @return {Zone}\n\t */\n\tstatic createZone (geometry, tolerance = 1e-4) {\n\t\treturn Builder.buildZone(geometry, tolerance);\n\t}\n\n\t/**\n\t * Sets data for the given zone.\n\t * @param {string} zoneID\n\t * @param {Zone} zone\n\t */\n\tsetZoneData (zoneID, zone) {\n\t\tthis.zones[zoneID] = zone;\n\t}\n\n\t/**\n\t * Returns a random node within a given range of a given position.\n\t * @param  {string} zoneID\n\t * @param  {number} groupID\n\t * @param  {Vector3} nearPosition\n\t * @param  {number} nearRange\n\t * @return {Node}\n\t */\n\tgetRandomNode (zoneID, groupID, nearPosition, nearRange) {\n\n\t\tif (!this.zones[zoneID]) return new Vector3();\n\n\t\tnearPosition = nearPosition || null;\n\t\tnearRange = nearRange || 0;\n\n\t\tconst candidates = [];\n\t\tconst polygons = this.zones[zoneID].groups[groupID];\n\n\t\tpolygons.forEach((p) => {\n\t\t\tif (nearPosition && nearRange) {\n\t\t\t\tif (Utils.distanceToSquared(nearPosition, p.centroid) < nearRange * nearRange) {\n\t\t\t\t\tcandidates.push(p.centroid);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcandidates.push(p.centroid);\n\t\t\t}\n\t\t});\n\n\t\treturn Utils.sample(candidates) || new Vector3();\n\t}\n\n\t/**\n\t * Returns the closest node to the target position.\n\t * @param  {Vector3} position\n\t * @param  {string}  zoneID\n\t * @param  {number}  groupID\n\t * @param  {boolean} checkPolygon\n\t * @return {Node}\n\t */\n\tgetClosestNode (position, zoneID, groupID, checkPolygon = false) {\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\t\tconst vertices = this.zones[zoneID].vertices;\n\t\tlet closestNode = null;\n\t\tlet closestDistance = Infinity;\n\n\t\tnodes.forEach((node) => {\n\t\t\tconst distance = Utils.distanceToSquared(node.centroid, position);\n\t\t\tif (distance < closestDistance\n\t\t\t\t\t&& (!checkPolygon || Utils.isVectorInPolygon(position, node, vertices))) {\n\t\t\t\tclosestNode = node;\n\t\t\t\tclosestDistance = distance;\n\t\t\t}\n\t\t});\n\n\t\treturn closestNode;\n\t}\n\n\t/**\n\t * Returns a path between given start and end points. If a complete path\n\t * cannot be found, will return the nearest endpoint available.\n\t *\n\t * @param  {Vector3} startPosition Start position.\n\t * @param  {Vector3} targetPosition Destination.\n\t * @param  {string} zoneID ID of current zone.\n\t * @param  {number} groupID Current group ID.\n\t * @return {Array<Vector3>} Array of points defining the path.\n\t */\n\tfindPath (startPosition, targetPosition, zoneID, groupID) {\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\t\tconst vertices = this.zones[zoneID].vertices;\n\n\t\tconst closestNode = this.getClosestNode(startPosition, zoneID, groupID, true);\n\t\tconst farthestNode = this.getClosestNode(targetPosition, zoneID, groupID, true);\n\n\t\t// If we can't find any node, just go straight to the target\n\t\tif (!closestNode || !farthestNode) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst paths = AStar.search(nodes, closestNode, farthestNode);\n\n\t\tconst getPortalFromTo = function (a, b) {\n\t\t\tfor (var i = 0; i < a.neighbours.length; i++) {\n\t\t\t\tif (a.neighbours[i] === b.id) {\n\t\t\t\t\treturn a.portals[i];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// We have the corridor, now pull the rope.\n\t\tconst channel = new Channel();\n\t\tchannel.push(startPosition);\n\t\tfor (let i = 0; i < paths.length; i++) {\n\t\t\tconst polygon = paths[i];\n\t\t\tconst nextPolygon = paths[i + 1];\n\n\t\t\tif (nextPolygon) {\n\t\t\t\tconst portals = getPortalFromTo(polygon, nextPolygon);\n\t\t\t\tchannel.push(\n\t\t\t\t\tvertices[portals[0]],\n\t\t\t\t\tvertices[portals[1]]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tchannel.push(targetPosition);\n\t\tchannel.stringPull();\n\n\t\t// Return the path, omitting first position (which is already known).\n\t\tconst path = channel.path.map((c) => new Vector3(c.x, c.y, c.z));\n\t\tpath.shift();\n\t\treturn path;\n\t}\n}\n\n/**\n * Returns closest node group ID for given position.\n * @param  {string} zoneID\n * @param  {Vector3} position\n * @return {number}\n */\nPathfinding.prototype.getGroup = (function() {\n\tconst plane = new Plane();\n\treturn function (zoneID, position, checkPolygon = false) {\n\t\tif (!this.zones[zoneID]) return null;\n\n\t\tlet closestNodeGroup = null;\n\t\tlet distance = Math.pow(50, 2);\n\t\tconst zone = this.zones[zoneID];\n\n\t\tfor (let i = 0; i < zone.groups.length; i++) {\n\t\t\tconst group = zone.groups[i];\n\t\t\tfor (const node of group) {\n\t\t\t\tif (checkPolygon) {\n\t\t\t\t\tplane.setFromCoplanarPoints(\n\t\t\t\t\t\tzone.vertices[node.vertexIds[0]],\n\t\t\t\t\t\tzone.vertices[node.vertexIds[1]],\n\t\t\t\t\t\tzone.vertices[node.vertexIds[2]]\n\t\t\t\t\t);\n\t\t\t\t\tif (Math.abs(plane.distanceToPoint(position)) < 0.01) {\n\t\t\t\t\t\tconst poly = [\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[0]],\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[1]],\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[2]]\n\t\t\t\t\t\t];\n\t\t\t\t\t\tif(Utils.isPointInPoly(poly, position)) {\n\t\t\t\t\t\t\treturn i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst measuredDistance = Utils.distanceToSquared(node.centroid, position);\n\t\t\t\tif (measuredDistance < distance) {\n\t\t\t\t\tclosestNodeGroup = i;\n\t\t\t\t\tdistance = measuredDistance;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn closestNodeGroup;\n\t};\n}());\n\n/**\n * Clamps a step along the navmesh, given start and desired endpoint. May be\n * used to constrain first-person / WASD controls.\n *\n * @param  {Vector3} start\n * @param  {Vector3} end Desired endpoint.\n * @param  {Node} node\n * @param  {string} zoneID\n * @param  {number} groupID\n * @param  {Vector3} endTarget Updated endpoint.\n * @return {Node} Updated node.\n */\nPathfinding.prototype.clampStep = (function () {\n\tconst point = new Vector3();\n\tconst plane = new Plane();\n\tconst triangle = new Triangle();\n\n\tconst endPoint = new Vector3();\n\n\tlet closestNode;\n\tlet closestPoint = new Vector3();\n\tlet closestDistance;\n\n\treturn function (startRef, endRef, node, zoneID, groupID, endTarget) {\n\t\tconst vertices = this.zones[zoneID].vertices;\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\n\t\tconst nodeQueue = [node];\n\t\tconst nodeDepth = {};\n\t\tnodeDepth[node.id] = 0;\n\n\t\tclosestNode = undefined;\n\t\tclosestPoint.set(0, 0, 0);\n\t\tclosestDistance = Infinity;\n\n\t\t// Project the step along the current node.\n\t\tplane.setFromCoplanarPoints(\n\t\t\tvertices[node.vertexIds[0]],\n\t\t\tvertices[node.vertexIds[1]],\n\t\t\tvertices[node.vertexIds[2]]\n\t\t);\n\t\tplane.projectPoint(endRef, point);\n\t\tendPoint.copy(point);\n\n\t\tfor (let currentNode = nodeQueue.pop(); currentNode; currentNode = nodeQueue.pop()) {\n\n\t\t\ttriangle.set(\n\t\t\t\tvertices[currentNode.vertexIds[0]],\n\t\t\t\tvertices[currentNode.vertexIds[1]],\n\t\t\t\tvertices[currentNode.vertexIds[2]]\n\t\t\t);\n\n\t\t\ttriangle.closestPointToPoint(endPoint, point);\n\n\t\t\tif (point.distanceToSquared(endPoint) < closestDistance) {\n\t\t\t\tclosestNode = currentNode;\n\t\t\t\tclosestPoint.copy(point);\n\t\t\t\tclosestDistance = point.distanceToSquared(endPoint);\n\t\t\t}\n\n\t\t\tconst depth = nodeDepth[currentNode.id];\n\t\t\tif (depth > 2) continue;\n\n\t\t\tfor (let i = 0; i < currentNode.neighbours.length; i++) {\n\t\t\t\tconst neighbour = nodes[currentNode.neighbours[i]];\n\t\t\t\tif (neighbour.id in nodeDepth) continue;\n\n\t\t\t\tnodeQueue.push(neighbour);\n\t\t\t\tnodeDepth[neighbour.id] = depth + 1;\n\t\t\t}\n\t\t}\n\n\t\tendTarget.copy(closestPoint);\n\t\treturn closestNode;\n\t};\n}());\n\n/**\n * Defines a zone of interconnected groups on a navigation mesh.\n *\n * @type {Object}\n * @property {Array<Group>} groups\n * @property {Array<Vector3>} vertices\n */\nconst Zone = {}; // jshint ignore:line\n\n/**\n * Defines a group within a navigation mesh.\n *\n * @type {Object}\n */\nconst Group = {}; // jshint ignore:line\n\n/**\n * Defines a node (or polygon) within a group.\n *\n * @type {Object}\n * @property {number} id\n * @property {Array<number>} neighbours IDs of neighboring nodes.\n * @property {Array<number>} vertexIds\n * @property {Vector3} centroid\n * @property {Array<Array<number>>} portals Array of portals, each defined by two vertex IDs.\n * @property {boolean} closed\n * @property {number} cost\n */\nconst Node = {}; // jshint ignore:line\n\nexport { Pathfinding };\n","import { Vector3 } from 'three';\n\nimport { Utils } from './Utils';\n\nclass Builder {\n  /**\n   * Constructs groups from the given navigation mesh.\n   * @param  {BufferGeometry} geometry\n   * @param  {number} tolerance\n   * @return {Zone}\n   */\n  static buildZone (geometry, tolerance) {\n\n    const navMesh = this._buildNavigationMesh(geometry, tolerance);\n\n    const zone = {};\n\n    navMesh.vertices.forEach((v) => {\n      v.x = Utils.roundNumber(v.x, 2);\n      v.y = Utils.roundNumber(v.y, 2);\n      v.z = Utils.roundNumber(v.z, 2);\n    });\n\n    zone.vertices = navMesh.vertices;\n\n    const groups = this._buildPolygonGroups(navMesh);\n\n    // TODO: This block represents a large portion of navigation mesh construction time\n    // and could probably be optimized. For example, construct portals while\n    // determining the neighbor graph.\n    zone.groups = new Array(groups.length);\n    groups.forEach((group, groupIndex) => {\n\n      const indexByPolygon = new Map(); // { polygon: index in group }\n      group.forEach((poly, polyIndex) => { indexByPolygon.set(poly, polyIndex); });\n\n      const newGroup = new Array(group.length);\n      group.forEach((poly, polyIndex) => {\n\n        const neighbourIndices = [];\n        poly.neighbours.forEach((n) => neighbourIndices.push(indexByPolygon.get(n)));\n\n        // Build a portal list to each neighbour\n        const portals = [];\n        poly.neighbours.forEach((n) => portals.push(this._getSharedVerticesInOrder(poly, n)));\n\n        const centroid = new Vector3( 0, 0, 0 );\n        centroid.add( zone.vertices[ poly.vertexIds[0] ] );\n        centroid.add( zone.vertices[ poly.vertexIds[1] ] );\n        centroid.add( zone.vertices[ poly.vertexIds[2] ] );\n        centroid.divideScalar( 3 );\n        centroid.x = Utils.roundNumber(centroid.x, 2);\n        centroid.y = Utils.roundNumber(centroid.y, 2);\n        centroid.z = Utils.roundNumber(centroid.z, 2);\n\n        newGroup[polyIndex] = {\n          id: polyIndex,\n          neighbours: neighbourIndices,\n          vertexIds: poly.vertexIds,\n          centroid: centroid,\n          portals: portals\n        };\n      });\n\n      zone.groups[groupIndex] = newGroup;\n    });\n\n    return zone;\n  }\n\n  /**\n   * Constructs a navigation mesh from the given geometry.\n   * @param {BufferGeometry} geometry\n   * @return {Object}\n   */\n  static _buildNavigationMesh (geometry, tolerance) {\n    geometry = Utils.mergeVertices(geometry, tolerance);\n    return this._buildPolygonsFromGeometry(geometry);\n  }\n\n  /**\n   * Spreads the group ID of the given polygon to all connected polygons\n   * @param {Object} seed\n   */\n  static _spreadGroupId (seed) {\n    let nextBatch = new Set([seed]);\n\n    while(nextBatch.size > 0) {\n      const batch = nextBatch;\n      nextBatch = new Set();\n\n      batch.forEach((polygon) => {\n        polygon.group = seed.group;\n        polygon.neighbours.forEach((neighbour) => {\n          if(neighbour.group === undefined) {\n            nextBatch.add(neighbour);\n          }\n        });\n      });\n    }\n  }\n\n  static _buildPolygonGroups (navigationMesh) {\n\n    const polygons = navigationMesh.polygons;\n\n    const polygonGroups = [];\n\n    polygons.forEach((polygon) => {\n      if (polygon.group !== undefined) {\n        // this polygon is already part of a group\n        polygonGroups[polygon.group].push(polygon);\n      } else {\n        // we need to make a new group and spread its ID to neighbors\n        polygon.group = polygonGroups.length;\n        this._spreadGroupId(polygon);\n        polygonGroups.push([polygon]);\n      }\n    });\n\n    return polygonGroups;\n  }\n\n  static _buildPolygonNeighbours (polygon, vertexPolygonMap) {\n    const neighbours = new Set();\n\n    const groupA = vertexPolygonMap[polygon.vertexIds[0]];\n    const groupB = vertexPolygonMap[polygon.vertexIds[1]];\n    const groupC = vertexPolygonMap[polygon.vertexIds[2]];\n\n    // It's only necessary to iterate groups A and B. Polygons contained only\n    // in group C cannot share a >1 vertex with this polygon.\n    // IMPORTANT: Bublé cannot compile for-of loops.\n    groupA.forEach((candidate) => {\n      if (candidate === polygon) return;\n      if (groupB.includes(candidate) || groupC.includes(candidate)) {\n        neighbours.add(candidate);\n      }\n    });\n    groupB.forEach((candidate) => {\n      if (candidate === polygon) return;\n      if (groupC.includes(candidate)) {\n        neighbours.add(candidate);\n      }\n    });\n\n    return neighbours;\n  }\n\n  static _buildPolygonsFromGeometry (geometry) {\n\n    const polygons = [];\n    const vertices = [];\n\n    const position = geometry.attributes.position;\n    const index = geometry.index;\n\n    // Constructing the neighbor graph brute force is O(n²). To avoid that,\n    // create a map from vertices to the polygons that contain them, and use it\n    // while connecting polygons. This reduces complexity to O(n*m), where 'm'\n    // is related to connectivity of the mesh.\n\n    /** Array of polygon objects by vertex index. */\n    const vertexPolygonMap = [];\n\n    for (let i = 0; i < position.count; i++) {\n      vertices.push(new Vector3().fromBufferAttribute(position, i));\n      vertexPolygonMap[i] = [];\n    }\n\n    // Convert the faces into a custom format that supports more than 3 vertices\n    for (let i = 0; i < geometry.index.count; i += 3) {\n      const a = index.getX(i);\n      const b = index.getX(i + 1);\n      const c = index.getX(i + 2);\n      const poly = {vertexIds: [a, b, c], neighbours: null};\n      polygons.push(poly);\n      vertexPolygonMap[a].push(poly);\n      vertexPolygonMap[b].push(poly);\n      vertexPolygonMap[c].push(poly);\n    }\n\n    // Build a list of adjacent polygons\n    polygons.forEach((polygon) => {\n      polygon.neighbours = this._buildPolygonNeighbours(polygon, vertexPolygonMap);\n    });\n\n    return {\n      polygons: polygons,\n      vertices: vertices\n    };\n  }\n\n  static _getSharedVerticesInOrder (a, b) {\n\n    const aList = a.vertexIds;\n    const a0 = aList[0], a1 = aList[1], a2 = aList[2];\n\n    const bList = b.vertexIds;\n    const shared0 = bList.includes(a0);\n    const shared1 = bList.includes(a1);\n    const shared2 = bList.includes(a2);\n\n    // it seems that we shouldn't have an a and b with <2 shared vertices here unless there's a bug\n    // in the neighbor identification code, or perhaps a malformed input geometry; 3 shared vertices\n    // is a kind of embarrassing but possible geometry we should handle\n    if (shared0 && shared1 && shared2) {\n      return Array.from(aList);\n    } else if (shared0 && shared1) {\n      return [a0, a1];\n    } else if (shared1 && shared2) {\n      return [a1, a2];\n    } else if (shared0 && shared2) {\n      return [a2, a0]; // this ordering will affect the string pull algorithm later, not clear if significant\n    } else {\n      console.warn(\"Error processing navigation mesh neighbors; neighbors with <2 shared vertices found.\");\n      return [];\n    }\n  }\n}\n\nexport { Builder };\n","import { BinaryHeap } from './BinaryHeap';\nimport { Utils } from './Utils.js';\n\nclass AStar {\n  static init (graph) {\n    for (let x = 0; x < graph.length; x++) {\n      //for(var x in graph) {\n      const node = graph[x];\n      node.f = 0;\n      node.g = 0;\n      node.h = 0;\n      node.cost = 1.0;\n      node.visited = false;\n      node.closed = false;\n      node.parent = null;\n    }\n  }\n\n  static cleanUp (graph) {\n    for (let x = 0; x < graph.length; x++) {\n      const node = graph[x];\n      delete node.f;\n      delete node.g;\n      delete node.h;\n      delete node.cost;\n      delete node.visited;\n      delete node.closed;\n      delete node.parent;\n    }\n  }\n\n  static heap () {\n    return new BinaryHeap(function (node) {\n      return node.f;\n    });\n  }\n\n  static search (graph, start, end) {\n    this.init(graph);\n    //heuristic = heuristic || astar.manhattan;\n\n\n    const openHeap = this.heap();\n\n    openHeap.push(start);\n\n    while (openHeap.size() > 0) {\n\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n      const currentNode = openHeap.pop();\n\n      // End case -- result has been found, return the traced path.\n      if (currentNode === end) {\n        let curr = currentNode;\n        const ret = [];\n        while (curr.parent) {\n          ret.push(curr);\n          curr = curr.parent;\n        }\n        this.cleanUp(ret);\n        return ret.reverse();\n      }\n\n      // Normal case -- move currentNode from open to closed, process each of its neighbours.\n      currentNode.closed = true;\n\n      // Find all neighbours for the current node. Optionally find diagonal neighbours as well (false by default).\n      const neighbours = this.neighbours(graph, currentNode);\n\n      for (let i = 0, il = neighbours.length; i < il; i++) {\n        const neighbour = neighbours[i];\n\n        if (neighbour.closed) {\n          // Not a valid node to process, skip to next neighbour.\n          continue;\n        }\n\n        // The g score is the shortest distance from start to current node.\n        // We need to check if the path we have arrived at this neighbour is the shortest one we have seen yet.\n        const gScore = currentNode.g + neighbour.cost;\n        const beenVisited = neighbour.visited;\n\n        if (!beenVisited || gScore < neighbour.g) {\n\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n          neighbour.visited = true;\n          neighbour.parent = currentNode;\n          if (!neighbour.centroid || !end.centroid) throw new Error('Unexpected state');\n          neighbour.h = neighbour.h || this.heuristic(neighbour.centroid, end.centroid);\n          neighbour.g = gScore;\n          neighbour.f = neighbour.g + neighbour.h;\n\n          if (!beenVisited) {\n            // Pushing to heap will put it in proper place based on the 'f' value.\n            openHeap.push(neighbour);\n          } else {\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\n            openHeap.rescoreElement(neighbour);\n          }\n        }\n      }\n    }\n\n    // No result was found - empty array signifies failure to find path.\n    return [];\n  }\n\n  static heuristic (pos1, pos2) {\n    return Utils.distanceToSquared(pos1, pos2);\n  }\n\n  static neighbours (graph, node) {\n    const ret = [];\n\n    for (let e = 0; e < node.neighbours.length; e++) {\n      ret.push(graph[node.neighbours[e]]);\n    }\n\n    return ret;\n  }\n}\n\nexport { AStar };\n","import {\n  BoxGeometry,\n  SphereGeometry,\n  BufferAttribute,\n  BufferGeometry,\n  Line,\n  LineBasicMaterial,\n  Mesh,\n  MeshBasicMaterial,\n  Object3D,\n  Vector3,\n} from 'three';\n\nconst colors = {\n  PLAYER: 0xEE836F,\n  TARGET: 0xDCCB18,\n  PATH: 0x00A3AF,\n  WAYPOINT: 0x00A3AF,\n  CLAMPED_STEP: 0xDCD3B2,\n  CLOSEST_NODE: 0x43676B,\n};\n\nconst OFFSET = 0.2;\n\n/**\n * Helper for debugging pathfinding behavior.\n */\nclass PathfindingHelper extends Object3D {\n  constructor () {\n    super();\n\n    this._playerMarker = new Mesh(\n      new SphereGeometry( 0.25, 32, 32 ),\n      new MeshBasicMaterial( { color: colors.PLAYER } )\n    );\n\n    this._targetMarker = new Mesh(\n      new BoxGeometry( 0.3, 0.3, 0.3 ),\n      new MeshBasicMaterial( { color: colors.TARGET } )\n    );\n\n\n    this._nodeMarker = new Mesh(\n      new BoxGeometry( 0.1, 0.8, 0.1 ),\n      new MeshBasicMaterial( { color: colors.CLOSEST_NODE } )\n    );\n\n\n    this._stepMarker = new Mesh(\n      new BoxGeometry( 0.1, 1, 0.1 ),\n      new MeshBasicMaterial( { color: colors.CLAMPED_STEP } )\n    );\n\n    this._pathMarker = new Object3D();\n\n    this._pathLineMaterial = new LineBasicMaterial( { color: colors.PATH, linewidth: 2 } ) ;\n    this._pathPointMaterial = new MeshBasicMaterial( { color: colors.WAYPOINT } );\n    this._pathPointGeometry = new SphereGeometry( 0.08 );\n\n    this._markers = [\n      this._playerMarker,\n      this._targetMarker,\n      this._nodeMarker,\n      this._stepMarker,\n      this._pathMarker,\n    ];\n\n    this._markers.forEach( ( marker ) => {\n\n      marker.visible = false;\n\n      this.add( marker );\n\n    } );\n\n  }\n\n  /**\n   * @param {Array<Vector3>} path\n   * @return {this}\n   */\n  setPath ( path ) {\n\n    while ( this._pathMarker.children.length ) {\n\n      this._pathMarker.children[ 0 ].visible = false;\n      this._pathMarker.remove( this._pathMarker.children[ 0 ] );\n\n    }\n\n    path = [ this._playerMarker.position ].concat( path );\n\n    // Draw debug lines\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(new Float32Array(path.length * 3), 3));\n    for (let i = 0; i < path.length; i++) {\n      geometry.attributes.position.setXYZ(i, path[ i ].x, path[ i ].y + OFFSET, path[ i ].z);\n    }\n    this._pathMarker.add( new Line( geometry, this._pathLineMaterial ) );\n\n    for ( let i = 0; i < path.length - 1; i++ ) {\n\n      const node = new Mesh( this._pathPointGeometry, this._pathPointMaterial );\n      node.position.copy( path[ i ] );\n      node.position.y += OFFSET;\n      this._pathMarker.add( node );\n\n    }\n\n    this._pathMarker.visible = true;\n\n    return this;\n\n  }\n\n  /**\n   * @param {Vector3} position\n   * @return {this}\n   */\n  setPlayerPosition( position ) {\n\n    this._playerMarker.position.copy( position );\n    this._playerMarker.visible = true;\n    return this;\n\n  }\n\n  /**\n   * @param {Vector3} position\n   * @return {this}\n   */\n  setTargetPosition( position ) {\n\n    this._targetMarker.position.copy( position );\n    this._targetMarker.visible = true;\n    return this;\n\n  }\n\n  /**\n   * @param {Vector3} position\n   * @return {this}\n   */\n  setNodePosition( position ) {\n\n    this._nodeMarker.position.copy( position );\n    this._nodeMarker.visible = true;\n    return this;\n\n  }\n\n  /**\n   * @param {Vector3} position\n   * @return {this}\n   */\n  setStepPosition( position ) {\n\n    this._stepMarker.position.copy( position );\n    this._stepMarker.visible = true;\n    return this;\n\n  }\n\n  /**\n   * Hides all markers.\n   * @return {this}\n   */\n  reset () {\n\n    while ( this._pathMarker.children.length ) {\n\n      this._pathMarker.children[ 0 ].visible = false;\n      this._pathMarker.remove( this._pathMarker.children[ 0 ] );\n\n    }\n\n    this._markers.forEach( ( marker ) => {\n\n      marker.visible = false;\n\n    } );\n\n    return this;\n\n  }\n\n}\n\nexport { PathfindingHelper };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}