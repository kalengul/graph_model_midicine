{"ast":null,"code":"/**\n * Gamepad controls for A-Frame.\n *\n * Stripped-down version of: https://github.com/donmccurdy/aframe-gamepad-controls\n *\n * For more information about the Gamepad API, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API\n */\n\nconst GamepadButton = require('../../lib/GamepadButton'),\n  GamepadButtonEvent = require('../../lib/GamepadButtonEvent');\nconst JOYSTICK_EPS = 0.2;\nconst Hand = {\n  LEFT: 'left',\n  RIGHT: 'right'\n};\nconst Joystick = {\n  MOVEMENT: 1,\n  ROTATION: 2\n};\nmodule.exports = AFRAME.registerComponent('gamepad-controls', {\n  /*******************************************************************\n   * Statics\n   */\n\n  GamepadButton: GamepadButton,\n  /*******************************************************************\n   * Schema\n   */\n\n  schema: {\n    // Enable/disable gamepad-controls\n    enabled: {\n      default: true\n    },\n    // Rotation sensitivity\n    rotationSensitivity: {\n      default: 2.0\n    }\n  },\n  /*******************************************************************\n   * Core\n   */\n\n  /**\n   * Called once when component is attached. Generally for initial setup.\n   */\n  init: function () {\n    const sceneEl = this.el.sceneEl;\n    this.system = sceneEl.systems['tracked-controls-webxr'] || {\n      controllers: []\n    };\n    this.prevTime = window.performance.now();\n\n    // Button state\n    this.buttons = {};\n\n    // Rotation\n    const rotation = this.el.object3D.rotation;\n    this.pitch = new THREE.Object3D();\n    this.pitch.rotation.x = rotation.x;\n    this.yaw = new THREE.Object3D();\n    this.yaw.position.y = 10;\n    this.yaw.rotation.y = rotation.y;\n    this.yaw.add(this.pitch);\n    this._lookVector = new THREE.Vector2();\n    this._moveVector = new THREE.Vector2();\n    this._dpadVector = new THREE.Vector2();\n    sceneEl.addBehavior(this);\n  },\n  /**\n   * Called when component is attached and when component data changes.\n   * Generally modifies the entity based on the data.\n   */\n  update: function () {\n    this.tick();\n  },\n  /**\n   * Called on each iteration of main render loop.\n   */\n  tick: function (t, dt) {\n    this.updateButtonState();\n    this.updateRotation(dt);\n  },\n  /**\n   * Called when a component is removed (e.g., via removeAttribute).\n   * Generally undoes all modifications to the entity.\n   */\n  remove: function () {},\n  /*******************************************************************\n   * Movement\n   */\n\n  isVelocityActive: function () {\n    if (!this.data.enabled || !this.isConnected()) return false;\n    const dpad = this._dpadVector;\n    const joystick = this._moveVector;\n    this.getDpad(dpad);\n    this.getJoystick(Joystick.MOVEMENT, joystick);\n    const inputX = dpad.x || joystick.x;\n    const inputY = dpad.y || joystick.y;\n    return Math.abs(inputX) > JOYSTICK_EPS || Math.abs(inputY) > JOYSTICK_EPS;\n  },\n  getVelocityDelta: function () {\n    const dpad = this._dpadVector;\n    const joystick = this._moveVector;\n    this.getDpad(dpad);\n    this.getJoystick(Joystick.MOVEMENT, joystick);\n    const inputX = dpad.x || joystick.x;\n    const inputY = dpad.y || joystick.y;\n    const dVelocity = new THREE.Vector3();\n    if (Math.abs(inputX) > JOYSTICK_EPS) {\n      dVelocity.x += inputX;\n    }\n    if (Math.abs(inputY) > JOYSTICK_EPS) {\n      dVelocity.z += inputY;\n    }\n    return dVelocity;\n  },\n  /*******************************************************************\n   * Rotation\n   */\n\n  isRotationActive: function () {\n    if (!this.data.enabled || !this.isConnected()) return false;\n    const joystick = this._lookVector;\n    this.getJoystick(Joystick.ROTATION, joystick);\n    return Math.abs(joystick.x) > JOYSTICK_EPS || Math.abs(joystick.y) > JOYSTICK_EPS;\n  },\n  updateRotation: function (dt) {\n    if (!this.isRotationActive()) return;\n    const data = this.data;\n    const yaw = this.yaw;\n    const pitch = this.pitch;\n\n    // First copy camera rig pitch/yaw, it may have been changed from\n    // another component.\n    yaw.rotation.y = this.el.object3D.rotation.y;\n    pitch.rotation.x = this.el.object3D.rotation.x;\n    const lookVector = this._lookVector;\n    this.getJoystick(Joystick.ROTATION, lookVector);\n    if (Math.abs(lookVector.x) <= JOYSTICK_EPS) lookVector.x = 0;\n    if (Math.abs(lookVector.y) <= JOYSTICK_EPS) lookVector.y = 0;\n    lookVector.multiplyScalar(data.rotationSensitivity * dt / 1000);\n    yaw.rotation.y -= lookVector.x;\n    pitch.rotation.x -= lookVector.y;\n    pitch.rotation.x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, pitch.rotation.x));\n    this.el.object3D.rotation.set(pitch.rotation.x, yaw.rotation.y, 0);\n  },\n  /*******************************************************************\n   * Button events\n   */\n\n  updateButtonState: function () {\n    const gamepad = this.getGamepad(Hand.RIGHT);\n    if (this.data.enabled && gamepad) {\n      // Fire DOM events for button state changes.\n      for (var i = 0; i < gamepad.buttons.length; i++) {\n        if (gamepad.buttons[i].pressed && !this.buttons[i]) {\n          this.emit(new GamepadButtonEvent('gamepadbuttondown', i, gamepad.buttons[i]));\n        } else if (!gamepad.buttons[i].pressed && this.buttons[i]) {\n          this.emit(new GamepadButtonEvent('gamepadbuttonup', i, gamepad.buttons[i]));\n        }\n        this.buttons[i] = gamepad.buttons[i].pressed;\n      }\n    } else if (Object.keys(this.buttons)) {\n      // Reset state if controls are disabled or controller is lost.\n      this.buttons = {};\n    }\n  },\n  emit: function (event) {\n    // Emit original event.\n    this.el.emit(event.type, event);\n\n    // Emit convenience event, identifying button index.\n    this.el.emit(event.type + ':' + event.index, new GamepadButtonEvent(event.type, event.index, event));\n  },\n  /*******************************************************************\n   * Gamepad state\n   */\n\n  /**\n   * Returns the Gamepad instance attached to the component. If connected,\n   * a proxy-controls component may provide access to Gamepad input from a\n   * remote device.\n   *\n   * @param {string} handPreference\n   * @return {Gamepad}\n   */\n  getGamepad: function () {\n    const _xrGamepads = [];\n    const _empty = [];\n    return function (handPreference) {\n      // https://github.com/donmccurdy/aframe-proxy-controls\n      const proxyControls = this.el.sceneEl.components['proxy-controls'];\n      const proxyGamepad = proxyControls && proxyControls.isConnected() && proxyControls.getGamepad(0);\n      if (proxyGamepad) return proxyGamepad;\n\n      // https://www.w3.org/TR/webxr/#dom-xrinputsource-handedness\n      _xrGamepads.length = 0;\n      for (let i = 0; i < this.system.controllers.length; i++) {\n        const xrController = this.system.controllers[i];\n        const xrGamepad = xrController ? xrController.gamepad : null;\n        _xrGamepads.push(xrGamepad);\n        if (xrGamepad && xrController.handedness === handPreference) return xrGamepad;\n      }\n\n      // https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/hand\n      const navGamepads = navigator.getGamepads ? navigator.getGamepads() : _empty;\n      for (let i = 0; i < navGamepads.length; i++) {\n        const navGamepad = navGamepads[i];\n        if (navGamepad && navGamepad.hand === handPreference) return navGamepad;\n      }\n      return _xrGamepads[0] || navGamepads[0];\n    };\n  }(),\n  /**\n   * Returns the state of the given button.\n   * @param  {number} index The button (0-N) for which to find state.\n   * @return {GamepadButton}\n   */\n  getButton: function (index) {\n    return this.getGamepad(Hand.RIGHT).buttons[index];\n  },\n  /**\n   * Returns state of the given axis. Axes are labelled 0-N, where 0-1 will\n   * represent X/Y on the first joystick, and 2-3 X/Y on the second.\n   * @param  {number} index The axis (0-N) for which to find state.\n   * @return {number} On the interval [-1,1].\n   */\n  getAxis: function (index) {\n    return this.getGamepad(index > 1 ? Hand.RIGHT : Hand.LEFT).axes[index];\n  },\n  /**\n   * Returns the state of the specified joystick as a THREE.Vector2.\n   * @param  {Joystick} role\n   * @param  {THREE.Vector2} target\n   * @return {THREE.Vector2}\n   */\n  getJoystick: function (index, target) {\n    const gamepad = this.getGamepad(index === Joystick.MOVEMENT ? Hand.LEFT : Hand.RIGHT);\n    // gamepad can be null here if it becomes disconnected even if isConnected() was called\n    // in the same tick before calling getJoystick.\n    if (!gamepad) {\n      return target.set(0, 0);\n    }\n    if (gamepad.mapping === 'xr-standard') {\n      // See: https://github.com/donmccurdy/aframe-extras/issues/307\n      switch (index) {\n        case Joystick.MOVEMENT:\n          return target.set(gamepad.axes[2], gamepad.axes[3]);\n        case Joystick.ROTATION:\n          return target.set(gamepad.axes[2], 0);\n      }\n    } else {\n      switch (index) {\n        case Joystick.MOVEMENT:\n          return target.set(gamepad.axes[0], gamepad.axes[1]);\n        case Joystick.ROTATION:\n          return target.set(gamepad.axes[2], gamepad.axes[3]);\n      }\n    }\n    throw new Error('Unexpected joystick index \"%d\".', index);\n  },\n  /**\n   * Returns the state of the dpad as a THREE.Vector2.\n   * @param {THREE.Vector2} target\n   * @return {THREE.Vector2}\n   */\n  getDpad: function (target) {\n    const gamepad = this.getGamepad(Hand.LEFT);\n    if (!gamepad) {\n      return target.set(0, 0);\n    }\n    if (!gamepad.buttons[GamepadButton.DPAD_RIGHT]) {\n      return target.set(0, 0);\n    }\n    return target.set((gamepad.buttons[GamepadButton.DPAD_RIGHT].pressed ? 1 : 0) + (gamepad.buttons[GamepadButton.DPAD_LEFT].pressed ? -1 : 0), (gamepad.buttons[GamepadButton.DPAD_UP].pressed ? -1 : 0) + (gamepad.buttons[GamepadButton.DPAD_DOWN].pressed ? 1 : 0));\n  },\n  /**\n   * Returns true if the gamepad is currently connected to the system.\n   * @return {boolean}\n   */\n  isConnected: function () {\n    const gamepad = this.getGamepad(Hand.LEFT);\n    return !!(gamepad && gamepad.connected);\n  },\n  /**\n   * Returns a string containing some information about the controller. Result\n   * may vary across browsers, for a given controller.\n   * @return {string}\n   */\n  getID: function () {\n    return this.getGamepad(Hand.LEFT).id;\n  }\n});","map":{"version":3,"names":["GamepadButton","require","GamepadButtonEvent","JOYSTICK_EPS","Hand","LEFT","RIGHT","Joystick","MOVEMENT","ROTATION","module","exports","AFRAME","registerComponent","schema","enabled","default","rotationSensitivity","init","sceneEl","el","system","systems","controllers","prevTime","window","performance","now","buttons","rotation","object3D","pitch","THREE","Object3D","x","yaw","position","y","add","_lookVector","Vector2","_moveVector","_dpadVector","addBehavior","update","tick","t","dt","updateButtonState","updateRotation","remove","isVelocityActive","data","isConnected","dpad","joystick","getDpad","getJoystick","inputX","inputY","Math","abs","getVelocityDelta","dVelocity","Vector3","z","isRotationActive","lookVector","multiplyScalar","max","PI","min","set","gamepad","getGamepad","i","length","pressed","emit","Object","keys","event","type","index","_xrGamepads","_empty","handPreference","proxyControls","components","proxyGamepad","xrController","xrGamepad","push","handedness","navGamepads","navigator","getGamepads","navGamepad","hand","getButton","getAxis","axes","target","mapping","Error","DPAD_RIGHT","DPAD_LEFT","DPAD_UP","DPAD_DOWN","connected","getID","id"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/view/node_modules/aframe-extras/src/controls/gamepad-controls.js"],"sourcesContent":["/**\n * Gamepad controls for A-Frame.\n *\n * Stripped-down version of: https://github.com/donmccurdy/aframe-gamepad-controls\n *\n * For more information about the Gamepad API, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API\n */\n\nconst GamepadButton = require('../../lib/GamepadButton'),\n    GamepadButtonEvent = require('../../lib/GamepadButtonEvent');\n\nconst JOYSTICK_EPS = 0.2;\n\nconst Hand = {\n  LEFT: 'left',\n  RIGHT: 'right'\n};\n\nconst Joystick = {\n  MOVEMENT: 1,\n  ROTATION: 2\n};\n\nmodule.exports = AFRAME.registerComponent('gamepad-controls', {\n\n  /*******************************************************************\n   * Statics\n   */\n\n  GamepadButton: GamepadButton,\n\n  /*******************************************************************\n   * Schema\n   */\n\n  schema: {\n    // Enable/disable gamepad-controls\n    enabled: { default: true },\n\n    // Rotation sensitivity\n    rotationSensitivity: { default: 2.0 },\n  },\n\n  /*******************************************************************\n   * Core\n   */\n\n  /**\n   * Called once when component is attached. Generally for initial setup.\n   */\n  init: function () {\n    const sceneEl = this.el.sceneEl;\n\n    this.system = sceneEl.systems['tracked-controls-webxr'] || {controllers: []};\n\n    this.prevTime = window.performance.now();\n\n    // Button state\n    this.buttons = {};\n\n    // Rotation\n    const rotation = this.el.object3D.rotation;\n    this.pitch = new THREE.Object3D();\n    this.pitch.rotation.x = rotation.x;\n    this.yaw = new THREE.Object3D();\n    this.yaw.position.y = 10;\n    this.yaw.rotation.y = rotation.y;\n    this.yaw.add(this.pitch);\n\n    this._lookVector = new THREE.Vector2();\n    this._moveVector = new THREE.Vector2();\n    this._dpadVector = new THREE.Vector2();\n\n    sceneEl.addBehavior(this);\n  },\n\n  /**\n   * Called when component is attached and when component data changes.\n   * Generally modifies the entity based on the data.\n   */\n  update: function () { this.tick(); },\n\n  /**\n   * Called on each iteration of main render loop.\n   */\n  tick: function (t, dt) {\n    this.updateButtonState();\n    this.updateRotation(dt);\n  },\n\n  /**\n   * Called when a component is removed (e.g., via removeAttribute).\n   * Generally undoes all modifications to the entity.\n   */\n  remove: function () { },\n\n  /*******************************************************************\n   * Movement\n   */\n\n  isVelocityActive: function () {\n    if (!this.data.enabled || !this.isConnected()) return false;\n\n    const dpad = this._dpadVector;\n    const joystick = this._moveVector;\n\n    this.getDpad(dpad);\n    this.getJoystick(Joystick.MOVEMENT, joystick);\n\n    const inputX = dpad.x || joystick.x;\n    const inputY = dpad.y || joystick.y;\n\n    return Math.abs(inputX) > JOYSTICK_EPS || Math.abs(inputY) > JOYSTICK_EPS;\n  },\n\n  getVelocityDelta: function () {\n    const dpad = this._dpadVector;\n    const joystick = this._moveVector;\n\n    this.getDpad(dpad);\n    this.getJoystick(Joystick.MOVEMENT, joystick);\n\n    const inputX = dpad.x || joystick.x;\n    const inputY = dpad.y || joystick.y;\n    const dVelocity = new THREE.Vector3();\n\n    if (Math.abs(inputX) > JOYSTICK_EPS) {\n      dVelocity.x += inputX;\n    }\n    if (Math.abs(inputY) > JOYSTICK_EPS) {\n      dVelocity.z += inputY;\n    }\n\n    return dVelocity;\n  },\n\n  /*******************************************************************\n   * Rotation\n   */\n\n  isRotationActive: function () {\n    if (!this.data.enabled || !this.isConnected()) return false;\n\n    const joystick = this._lookVector;\n\n    this.getJoystick(Joystick.ROTATION, joystick);\n\n    return Math.abs(joystick.x) > JOYSTICK_EPS || Math.abs(joystick.y) > JOYSTICK_EPS;\n  },\n\n  updateRotation: function (dt) {\n    if (!this.isRotationActive()) return;\n\n    const data = this.data;\n    const yaw = this.yaw;\n    const pitch = this.pitch;\n\n    // First copy camera rig pitch/yaw, it may have been changed from\n    // another component.\n    yaw.rotation.y = this.el.object3D.rotation.y;\n    pitch.rotation.x = this.el.object3D.rotation.x;\n\n    const lookVector = this._lookVector;\n\n    this.getJoystick(Joystick.ROTATION, lookVector);\n\n    if (Math.abs(lookVector.x) <= JOYSTICK_EPS) lookVector.x = 0;\n    if (Math.abs(lookVector.y) <= JOYSTICK_EPS) lookVector.y = 0;\n\n    lookVector.multiplyScalar(data.rotationSensitivity * dt / 1000);\n    yaw.rotation.y -= lookVector.x;\n    pitch.rotation.x -= lookVector.y;\n    pitch.rotation.x = Math.max(- Math.PI / 2, Math.min(Math.PI / 2, pitch.rotation.x));\n    this.el.object3D.rotation.set(pitch.rotation.x, yaw.rotation.y, 0);\n  },\n\n  /*******************************************************************\n   * Button events\n   */\n\n  updateButtonState: function () {\n    const gamepad = this.getGamepad(Hand.RIGHT);\n    if (this.data.enabled && gamepad) {\n\n      // Fire DOM events for button state changes.\n      for (var i = 0; i < gamepad.buttons.length; i++) {\n        if (gamepad.buttons[i].pressed && !this.buttons[i]) {\n          this.emit(new GamepadButtonEvent('gamepadbuttondown', i, gamepad.buttons[i]));\n        } else if (!gamepad.buttons[i].pressed && this.buttons[i]) {\n          this.emit(new GamepadButtonEvent('gamepadbuttonup', i, gamepad.buttons[i]));\n        }\n        this.buttons[i] = gamepad.buttons[i].pressed;\n      }\n\n    } else if (Object.keys(this.buttons)) {\n      // Reset state if controls are disabled or controller is lost.\n      this.buttons = {};\n    }\n  },\n\n  emit: function (event) {\n    // Emit original event.\n    this.el.emit(event.type, event);\n\n    // Emit convenience event, identifying button index.\n    this.el.emit(\n      event.type + ':' + event.index,\n      new GamepadButtonEvent(event.type, event.index, event)\n    );\n  },\n\n  /*******************************************************************\n   * Gamepad state\n   */\n\n  /**\n   * Returns the Gamepad instance attached to the component. If connected,\n   * a proxy-controls component may provide access to Gamepad input from a\n   * remote device.\n   *\n   * @param {string} handPreference\n   * @return {Gamepad}\n   */\n  getGamepad: (function () {\n    const _xrGamepads = [];\n    const _empty = [];\n\n    return function (handPreference) {\n      // https://github.com/donmccurdy/aframe-proxy-controls\n      const proxyControls = this.el.sceneEl.components['proxy-controls'];\n      const proxyGamepad = proxyControls && proxyControls.isConnected()\n        && proxyControls.getGamepad(0);\n      if (proxyGamepad) return proxyGamepad;\n\n      // https://www.w3.org/TR/webxr/#dom-xrinputsource-handedness\n      _xrGamepads.length = 0;\n      for (let i = 0; i < this.system.controllers.length; i++) {\n        const xrController = this.system.controllers[i];\n        const xrGamepad = xrController ? xrController.gamepad : null;\n        _xrGamepads.push(xrGamepad);\n        if (xrGamepad && xrController.handedness === handPreference) return xrGamepad;\n      }\n\n      // https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/hand\n      const navGamepads = navigator.getGamepads ? navigator.getGamepads() : _empty;\n      for (let i = 0; i < navGamepads.length; i++) {\n        const navGamepad = navGamepads[i];\n        if (navGamepad && navGamepad.hand === handPreference) return navGamepad;\n      }\n\n      return _xrGamepads[0] || navGamepads[0];\n    };\n  })(),\n\n  /**\n   * Returns the state of the given button.\n   * @param  {number} index The button (0-N) for which to find state.\n   * @return {GamepadButton}\n   */\n  getButton: function (index) {\n    return this.getGamepad(Hand.RIGHT).buttons[index];\n  },\n\n  /**\n   * Returns state of the given axis. Axes are labelled 0-N, where 0-1 will\n   * represent X/Y on the first joystick, and 2-3 X/Y on the second.\n   * @param  {number} index The axis (0-N) for which to find state.\n   * @return {number} On the interval [-1,1].\n   */\n  getAxis: function (index) {\n    return this.getGamepad(index > 1 ? Hand.RIGHT : Hand.LEFT).axes[index];\n  },\n\n  /**\n   * Returns the state of the specified joystick as a THREE.Vector2.\n   * @param  {Joystick} role\n   * @param  {THREE.Vector2} target\n   * @return {THREE.Vector2}\n   */\n  getJoystick: function (index, target) {\n    const gamepad = this.getGamepad(index === Joystick.MOVEMENT ? Hand.LEFT : Hand.RIGHT);\n    // gamepad can be null here if it becomes disconnected even if isConnected() was called\n    // in the same tick before calling getJoystick.\n    if (!gamepad) {\n      return target.set(0, 0);\n    }\n    if (gamepad.mapping === 'xr-standard') {\n      // See: https://github.com/donmccurdy/aframe-extras/issues/307\n      switch (index) {\n        case Joystick.MOVEMENT: return target.set(gamepad.axes[2], gamepad.axes[3]);\n        case Joystick.ROTATION: return target.set(gamepad.axes[2], 0);\n      }\n    } else {\n      switch (index) {\n        case Joystick.MOVEMENT: return target.set(gamepad.axes[0], gamepad.axes[1]);\n        case Joystick.ROTATION: return target.set(gamepad.axes[2], gamepad.axes[3]);\n      }\n    }\n    throw new Error('Unexpected joystick index \"%d\".', index);\n  },\n\n  /**\n   * Returns the state of the dpad as a THREE.Vector2.\n   * @param {THREE.Vector2} target\n   * @return {THREE.Vector2}\n   */\n  getDpad: function (target) {\n    const gamepad = this.getGamepad(Hand.LEFT);\n    if (!gamepad) {\n      return target.set(0, 0);\n    }\n    if (!gamepad.buttons[GamepadButton.DPAD_RIGHT]) {\n      return target.set(0, 0);\n    }\n    return target.set(\n      (gamepad.buttons[GamepadButton.DPAD_RIGHT].pressed ? 1 : 0)\n      + (gamepad.buttons[GamepadButton.DPAD_LEFT].pressed ? -1 : 0),\n      (gamepad.buttons[GamepadButton.DPAD_UP].pressed ? -1 : 0)\n      + (gamepad.buttons[GamepadButton.DPAD_DOWN].pressed ? 1 : 0)\n    );\n  },\n\n  /**\n   * Returns true if the gamepad is currently connected to the system.\n   * @return {boolean}\n   */\n  isConnected: function () {\n    const gamepad = this.getGamepad(Hand.LEFT);\n    return !!(gamepad && gamepad.connected);\n  },\n\n  /**\n   * Returns a string containing some information about the controller. Result\n   * may vary across browsers, for a given controller.\n   * @return {string}\n   */\n  getID: function () {\n    return this.getGamepad(Hand.LEFT).id;\n  }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}