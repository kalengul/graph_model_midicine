{"ast":null,"code":"/**\n * @param  {Array<THREE.Material>|THREE.Material} material\n * @return {Array<THREE.Material>}\n */\nfunction ensureMaterialArray(material) {\n  if (!material) {\n    return [];\n  } else if (Array.isArray(material)) {\n    return material;\n  } else if (material.materials) {\n    return material.materials;\n  } else {\n    return [material];\n  }\n}\n\n/**\n * @param  {THREE.Object3D} mesh\n * @param  {Array<string>} materialNames\n * @param  {THREE.Texture} envMap\n * @param  {number} reflectivity  [description]\n */\nfunction applyEnvMap(mesh, materialNames, envMap, reflectivity) {\n  if (!mesh) return;\n  materialNames = materialNames || [];\n  mesh.traverse(node => {\n    if (!node.isMesh) return;\n    const meshMaterials = ensureMaterialArray(node.material);\n    meshMaterials.forEach(material => {\n      if (material && !('envMap' in material)) return;\n      if (materialNames.length && materialNames.indexOf(material.name) === -1) return;\n      material.envMap = envMap;\n      material.reflectivity = reflectivity;\n      material.needsUpdate = true;\n    });\n  });\n}\n\n/**\n * Specifies an envMap on an entity, without replacing any existing material\n * properties.\n */\nmodule.exports = AFRAME.registerComponent('cube-env-map', {\n  multiple: true,\n  schema: {\n    path: {\n      default: ''\n    },\n    extension: {\n      default: 'jpg',\n      oneOf: ['jpg', 'png']\n    },\n    enableBackground: {\n      default: false\n    },\n    reflectivity: {\n      default: 1,\n      min: 0,\n      max: 1\n    },\n    materials: {\n      default: []\n    }\n  },\n  init: function () {\n    const data = this.data;\n    this.texture = new THREE.CubeTextureLoader().load([data.path + 'posx.' + data.extension, data.path + 'negx.' + data.extension, data.path + 'posy.' + data.extension, data.path + 'negy.' + data.extension, data.path + 'posz.' + data.extension, data.path + 'negz.' + data.extension]);\n    this.texture.format = THREE.RGBAFormat;\n    this.object3dsetHandler = () => {\n      const mesh = this.el.getObject3D('mesh');\n      const data = this.data;\n      applyEnvMap(mesh, data.materials, this.texture, data.reflectivity);\n    };\n    this.object3dsetHandler();\n    this.el.addEventListener('object3dset', this.object3dsetHandler);\n  },\n  update: function (oldData) {\n    const data = this.data;\n    const mesh = this.el.getObject3D('mesh');\n    let addedMaterialNames = [];\n    let removedMaterialNames = [];\n    if (data.materials.length) {\n      if (oldData.materials) {\n        addedMaterialNames = data.materials.filter(name => !oldData.materials.includes(name));\n        removedMaterialNames = oldData.materials.filter(name => !data.materials.includes(name));\n      } else {\n        addedMaterialNames = data.materials;\n      }\n    }\n    if (addedMaterialNames.length) {\n      applyEnvMap(mesh, addedMaterialNames, this.texture, data.reflectivity);\n    }\n    if (removedMaterialNames.length) {\n      applyEnvMap(mesh, removedMaterialNames, null, 1);\n    }\n    if (oldData.materials && data.reflectivity !== oldData.reflectivity) {\n      const maintainedMaterialNames = data.materials.filter(name => oldData.materials.includes(name));\n      if (maintainedMaterialNames.length) {\n        applyEnvMap(mesh, maintainedMaterialNames, this.texture, data.reflectivity);\n      }\n    }\n    if (this.data.enableBackground && !oldData.enableBackground) {\n      this.setBackground(this.texture);\n    } else if (!this.data.enableBackground && oldData.enableBackground) {\n      this.setBackground(null);\n    }\n  },\n  remove: function () {\n    this.el.removeEventListener('object3dset', this.object3dsetHandler);\n    const mesh = this.el.getObject3D('mesh');\n    const data = this.data;\n    applyEnvMap(mesh, data.materials, null, 1);\n    if (data.enableBackground) this.setBackground(null);\n  },\n  setBackground: function (texture) {\n    this.el.sceneEl.object3D.background = texture;\n  }\n});","map":{"version":3,"names":["ensureMaterialArray","material","Array","isArray","materials","applyEnvMap","mesh","materialNames","envMap","reflectivity","traverse","node","isMesh","meshMaterials","forEach","length","indexOf","name","needsUpdate","module","exports","AFRAME","registerComponent","multiple","schema","path","default","extension","oneOf","enableBackground","min","max","init","data","texture","THREE","CubeTextureLoader","load","format","RGBAFormat","object3dsetHandler","el","getObject3D","addEventListener","update","oldData","addedMaterialNames","removedMaterialNames","filter","includes","maintainedMaterialNames","setBackground","remove","removeEventListener","sceneEl","object3D","background"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/view/node_modules/aframe-extras/src/misc/cube-env-map.js"],"sourcesContent":["/**\n * @param  {Array<THREE.Material>|THREE.Material} material\n * @return {Array<THREE.Material>}\n */\nfunction ensureMaterialArray (material) {\n  if (!material) {\n    return [];\n  } else if (Array.isArray(material)) {\n    return material;\n  } else if (material.materials) {\n    return material.materials;\n  } else {\n    return [material];\n  }\n}\n\n/**\n * @param  {THREE.Object3D} mesh\n * @param  {Array<string>} materialNames\n * @param  {THREE.Texture} envMap\n * @param  {number} reflectivity  [description]\n */\nfunction applyEnvMap (mesh, materialNames, envMap, reflectivity) {\n  if (!mesh) return;\n\n  materialNames = materialNames || [];\n\n  mesh.traverse((node) => {\n\n    if (!node.isMesh) return;\n\n    const meshMaterials = ensureMaterialArray(node.material);\n\n    meshMaterials.forEach((material) => {\n\n      if (material && !('envMap' in material)) return;\n      if (materialNames.length && materialNames.indexOf(material.name) === -1) return;\n\n      material.envMap = envMap;\n      material.reflectivity = reflectivity;\n      material.needsUpdate = true;\n\n    });\n\n  });\n}\n\n/**\n * Specifies an envMap on an entity, without replacing any existing material\n * properties.\n */\nmodule.exports = AFRAME.registerComponent('cube-env-map', {\n  multiple: true,\n\n  schema: {\n    path: {default: ''},\n    extension: {default: 'jpg', oneOf: ['jpg', 'png']},\n    enableBackground: {default: false},\n    reflectivity: {default: 1, min: 0, max: 1},\n    materials: {default: []}\n  },\n\n  init: function () {\n    const data = this.data;\n\n    this.texture = new THREE.CubeTextureLoader().load([\n      data.path + 'posx.' + data.extension, data.path + 'negx.' + data.extension,\n      data.path + 'posy.' + data.extension, data.path + 'negy.' + data.extension,\n      data.path + 'posz.' + data.extension, data.path + 'negz.' + data.extension\n    ]);\n    this.texture.format = THREE.RGBAFormat;\n\n    this.object3dsetHandler = () => {\n      const mesh = this.el.getObject3D('mesh');\n      const data = this.data;\n      applyEnvMap(mesh, data.materials, this.texture, data.reflectivity);\n    };\n\n    this.object3dsetHandler();\n    this.el.addEventListener('object3dset', this.object3dsetHandler);\n    \n  },\n\n  update: function (oldData) {\n    const data = this.data;\n    const mesh = this.el.getObject3D('mesh');\n\n    let addedMaterialNames = [];\n    let removedMaterialNames = [];\n\n    if (data.materials.length) {\n      if (oldData.materials) {\n        addedMaterialNames = data.materials.filter((name) => !oldData.materials.includes(name));\n        removedMaterialNames = oldData.materials.filter((name) => !data.materials.includes(name));\n      } else {\n        addedMaterialNames = data.materials;\n      }\n    }\n    if (addedMaterialNames.length) {\n      applyEnvMap(mesh, addedMaterialNames, this.texture, data.reflectivity);\n    }\n    if (removedMaterialNames.length) {\n      applyEnvMap(mesh, removedMaterialNames, null, 1);\n    }\n\n    if (oldData.materials && data.reflectivity !== oldData.reflectivity) {\n      const maintainedMaterialNames = data.materials\n        .filter((name) => oldData.materials.includes(name));\n      if (maintainedMaterialNames.length) {\n        applyEnvMap(mesh, maintainedMaterialNames, this.texture, data.reflectivity);\n      }\n    }\n\n    if (this.data.enableBackground && !oldData.enableBackground) {\n      this.setBackground(this.texture);\n    } else if (!this.data.enableBackground && oldData.enableBackground) {\n      this.setBackground(null);\n    }\n  },\n\n  remove: function () {\n    this.el.removeEventListener('object3dset', this.object3dsetHandler);\n    const mesh = this.el.getObject3D('mesh');\n    const data = this.data;\n\n    applyEnvMap(mesh, data.materials, null, 1);\n    if (data.enableBackground) this.setBackground(null);\n  },\n\n  setBackground: function (texture) {\n    this.el.sceneEl.object3D.background = texture;\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}