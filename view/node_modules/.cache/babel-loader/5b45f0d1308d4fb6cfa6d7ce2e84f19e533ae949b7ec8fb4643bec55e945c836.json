{"ast":null,"code":"var _jsxFileName = \"C:\\\\UsersFolders\\\\Polina\\\\\\u0420\\u042D\\u0423\\\\Graph\\\\graph_model_midicine\\\\view\\\\src\\\\components\\\\graph\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport * as d3 from \"d3\";\nimport { Data } from \"./graph_data.js\";\nimport { DataParser } from './DataParser.js';\nimport './graph.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst myData2 = {\n  \"nodes\": [{\n    \"id\": \"id1\",\n    \"name\": \"name1\",\n    \"val\": 1,\n    \"color\": \"#D9EDFF\"\n  }, {\n    \"id\": \"id2\",\n    \"name\": \"name2\",\n    \"val\": 10,\n    \"color\": \"#B3CFE9\"\n  }, {\n    \"id\": \"id3\",\n    \"name\": \"name3\",\n    \"val\": 1,\n    \"color\": \"#D9EDFF\"\n  }],\n  \"links\": [{\n    \"source\": \"id1\",\n    \"target\": \"id2\"\n  }, {\n    \"source\": \"id2\",\n    \"target\": \"id3\"\n  }]\n};\nconst myData = Data;\nexport const GraphView = () => {\n  _s();\n  const graphRef = useRef(null);\n  const forceRef = useRef();\n  const [MyData, setMyData] = useState();\n  useEffect(() => {\n    const dataParser = new DataParser(Data);\n    let newData = dataParser.Parse();\n    setMyData(newData);\n\n    // forceRef.current.d3Force(\"collide\", d3.forceCollide(13));\n    forceRef.current.d3Force(\"charge\").strength(-5);\n    forceRef.current.d3Force(\"link\").distance(7);\n    forceRef.current.d3Force(\"charge\").distanceMax(50);\n  }, []);\n\n  //Отображение узлов\n  const CanvasHandler = (node, ctx, globalScale) => {\n    const label = node.name; //Подпись узла\n    const fontSize = node.cluster.isRoot ? 14 * (node.val / 250) : 14 / (globalScale * 1.2); //9\n\n    ctx.font = `${fontSize}px Sans-Serif`;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillStyle = 'black'; //node.isClusterNode ? \"white\" : \"black\"; //Если корень, то цвет белый иначе черный\n\n    //отображение текста в зависимости от его типа (кластер или нет)\n    if (node.cluster.isRoot) {\n      const lineHeight = fontSize * 1.2;\n      const lines = label.split(\" \");\n      let x = node.x;\n      let y = node.y - lineHeight;\n      for (let i = 0; i < lines.length; ++i) {\n        ctx.fillText(lines[i], x, y);\n        y += lineHeight;\n      }\n    } else {\n      ctx.fillText(label, node.x, node.y);\n    }\n  };\n\n  //Наведение на узел графа\n  const HoverHandler = () => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Graphcontainer flex jc-center\",\n    ref: graphRef,\n    children: /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n      ref: forceRef,\n      graphData: MyData,\n      width: 1105,\n      height: 500,\n      nodeRelSize: 1,\n      nodeCanvasObjectMode: () => \"after\" //Сначала отрсовка узла по умолчанию, затем применение nodeCanvasObject для его доработки\n      ,\n      nodeCanvasObject: CanvasHandler\n\n      //enableNodeDrag={false} //Можно двигать узлы мышкой или нет\n\n      //Видимость узлов\n      // nodeVisibility={(node) => {\n      //     if (collapsedClusters.includes(node.clusterId)) {\n      //       return false;\n      //     } else return true;\n      // }}\n      ,\n\n      onNodeHover: HoverHandler //Навередение на узел\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n_s(GraphView, \"ehFNnPdnHPvYckQG8WUqQPBmnz8=\");\n_c = GraphView;\nvar _c;\n$RefreshReg$(_c, \"GraphView\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ForceGraph2D","d3","Data","DataParser","jsxDEV","_jsxDEV","myData2","myData","GraphView","_s","graphRef","forceRef","MyData","setMyData","dataParser","newData","Parse","current","d3Force","strength","distance","distanceMax","CanvasHandler","node","ctx","globalScale","label","name","fontSize","cluster","isRoot","val","font","textAlign","textBaseline","fillStyle","lineHeight","lines","split","x","y","i","length","fillText","HoverHandler","className","ref","children","graphData","width","height","nodeRelSize","nodeCanvasObjectMode","nodeCanvasObject","onNodeHover","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/graph_model_midicine/view/src/components/graph/graph.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport ForceGraph2D from \"react-force-graph-2d\";\r\nimport * as d3 from \"d3\";\r\n\r\nimport {Data} from \"./graph_data.js\"\r\nimport { DataParser } from './DataParser.js';\r\n\r\nimport './graph.css'\r\n\r\nconst myData2 = {\r\n    \"nodes\": [ \r\n        { \r\n          \"id\": \"id1\",\r\n          \"name\": \"name1\",\r\n          \"val\": 1,\r\n          \"color\": \"#D9EDFF\"\r\n        },\r\n        { \r\n          \"id\": \"id2\",\r\n          \"name\": \"name2\",\r\n          \"val\": 10,\r\n          \"color\": \"#B3CFE9\" \r\n        },\r\n        { \r\n            \"id\": \"id3\",\r\n            \"name\": \"name3\",\r\n            \"val\": 1,\r\n            \"color\": \"#D9EDFF\" \r\n        },\r\n    ],\r\n    \"links\": [\r\n        {\r\n            \"source\": \"id1\",\r\n            \"target\": \"id2\"\r\n        },\r\n        {\r\n            \"source\": \"id2\",\r\n            \"target\": \"id3\"\r\n        },\r\n    ]\r\n}\r\n\r\nconst myData = Data\r\n\r\nexport const GraphView =() =>{\r\n    const graphRef = useRef(null);\r\n    const forceRef = useRef();\r\n\r\n    const [MyData, setMyData] = useState()\r\n\r\n    useEffect(() => {\r\n        const dataParser = new DataParser(Data)\r\n        let newData = dataParser.Parse()\r\n\r\n        setMyData(newData)\r\n\r\n        // forceRef.current.d3Force(\"collide\", d3.forceCollide(13));\r\n        forceRef.current.d3Force(\"charge\").strength(-5);\r\n        forceRef.current.d3Force(\"link\").distance(7);\r\n        forceRef.current.d3Force(\"charge\").distanceMax(50);\r\n      }, []);\r\n\r\n\r\n    //Отображение узлов\r\n    const CanvasHandler = (node, ctx, globalScale) => {\r\n\r\n        const label = node.name; //Подпись узла\r\n        const fontSize = node.cluster.isRoot ? 14 * (node.val / 250): 14 / (globalScale * 1.2);//9\r\n\r\n        ctx.font = `${fontSize}px Sans-Serif`;\r\n        ctx.textAlign = \"center\";\r\n        ctx.textBaseline = \"middle\";\r\n        ctx.fillStyle = 'black'//node.isClusterNode ? \"white\" : \"black\"; //Если корень, то цвет белый иначе черный\r\n\r\n\r\n        //отображение текста в зависимости от его типа (кластер или нет)\r\n        if(node.cluster.isRoot){\r\n              const lineHeight = fontSize * 1.2;\r\n              const lines = label.split(\" \");\r\n              let x = node.x;\r\n              let y = node.y - lineHeight;\r\n             for (let i = 0; i < lines.length; ++i) {\r\n                      ctx.fillText(lines[i], x, y);\r\n                      y += lineHeight;\r\n             }\r\n        } else {\r\n            ctx.fillText(label, node.x, node.y);\r\n        }\r\n\r\n      }\r\n\r\n    //Наведение на узел графа\r\n    const HoverHandler = () =>{\r\n\r\n    }\r\n    \r\n    \r\n    return(\r\n        <div className='Graphcontainer flex jc-center' ref={graphRef}>\r\n            <ForceGraph2D\r\n                ref={forceRef}\r\n                graphData={MyData}\r\n\r\n                width={1105}\r\n                height={500}\r\n\r\n                nodeRelSize={1}\r\n                \r\n                nodeCanvasObjectMode={() => \"after\"} //Сначала отрсовка узла по умолчанию, затем применение nodeCanvasObject для его доработки\r\n                nodeCanvasObject={CanvasHandler}\r\n                \r\n                //enableNodeDrag={false} //Можно двигать узлы мышкой или нет\r\n\r\n                //Видимость узлов\r\n                // nodeVisibility={(node) => {\r\n                //     if (collapsedClusters.includes(node.clusterId)) {\r\n                //       return false;\r\n                //     } else return true;\r\n                // }}\r\n\r\n                onNodeHover = {HoverHandler} //Навередение на узел\r\n            />\r\n        </div>\r\n    )\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}