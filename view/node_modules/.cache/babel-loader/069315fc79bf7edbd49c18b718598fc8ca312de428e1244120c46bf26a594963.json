{"ast":null,"code":"module.exports = createLayout;\nmodule.exports.simulator = require('./lib/createPhysicsSimulator');\nvar eventify = require('ngraph.events');\n\n/**\n * Creates force based layout for a given graph.\n *\n * @param {ngraph.graph} graph which needs to be laid out\n * @param {object} physicsSettings if you need custom settings\n * for physics simulator you can pass your own settings here. If it's not passed\n * a default one will be created.\n */\nfunction createLayout(graph, physicsSettings) {\n  if (!graph) {\n    throw new Error('Graph structure cannot be undefined');\n  }\n  var createSimulator = physicsSettings && physicsSettings.createSimulator || require('./lib/createPhysicsSimulator');\n  var physicsSimulator = createSimulator(physicsSettings);\n  if (Array.isArray(physicsSettings)) throw new Error('Physics settings is expected to be an object');\n  var nodeMass = graph.version > 19 ? defaultSetNodeMass : defaultArrayNodeMass;\n  if (physicsSettings && typeof physicsSettings.nodeMass === 'function') {\n    nodeMass = physicsSettings.nodeMass;\n  }\n  var nodeBodies = new Map();\n  var springs = {};\n  var bodiesCount = 0;\n  var springTransform = physicsSimulator.settings.springTransform || noop;\n\n  // Initialize physics with what we have in the graph:\n  initPhysics();\n  listenToEvents();\n  var wasStable = false;\n  var api = {\n    /**\n     * Performs one step of iterative layout algorithm\n     *\n     * @returns {boolean} true if the system should be considered stable; False otherwise.\n     * The system is stable if no further call to `step()` can improve the layout.\n     */\n    step: function () {\n      if (bodiesCount === 0) {\n        updateStableStatus(true);\n        return true;\n      }\n      var lastMove = physicsSimulator.step();\n\n      // Save the movement in case if someone wants to query it in the step\n      // callback.\n      api.lastMove = lastMove;\n\n      // Allow listeners to perform low-level actions after nodes are updated.\n      api.fire('step');\n      var ratio = lastMove / bodiesCount;\n      var isStableNow = ratio <= 0.01; // TODO: The number is somewhat arbitrary...\n      updateStableStatus(isStableNow);\n      return isStableNow;\n    },\n    /**\n     * For a given `nodeId` returns position\n     */\n    getNodePosition: function (nodeId) {\n      return getInitializedBody(nodeId).pos;\n    },\n    /**\n     * Sets position of a node to a given coordinates\n     * @param {string} nodeId node identifier\n     * @param {number} x position of a node\n     * @param {number} y position of a node\n     * @param {number=} z position of node (only if applicable to body)\n     */\n    setNodePosition: function (nodeId) {\n      var body = getInitializedBody(nodeId);\n      body.setPosition.apply(body, Array.prototype.slice.call(arguments, 1));\n    },\n    /**\n     * @returns {Object} Link position by link id\n     * @returns {Object.from} {x, y} coordinates of link start\n     * @returns {Object.to} {x, y} coordinates of link end\n     */\n    getLinkPosition: function (linkId) {\n      var spring = springs[linkId];\n      if (spring) {\n        return {\n          from: spring.from.pos,\n          to: spring.to.pos\n        };\n      }\n    },\n    /**\n     * @returns {Object} area required to fit in the graph. Object contains\n     * `x1`, `y1` - top left coordinates\n     * `x2`, `y2` - bottom right coordinates\n     */\n    getGraphRect: function () {\n      return physicsSimulator.getBBox();\n    },\n    /**\n     * Iterates over each body in the layout simulator and performs a callback(body, nodeId)\n     */\n    forEachBody: forEachBody,\n    /*\n     * Requests layout algorithm to pin/unpin node to its current position\n     * Pinned nodes should not be affected by layout algorithm and always\n     * remain at their position\n     */\n    pinNode: function (node, isPinned) {\n      var body = getInitializedBody(node.id);\n      body.isPinned = !!isPinned;\n    },\n    /**\n     * Checks whether given graph's node is currently pinned\n     */\n    isNodePinned: function (node) {\n      return getInitializedBody(node.id).isPinned;\n    },\n    /**\n     * Request to release all resources\n     */\n    dispose: function () {\n      graph.off('changed', onGraphChanged);\n      api.fire('disposed');\n    },\n    /**\n     * Gets physical body for a given node id. If node is not found undefined\n     * value is returned.\n     */\n    getBody: getBody,\n    /**\n     * Gets spring for a given edge.\n     *\n     * @param {string} linkId link identifer. If two arguments are passed then\n     * this argument is treated as formNodeId\n     * @param {string=} toId when defined this parameter denotes head of the link\n     * and first argument is treated as tail of the link (fromId)\n     */\n    getSpring: getSpring,\n    /**\n     * Returns length of cumulative force vector. The closer this to zero - the more stable the system is\n     */\n    getForceVectorLength: getForceVectorLength,\n    /**\n     * [Read only] Gets current physics simulator\n     */\n    simulator: physicsSimulator,\n    /**\n     * Gets the graph that was used for layout\n     */\n    graph: graph,\n    /**\n     * Gets amount of movement performed during last step operation\n     */\n    lastMove: 0\n  };\n  eventify(api);\n  return api;\n  function updateStableStatus(isStableNow) {\n    if (wasStable !== isStableNow) {\n      wasStable = isStableNow;\n      onStableChanged(isStableNow);\n    }\n  }\n  function forEachBody(cb) {\n    nodeBodies.forEach(cb);\n  }\n  function getForceVectorLength() {\n    var fx = 0,\n      fy = 0;\n    forEachBody(function (body) {\n      fx += Math.abs(body.force.x);\n      fy += Math.abs(body.force.y);\n    });\n    return Math.sqrt(fx * fx + fy * fy);\n  }\n  function getSpring(fromId, toId) {\n    var linkId;\n    if (toId === undefined) {\n      if (typeof fromId !== 'object') {\n        // assume fromId as a linkId:\n        linkId = fromId;\n      } else {\n        // assume fromId to be a link object:\n        linkId = fromId.id;\n      }\n    } else {\n      // toId is defined, should grab link:\n      var link = graph.hasLink(fromId, toId);\n      if (!link) return;\n      linkId = link.id;\n    }\n    return springs[linkId];\n  }\n  function getBody(nodeId) {\n    return nodeBodies.get(nodeId);\n  }\n  function listenToEvents() {\n    graph.on('changed', onGraphChanged);\n  }\n  function onStableChanged(isStable) {\n    api.fire('stable', isStable);\n  }\n  function onGraphChanged(changes) {\n    for (var i = 0; i < changes.length; ++i) {\n      var change = changes[i];\n      if (change.changeType === 'add') {\n        if (change.node) {\n          initBody(change.node.id);\n        }\n        if (change.link) {\n          initLink(change.link);\n        }\n      } else if (change.changeType === 'remove') {\n        if (change.node) {\n          releaseNode(change.node);\n        }\n        if (change.link) {\n          releaseLink(change.link);\n        }\n      }\n    }\n    bodiesCount = graph.getNodesCount();\n  }\n  function initPhysics() {\n    bodiesCount = 0;\n    graph.forEachNode(function (node) {\n      initBody(node.id);\n      bodiesCount += 1;\n    });\n    graph.forEachLink(initLink);\n  }\n  function initBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    if (!body) {\n      var node = graph.getNode(nodeId);\n      if (!node) {\n        throw new Error('initBody() was called with unknown node id');\n      }\n      var pos = node.position;\n      if (!pos) {\n        var neighbors = getNeighborBodies(node);\n        pos = physicsSimulator.getBestNewBodyPosition(neighbors);\n      }\n      body = physicsSimulator.addBodyAt(pos);\n      body.id = nodeId;\n      nodeBodies.set(nodeId, body);\n      updateBodyMass(nodeId);\n      if (isNodeOriginallyPinned(node)) {\n        body.isPinned = true;\n      }\n    }\n  }\n  function releaseNode(node) {\n    var nodeId = node.id;\n    var body = nodeBodies.get(nodeId);\n    if (body) {\n      nodeBodies.delete(nodeId);\n      physicsSimulator.removeBody(body);\n    }\n  }\n  function initLink(link) {\n    updateBodyMass(link.fromId);\n    updateBodyMass(link.toId);\n    var fromBody = nodeBodies.get(link.fromId),\n      toBody = nodeBodies.get(link.toId),\n      spring = physicsSimulator.addSpring(fromBody, toBody, link.length);\n    springTransform(link, spring);\n    springs[link.id] = spring;\n  }\n  function releaseLink(link) {\n    var spring = springs[link.id];\n    if (spring) {\n      var from = graph.getNode(link.fromId),\n        to = graph.getNode(link.toId);\n      if (from) updateBodyMass(from.id);\n      if (to) updateBodyMass(to.id);\n      delete springs[link.id];\n      physicsSimulator.removeSpring(spring);\n    }\n  }\n  function getNeighborBodies(node) {\n    // TODO: Could probably be done better on memory\n    var neighbors = [];\n    if (!node.links) {\n      return neighbors;\n    }\n    var maxNeighbors = Math.min(node.links.length, 2);\n    for (var i = 0; i < maxNeighbors; ++i) {\n      var link = node.links[i];\n      var otherBody = link.fromId !== node.id ? nodeBodies.get(link.fromId) : nodeBodies.get(link.toId);\n      if (otherBody && otherBody.pos) {\n        neighbors.push(otherBody);\n      }\n    }\n    return neighbors;\n  }\n  function updateBodyMass(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    body.mass = nodeMass(nodeId);\n    if (Number.isNaN(body.mass)) {\n      throw new Error('Node mass should be a number');\n    }\n  }\n\n  /**\n   * Checks whether graph node has in its settings pinned attribute,\n   * which means layout algorithm cannot move it. Node can be marked\n   * as pinned, if it has \"isPinned\" attribute, or when node.data has it.\n   *\n   * @param {Object} node a graph node to check\n   * @return {Boolean} true if node should be treated as pinned; false otherwise.\n   */\n  function isNodeOriginallyPinned(node) {\n    return node && (node.isPinned || node.data && node.data.isPinned);\n  }\n  function getInitializedBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    if (!body) {\n      initBody(nodeId);\n      body = nodeBodies.get(nodeId);\n    }\n    return body;\n  }\n\n  /**\n   * Calculates mass of a body, which corresponds to node with given id.\n   *\n   * @param {String|Number} nodeId identifier of a node, for which body mass needs to be calculated\n   * @returns {Number} recommended mass of the body;\n   */\n  function defaultArrayNodeMass(nodeId) {\n    // This function is for older versions of ngraph.graph.\n    var links = graph.getLinks(nodeId);\n    if (!links) return 1;\n    return 1 + links.length / 3.0;\n  }\n  function defaultSetNodeMass(nodeId) {\n    var links = graph.getLinks(nodeId);\n    if (!links) return 1;\n    return 1 + links.size / 3.0;\n  }\n}\nfunction noop() {}","map":{"version":3,"names":["module","exports","createLayout","simulator","require","eventify","graph","physicsSettings","Error","createSimulator","physicsSimulator","Array","isArray","nodeMass","version","defaultSetNodeMass","defaultArrayNodeMass","nodeBodies","Map","springs","bodiesCount","springTransform","settings","noop","initPhysics","listenToEvents","wasStable","api","step","updateStableStatus","lastMove","fire","ratio","isStableNow","getNodePosition","nodeId","getInitializedBody","pos","setNodePosition","body","setPosition","apply","prototype","slice","call","arguments","getLinkPosition","linkId","spring","from","to","getGraphRect","getBBox","forEachBody","pinNode","node","isPinned","id","isNodePinned","dispose","off","onGraphChanged","getBody","getSpring","getForceVectorLength","onStableChanged","cb","forEach","fx","fy","Math","abs","force","x","y","sqrt","fromId","toId","undefined","link","hasLink","get","on","isStable","changes","i","length","change","changeType","initBody","initLink","releaseNode","releaseLink","getNodesCount","forEachNode","forEachLink","getNode","position","neighbors","getNeighborBodies","getBestNewBodyPosition","addBodyAt","set","updateBodyMass","isNodeOriginallyPinned","delete","removeBody","fromBody","toBody","addSpring","removeSpring","links","maxNeighbors","min","otherBody","push","mass","Number","isNaN","data","getLinks","size"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/view/node_modules/ngraph.forcelayout/index.js"],"sourcesContent":["module.exports = createLayout;\nmodule.exports.simulator = require('./lib/createPhysicsSimulator');\n\nvar eventify = require('ngraph.events');\n\n/**\n * Creates force based layout for a given graph.\n *\n * @param {ngraph.graph} graph which needs to be laid out\n * @param {object} physicsSettings if you need custom settings\n * for physics simulator you can pass your own settings here. If it's not passed\n * a default one will be created.\n */\nfunction createLayout(graph, physicsSettings) {\n  if (!graph) {\n    throw new Error('Graph structure cannot be undefined');\n  }\n\n  var createSimulator = (physicsSettings && physicsSettings.createSimulator) || require('./lib/createPhysicsSimulator');\n  var physicsSimulator = createSimulator(physicsSettings);\n  if (Array.isArray(physicsSettings)) throw new Error('Physics settings is expected to be an object');\n\n  var nodeMass = graph.version > 19 ? defaultSetNodeMass : defaultArrayNodeMass;\n  if (physicsSettings && typeof physicsSettings.nodeMass === 'function') {\n    nodeMass = physicsSettings.nodeMass;\n  }\n\n  var nodeBodies = new Map();\n  var springs = {};\n  var bodiesCount = 0;\n\n  var springTransform = physicsSimulator.settings.springTransform || noop;\n\n  // Initialize physics with what we have in the graph:\n  initPhysics();\n  listenToEvents();\n\n  var wasStable = false;\n\n  var api = {\n    /**\n     * Performs one step of iterative layout algorithm\n     *\n     * @returns {boolean} true if the system should be considered stable; False otherwise.\n     * The system is stable if no further call to `step()` can improve the layout.\n     */\n    step: function() {\n      if (bodiesCount === 0) {\n        updateStableStatus(true);\n        return true;\n      }\n\n      var lastMove = physicsSimulator.step();\n\n      // Save the movement in case if someone wants to query it in the step\n      // callback.\n      api.lastMove = lastMove;\n\n      // Allow listeners to perform low-level actions after nodes are updated.\n      api.fire('step');\n\n      var ratio = lastMove/bodiesCount;\n      var isStableNow = ratio <= 0.01; // TODO: The number is somewhat arbitrary...\n      updateStableStatus(isStableNow);\n\n\n      return isStableNow;\n    },\n\n    /**\n     * For a given `nodeId` returns position\n     */\n    getNodePosition: function (nodeId) {\n      return getInitializedBody(nodeId).pos;\n    },\n\n    /**\n     * Sets position of a node to a given coordinates\n     * @param {string} nodeId node identifier\n     * @param {number} x position of a node\n     * @param {number} y position of a node\n     * @param {number=} z position of node (only if applicable to body)\n     */\n    setNodePosition: function (nodeId) {\n      var body = getInitializedBody(nodeId);\n      body.setPosition.apply(body, Array.prototype.slice.call(arguments, 1));\n    },\n\n    /**\n     * @returns {Object} Link position by link id\n     * @returns {Object.from} {x, y} coordinates of link start\n     * @returns {Object.to} {x, y} coordinates of link end\n     */\n    getLinkPosition: function (linkId) {\n      var spring = springs[linkId];\n      if (spring) {\n        return {\n          from: spring.from.pos,\n          to: spring.to.pos\n        };\n      }\n    },\n\n    /**\n     * @returns {Object} area required to fit in the graph. Object contains\n     * `x1`, `y1` - top left coordinates\n     * `x2`, `y2` - bottom right coordinates\n     */\n    getGraphRect: function () {\n      return physicsSimulator.getBBox();\n    },\n\n    /**\n     * Iterates over each body in the layout simulator and performs a callback(body, nodeId)\n     */\n    forEachBody: forEachBody,\n\n    /*\n     * Requests layout algorithm to pin/unpin node to its current position\n     * Pinned nodes should not be affected by layout algorithm and always\n     * remain at their position\n     */\n    pinNode: function (node, isPinned) {\n      var body = getInitializedBody(node.id);\n       body.isPinned = !!isPinned;\n    },\n\n    /**\n     * Checks whether given graph's node is currently pinned\n     */\n    isNodePinned: function (node) {\n      return getInitializedBody(node.id).isPinned;\n    },\n\n    /**\n     * Request to release all resources\n     */\n    dispose: function() {\n      graph.off('changed', onGraphChanged);\n      api.fire('disposed');\n    },\n\n    /**\n     * Gets physical body for a given node id. If node is not found undefined\n     * value is returned.\n     */\n    getBody: getBody,\n\n    /**\n     * Gets spring for a given edge.\n     *\n     * @param {string} linkId link identifer. If two arguments are passed then\n     * this argument is treated as formNodeId\n     * @param {string=} toId when defined this parameter denotes head of the link\n     * and first argument is treated as tail of the link (fromId)\n     */\n    getSpring: getSpring,\n\n    /**\n     * Returns length of cumulative force vector. The closer this to zero - the more stable the system is\n     */\n    getForceVectorLength: getForceVectorLength,\n\n    /**\n     * [Read only] Gets current physics simulator\n     */\n    simulator: physicsSimulator,\n\n    /**\n     * Gets the graph that was used for layout\n     */\n    graph: graph,\n\n    /**\n     * Gets amount of movement performed during last step operation\n     */\n    lastMove: 0\n  };\n\n  eventify(api);\n\n  return api;\n\n  function updateStableStatus(isStableNow) {\n    if (wasStable !== isStableNow) {\n      wasStable = isStableNow;\n      onStableChanged(isStableNow);\n    }\n  }\n\n  function forEachBody(cb) {\n    nodeBodies.forEach(cb);\n  }\n\n  function getForceVectorLength() {\n    var fx = 0, fy = 0;\n    forEachBody(function(body) {\n      fx += Math.abs(body.force.x);\n      fy += Math.abs(body.force.y);\n    });\n    return Math.sqrt(fx * fx + fy * fy);\n  }\n\n  function getSpring(fromId, toId) {\n    var linkId;\n    if (toId === undefined) {\n      if (typeof fromId !== 'object') {\n        // assume fromId as a linkId:\n        linkId = fromId;\n      } else {\n        // assume fromId to be a link object:\n        linkId = fromId.id;\n      }\n    } else {\n      // toId is defined, should grab link:\n      var link = graph.hasLink(fromId, toId);\n      if (!link) return;\n      linkId = link.id;\n    }\n\n    return springs[linkId];\n  }\n\n  function getBody(nodeId) {\n    return nodeBodies.get(nodeId);\n  }\n\n  function listenToEvents() {\n    graph.on('changed', onGraphChanged);\n  }\n\n  function onStableChanged(isStable) {\n    api.fire('stable', isStable);\n  }\n\n  function onGraphChanged(changes) {\n    for (var i = 0; i < changes.length; ++i) {\n      var change = changes[i];\n      if (change.changeType === 'add') {\n        if (change.node) {\n          initBody(change.node.id);\n        }\n        if (change.link) {\n          initLink(change.link);\n        }\n      } else if (change.changeType === 'remove') {\n        if (change.node) {\n          releaseNode(change.node);\n        }\n        if (change.link) {\n          releaseLink(change.link);\n        }\n      }\n    }\n    bodiesCount = graph.getNodesCount();\n  }\n\n  function initPhysics() {\n    bodiesCount = 0;\n\n    graph.forEachNode(function (node) {\n      initBody(node.id);\n      bodiesCount += 1;\n    });\n\n    graph.forEachLink(initLink);\n  }\n\n  function initBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    if (!body) {\n      var node = graph.getNode(nodeId);\n      if (!node) {\n        throw new Error('initBody() was called with unknown node id');\n      }\n\n      var pos = node.position;\n      if (!pos) {\n        var neighbors = getNeighborBodies(node);\n        pos = physicsSimulator.getBestNewBodyPosition(neighbors);\n      }\n\n      body = physicsSimulator.addBodyAt(pos);\n      body.id = nodeId;\n\n      nodeBodies.set(nodeId, body);\n      updateBodyMass(nodeId);\n\n      if (isNodeOriginallyPinned(node)) {\n        body.isPinned = true;\n      }\n    }\n  }\n\n  function releaseNode(node) {\n    var nodeId = node.id;\n    var body = nodeBodies.get(nodeId);\n    if (body) {\n      nodeBodies.delete(nodeId);\n      physicsSimulator.removeBody(body);\n    }\n  }\n\n  function initLink(link) {\n    updateBodyMass(link.fromId);\n    updateBodyMass(link.toId);\n\n    var fromBody = nodeBodies.get(link.fromId),\n        toBody  = nodeBodies.get(link.toId),\n        spring = physicsSimulator.addSpring(fromBody, toBody, link.length);\n\n    springTransform(link, spring);\n\n    springs[link.id] = spring;\n  }\n\n  function releaseLink(link) {\n    var spring = springs[link.id];\n    if (spring) {\n      var from = graph.getNode(link.fromId),\n          to = graph.getNode(link.toId);\n\n      if (from) updateBodyMass(from.id);\n      if (to) updateBodyMass(to.id);\n\n      delete springs[link.id];\n\n      physicsSimulator.removeSpring(spring);\n    }\n  }\n\n  function getNeighborBodies(node) {\n    // TODO: Could probably be done better on memory\n    var neighbors = [];\n    if (!node.links) {\n      return neighbors;\n    }\n    var maxNeighbors = Math.min(node.links.length, 2);\n    for (var i = 0; i < maxNeighbors; ++i) {\n      var link = node.links[i];\n      var otherBody = link.fromId !== node.id ? nodeBodies.get(link.fromId) : nodeBodies.get(link.toId);\n      if (otherBody && otherBody.pos) {\n        neighbors.push(otherBody);\n      }\n    }\n\n    return neighbors;\n  }\n\n  function updateBodyMass(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    body.mass = nodeMass(nodeId);\n    if (Number.isNaN(body.mass)) {\n      throw new Error('Node mass should be a number');\n    }\n  }\n\n  /**\n   * Checks whether graph node has in its settings pinned attribute,\n   * which means layout algorithm cannot move it. Node can be marked\n   * as pinned, if it has \"isPinned\" attribute, or when node.data has it.\n   *\n   * @param {Object} node a graph node to check\n   * @return {Boolean} true if node should be treated as pinned; false otherwise.\n   */\n  function isNodeOriginallyPinned(node) {\n    return (node && (node.isPinned || (node.data && node.data.isPinned)));\n  }\n\n  function getInitializedBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    if (!body) {\n      initBody(nodeId);\n      body = nodeBodies.get(nodeId);\n    }\n    return body;\n  }\n\n  /**\n   * Calculates mass of a body, which corresponds to node with given id.\n   *\n   * @param {String|Number} nodeId identifier of a node, for which body mass needs to be calculated\n   * @returns {Number} recommended mass of the body;\n   */\n  function defaultArrayNodeMass(nodeId) {\n    // This function is for older versions of ngraph.graph.\n    var links = graph.getLinks(nodeId);\n    if (!links) return 1;\n    return 1 + links.length / 3.0;\n  }\n\n  function defaultSetNodeMass(nodeId) {\n    var links = graph.getLinks(nodeId);\n    if (!links) return 1;\n    return 1 + links.size / 3.0;\n  }\n}\n\nfunction noop() { }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}