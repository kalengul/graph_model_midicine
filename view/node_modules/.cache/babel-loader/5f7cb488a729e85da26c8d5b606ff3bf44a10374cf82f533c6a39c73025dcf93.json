{"ast":null,"code":"/**\n * Flat-shaded ocean primitive.\n *\n * Based on a Codrops tutorial:\n * http://tympanus.net/codrops/2016/04/26/the-aviator-animating-basic-3d-scene-threejs/\n */\nmodule.exports.Primitive = AFRAME.registerPrimitive('a-ocean', {\n  defaultComponents: {\n    ocean: {},\n    rotation: {\n      x: -90,\n      y: 0,\n      z: 0\n    }\n  },\n  mappings: {\n    width: 'ocean.width',\n    depth: 'ocean.depth',\n    density: 'ocean.density',\n    amplitude: 'ocean.amplitude',\n    amplitudeVariance: 'ocean.amplitudeVariance',\n    speed: 'ocean.speed',\n    speedVariance: 'ocean.speedVariance',\n    color: 'ocean.color',\n    opacity: 'ocean.opacity'\n  }\n});\nmodule.exports.Component = AFRAME.registerComponent('ocean', {\n  schema: {\n    // Dimensions of the ocean area.\n    width: {\n      default: 10,\n      min: 0\n    },\n    depth: {\n      default: 10,\n      min: 0\n    },\n    // Density of waves.\n    density: {\n      default: 10\n    },\n    // Wave amplitude and variance.\n    amplitude: {\n      default: 0.1\n    },\n    amplitudeVariance: {\n      default: 0.3\n    },\n    // Wave speed and variance.\n    speed: {\n      default: 1\n    },\n    speedVariance: {\n      default: 2\n    },\n    // Material.\n    color: {\n      default: '#7AD2F7',\n      type: 'color'\n    },\n    opacity: {\n      default: 0.8\n    }\n  },\n  /**\n   * Use play() instead of init(), because component mappings – unavailable as dependencies – are\n   * not guaranteed to have parsed when this component is initialized.\n   */\n  play: function () {\n    const el = this.el;\n    const data = this.data;\n    let material = el.components.material;\n    const geometry = new THREE.PlaneGeometry(data.width, data.depth, data.density, data.density);\n    this.waves = [];\n    const posAttribute = geometry.getAttribute('position');\n    for (let i = 0; i < posAttribute.count; i++) {\n      this.waves.push({\n        z: posAttribute.getZ(i),\n        ang: Math.random() * Math.PI * 2,\n        amp: data.amplitude + Math.random() * data.amplitudeVariance,\n        speed: (data.speed + Math.random() * data.speedVariance) / 1000 // radians / frame\n      });\n    }\n    if (!material) {\n      material = {};\n      material.material = new THREE.MeshPhongMaterial({\n        color: data.color,\n        transparent: data.opacity < 1,\n        opacity: data.opacity,\n        flatShading: true\n      });\n    }\n    this.mesh = new THREE.Mesh(geometry, material.material);\n    el.setObject3D('mesh', this.mesh);\n  },\n  remove: function () {\n    this.el.removeObject3D('mesh');\n  },\n  tick: function (t, dt) {\n    if (!dt) return;\n    const posAttribute = this.mesh.geometry.getAttribute('position');\n    for (let i = 0; i < posAttribute.count; i++) {\n      const vprops = this.waves[i];\n      const value = vprops.z + Math.sin(vprops.ang) * vprops.amp;\n      posAttribute.setZ(i, value);\n      vprops.ang += vprops.speed * dt;\n    }\n    posAttribute.needsUpdate = true;\n  }\n});","map":{"version":3,"names":["module","exports","Primitive","AFRAME","registerPrimitive","defaultComponents","ocean","rotation","x","y","z","mappings","width","depth","density","amplitude","amplitudeVariance","speed","speedVariance","color","opacity","Component","registerComponent","schema","default","min","type","play","el","data","material","components","geometry","THREE","PlaneGeometry","waves","posAttribute","getAttribute","i","count","push","getZ","ang","Math","random","PI","amp","MeshPhongMaterial","transparent","flatShading","mesh","Mesh","setObject3D","remove","removeObject3D","tick","t","dt","vprops","value","sin","setZ","needsUpdate"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/view/node_modules/aframe-extras/src/primitives/a-ocean.js"],"sourcesContent":["/**\n * Flat-shaded ocean primitive.\n *\n * Based on a Codrops tutorial:\n * http://tympanus.net/codrops/2016/04/26/the-aviator-animating-basic-3d-scene-threejs/\n */\nmodule.exports.Primitive = AFRAME.registerPrimitive('a-ocean', {\n  defaultComponents: {\n    ocean: {},\n    rotation: {x: -90, y: 0, z: 0}\n  },\n  mappings: {\n    width: 'ocean.width',\n    depth: 'ocean.depth',\n    density: 'ocean.density',\n    amplitude: 'ocean.amplitude',\n    amplitudeVariance: 'ocean.amplitudeVariance',\n    speed: 'ocean.speed',\n    speedVariance: 'ocean.speedVariance',\n    color: 'ocean.color',\n    opacity: 'ocean.opacity'\n  }\n});\n\nmodule.exports.Component = AFRAME.registerComponent('ocean', {\n  schema: {\n    // Dimensions of the ocean area.\n    width: {default: 10, min: 0},\n    depth: {default: 10, min: 0},\n\n    // Density of waves.\n    density: {default: 10},\n\n    // Wave amplitude and variance.\n    amplitude: {default: 0.1},\n    amplitudeVariance: {default: 0.3},\n\n    // Wave speed and variance.\n    speed: {default: 1},\n    speedVariance: {default: 2},\n\n    // Material.\n    color: {default: '#7AD2F7', type: 'color'},\n    opacity: {default: 0.8}\n  },\n\n  /**\n   * Use play() instead of init(), because component mappings – unavailable as dependencies – are\n   * not guaranteed to have parsed when this component is initialized.\n   */\n  play: function () {\n    const el = this.el;\n    const data = this.data;\n    let material = el.components.material;\n\n    const geometry = new THREE.PlaneGeometry(data.width, data.depth, data.density, data.density);\n    this.waves = [];\n    const posAttribute = geometry.getAttribute('position');\n    for (let i = 0; i < posAttribute.count; i++) {\n      this.waves.push({\n        z: posAttribute.getZ(i),\n        ang: Math.random() * Math.PI * 2,\n        amp: data.amplitude + Math.random() * data.amplitudeVariance,\n        speed: (data.speed + Math.random() * data.speedVariance) / 1000 // radians / frame\n      });\n    }\n\n    if (!material) {\n      material = {};\n      material.material = new THREE.MeshPhongMaterial({\n        color: data.color,\n        transparent: data.opacity < 1,\n        opacity: data.opacity,\n        flatShading: true,\n      });\n    }\n\n    this.mesh = new THREE.Mesh(geometry, material.material);\n    el.setObject3D('mesh', this.mesh);\n  },\n\n  remove: function () {\n    this.el.removeObject3D('mesh');\n  },\n\n  tick: function (t, dt) {\n    if (!dt) return;\n\n    const posAttribute = this.mesh.geometry.getAttribute('position');\n    for (let i = 0; i < posAttribute.count; i++){\n      const vprops = this.waves[i];\n      const value = vprops.z + Math.sin(vprops.ang) * vprops.amp;\n      posAttribute.setZ(i, value);\n      vprops.ang += vprops.speed * dt;\n    }\n    posAttribute.needsUpdate = true;\n  }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}