{"ast":null,"code":"export class DataParser {\n  constructor(data) {\n    this.inputData = data;\n  }\n  Parse() {\n    let outputData = {\n      \"nodes\": [],\n      \"links\": []\n    };\n\n    //Запись связей\n    this.inputData.links.map(elem => {\n      let sourceNode = this._findNode('name', elem.source);\n      let targetNode = this._findNode('name', elem.target);\n      let newLink = {\n        'source': sourceNode.id,\n        'target': targetNode.id\n      };\n      outputData.links.push(newLink);\n    });\n\n    //Запись узлов\n    this.inputData.nodes.map(elem => {\n      let newNode = this._createNewNode(elem);\n      outputData.nodes.push(newNode);\n    });\n    console.log(outputData);\n    return outputData;\n  }\n  _findNode(type, param) {\n    switch (type) {\n      case 'name':\n        for (let i = 0; i < this.inputData.nodes.length; i++) {\n          let node = this.inputData.nodes[i];\n          if (node.name === param) return node;\n        }\n        break;\n      case 'parent':\n        if (param == []) return null;else if (param.length === 1) {\n          for (let i = 0; i < this.inputData.nodes.length; i++) {\n            let node = this.inputData.nodes[i];\n            if (node.name === param[0]) return node;\n          }\n        } else {\n          //Ищем родителя на два уровня выше\n          let parent;\n          for (let i = 0; i < this.inputData.nodes.length; i++) {\n            let node = this.inputData.nodes[i];\n            if (node.name === param[0]) parent = node;\n          }\n          for (let i = 0; i < this.inputData.nodes.length; i++) {\n            let node = this.inputData.nodes[i];\n            if (node.name === parent.parent[0]) return node;\n          }\n        }\n        break;\n      default:\n        break;\n    }\n  }\n  _createNewNode(node) {\n    //Создание нового узла\n    let newNode = {\n      'id': node.id,\n      'name': this._modifyString(node.name),\n      'level': node.level,\n      'cluster': this._findCluster(node),\n      'val': this._getSizeNode(node),\n      'color': this._getNodeColor(node)\n    };\n    return newNode;\n  }\n  _getNodeColor(node) {\n    let nodeColor;\n    let nodeType = this._findCluster(node);\n    if (nodeType.isRoot && nodeType.id == null) nodeColor = '#B3CFE9';else if (nodeType.isRoot && nodeType.id != null) nodeColor = 110;else nodeColor = 20;\n    return nodeColor;\n  }\n  _getSizeNode(node) {\n    let nodeSize;\n    let nodeType = this._findCluster(node);\n    if (nodeType.isRoot && nodeType.id == null) nodeSize = 200;else if (nodeType.isRoot && nodeType.id != null) nodeSize = 110;else nodeSize = 20;\n    return nodeSize;\n  }\n  _findCluster(node) {\n    if (node.level === 0) return {\n      'id': null,\n      'isRoot': true\n    };else if (node.level === 1) return {\n      'id': node.id,\n      'isRoot': true\n    };else if (node.level === 2) {\n      let parentNodeId = this._findNode('parent', node.parent);\n      return {\n        'id': parentNodeId.id,\n        'isRoot': false\n      };\n    }\n  }\n  _modifyString(str) {\n    str = str.replaceAll('_', ' ');\n    return str;\n  }\n}","map":{"version":3,"names":["DataParser","constructor","data","inputData","Parse","outputData","links","map","elem","sourceNode","_findNode","source","targetNode","target","newLink","id","push","nodes","newNode","_createNewNode","console","log","type","param","i","length","node","name","parent","_modifyString","level","_findCluster","_getSizeNode","_getNodeColor","nodeColor","nodeType","isRoot","nodeSize","parentNodeId","str","replaceAll"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/graph_model_midicine/view/src/components/graph/DataParser.js"],"sourcesContent":["export class DataParser{\r\n    constructor(data){\r\n        this.inputData = data\r\n    }\r\n\r\n    Parse(){\r\n        let outputData = {\"nodes\":[], \"links\": []}\r\n        \r\n        //Запись связей\r\n        this.inputData.links.map((elem) => {\r\n            let sourceNode = this._findNode('name', elem.source)\r\n            let targetNode = this._findNode('name', elem.target)\r\n\r\n            let newLink = {'source': sourceNode.id, 'target': targetNode.id}\r\n            outputData.links.push(newLink)\r\n        })\r\n        \r\n        //Запись узлов\r\n        this.inputData.nodes.map((elem)=>{\r\n            let newNode = this._createNewNode(elem)\r\n            outputData.nodes.push(newNode)\r\n        })\r\n\r\n\r\n        console.log(outputData)\r\n\r\n        return outputData\r\n    }\r\n\r\n    _findNode(type, param){\r\n        switch (type) {\r\n            case 'name':\r\n                for(let i=0; i<this.inputData.nodes.length; i++){\r\n                    let node = this.inputData.nodes[i];\r\n                    if(node.name === param) return node\r\n                }\r\n                break;\r\n            case 'parent':\r\n                if(param == []) return null \r\n                else if (param.length === 1) {\r\n                    for(let i=0; i<this.inputData.nodes.length; i++){\r\n                        let node = this.inputData.nodes[i];\r\n                        if(node.name === param[0]) return node\r\n                    }\r\n                }else {\r\n                    //Ищем родителя на два уровня выше\r\n                    let parent\r\n                    for(let i=0; i<this.inputData.nodes.length; i++){\r\n                        let node = this.inputData.nodes[i];\r\n                        if(node.name === param[0]) parent = node\r\n                    }\r\n                    for(let i=0; i<this.inputData.nodes.length; i++){\r\n                        let node = this.inputData.nodes[i];\r\n                        if(node.name === parent.parent[0]) return node\r\n                    }\r\n\r\n                }\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    _createNewNode(node){\r\n        //Создание нового узла\r\n        let newNode = {\r\n            'id': node.id,\r\n            'name': this._modifyString(node.name),\r\n            'level': node.level,\r\n            'cluster': this._findCluster(node),\r\n            'val': this._getSizeNode(node),\r\n            'color': this._getNodeColor(node),\r\n        }\r\n        \r\n        \r\n        return newNode\r\n    }\r\n\r\n    _getNodeColor(node){\r\n        let nodeColor;\r\n        let nodeType = this._findCluster(node)\r\n\r\n        if(nodeType.isRoot && nodeType.id == null) nodeColor = '#B3CFE9'\r\n        else if(nodeType.isRoot && nodeType.id != null) nodeColor = 110\r\n        else nodeColor = 20\r\n\r\n        return nodeColor\r\n    }\r\n\r\n    _getSizeNode(node){\r\n        let nodeSize;\r\n        let nodeType = this._findCluster(node)\r\n\r\n        if(nodeType.isRoot && nodeType.id == null) nodeSize = 200\r\n        else if(nodeType.isRoot && nodeType.id != null) nodeSize = 110\r\n        else nodeSize = 20\r\n\r\n        return nodeSize\r\n    }\r\n\r\n    _findCluster(node){\r\n        if (node.level === 0) return {'id': null, 'isRoot': true}\r\n        else if (node.level === 1) return {'id': node.id, 'isRoot': true}\r\n        else if (node.level === 2) {\r\n            let parentNodeId = this._findNode('parent', node.parent)\r\n            return {'id': parentNodeId.id, 'isRoot': false}\r\n        }\r\n    }\r\n\r\n    _modifyString(str){\r\n        str = str.replaceAll('_', ' ')\r\n        return str\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}