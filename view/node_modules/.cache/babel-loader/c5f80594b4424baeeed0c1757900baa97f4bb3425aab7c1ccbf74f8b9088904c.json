{"ast":null,"code":"export class DataParser {\n  constructor(data) {\n    this.inputData = data;\n  }\n  Parse() {\n    let outputData = {\n      \"nodes\": [],\n      \"links\": []\n    };\n\n    //Запись связей\n    this.inputData.links.map(elem => {\n      let sourceNode = this._findNode('name', elem.source);\n      let targetNode = this._findNode('name', elem.target);\n      console.log(sourceNode);\n      let newLink = {\n        'source': sourceNode.id,\n        'target': targetNode.id\n      };\n      outputData.links.push(newLink);\n    });\n\n    //Запись узлов\n    this.inputData.nodes.map(elem => {\n      let newNode = this._createNewNode(elem);\n      outputData.nodes.push(newNode);\n    });\n    console.log(outputData);\n    return outputData;\n  }\n  _findNode(type, param) {\n    for (let i = 0; i < this.inputData.nodes.length; i++) {\n      let node = this.inputData.nodes[i];\n      switch (type) {\n        case 'name':\n          if (node.name === param) {\n            console.log(node);\n            return node;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    // this.inputData.nodes.forEach(elem => {\n\n    // });\n  }\n  _createNewNode(node) {\n    //Создание нового узла\n    let newNode = {\n      'id': node.id,\n      'name': this._modifyString(node.name),\n      'level': node.level,\n      'cluster': this._findCluster(node)\n    };\n    return newNode;\n  }\n  _findCluster(node) {\n    if (node.level === 0) return {\n      'id': null,\n      'isRoot': false\n    };else if (node.level === 1) return {\n      'id': node.id,\n      'isRoot': true\n    };else {}\n  }\n  _modifyString(str) {\n    str = str.replaceAll('_', ' ');\n    return str;\n  }\n}","map":{"version":3,"names":["DataParser","constructor","data","inputData","Parse","outputData","links","map","elem","sourceNode","_findNode","source","targetNode","target","console","log","newLink","id","push","nodes","newNode","_createNewNode","type","param","i","length","node","name","_modifyString","level","_findCluster","str","replaceAll"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/graph_model_midicine/view/src/components/graph/DataParser.js"],"sourcesContent":["export class DataParser{\r\n    constructor(data){\r\n        this.inputData = data\r\n    }\r\n\r\n    Parse(){\r\n        let outputData = {\"nodes\":[], \"links\": []}\r\n        \r\n        //Запись связей\r\n        this.inputData.links.map((elem) => {\r\n            let sourceNode = this._findNode('name', elem.source)\r\n            let targetNode = this._findNode('name', elem.target)\r\n\r\n            console.log(sourceNode)\r\n\r\n            let newLink = {'source': sourceNode.id, 'target': targetNode.id}\r\n            outputData.links.push(newLink)\r\n        })\r\n        \r\n        //Запись узлов\r\n        this.inputData.nodes.map((elem)=>{\r\n            let newNode = this._createNewNode(elem)\r\n            outputData.nodes.push(newNode)\r\n        })\r\n\r\n\r\n        console.log(outputData)\r\n\r\n        return outputData\r\n    }\r\n\r\n    _findNode(type, param){\r\n        for(let i=0; i<this.inputData.nodes.length; i++){\r\n            let node = this.inputData.nodes[i];\r\n            switch (type) {\r\n                case 'name':\r\n                    if(node.name === param) {\r\n                        console.log(node)\r\n                        return node\r\n                    }\r\n                    break;\r\n            \r\n                default:\r\n                    break;\r\n            } \r\n        }\r\n        // this.inputData.nodes.forEach(elem => {\r\n            \r\n        // });\r\n    }\r\n\r\n    _createNewNode(node){\r\n        //Создание нового узла\r\n        let newNode = {\r\n            'id': node.id,\r\n            'name': this._modifyString(node.name),\r\n            'level': node.level,\r\n            'cluster': this._findCluster(node)\r\n        }\r\n        \r\n        \r\n        return newNode\r\n    }\r\n\r\n    _findCluster(node){\r\n        if (node.level === 0) return {'id': null, 'isRoot': false}\r\n        else if (node.level === 1) return {'id': node.id, 'isRoot': true}\r\n        else{\r\n\r\n        }\r\n    }\r\n\r\n    _modifyString(str){\r\n        str = str.replaceAll('_', ' ')\r\n        return str\r\n    }\r\n}"],"mappings":"AAAA,OAAO,MAAMA,UAAU;EACnBC,WAAWA,CAACC,IAAI,EAAC;IACb,IAAI,CAACC,SAAS,GAAGD,IAAI;EACzB;EAEAE,KAAKA,CAAA,EAAE;IACH,IAAIC,UAAU,GAAG;MAAC,OAAO,EAAC,EAAE;MAAE,OAAO,EAAE;IAAE,CAAC;;IAE1C;IACA,IAAI,CAACF,SAAS,CAACG,KAAK,CAACC,GAAG,CAAEC,IAAI,IAAK;MAC/B,IAAIC,UAAU,GAAG,IAAI,CAACC,SAAS,CAAC,MAAM,EAAEF,IAAI,CAACG,MAAM,CAAC;MACpD,IAAIC,UAAU,GAAG,IAAI,CAACF,SAAS,CAAC,MAAM,EAAEF,IAAI,CAACK,MAAM,CAAC;MAEpDC,OAAO,CAACC,GAAG,CAACN,UAAU,CAAC;MAEvB,IAAIO,OAAO,GAAG;QAAC,QAAQ,EAAEP,UAAU,CAACQ,EAAE;QAAE,QAAQ,EAAEL,UAAU,CAACK;MAAE,CAAC;MAChEZ,UAAU,CAACC,KAAK,CAACY,IAAI,CAACF,OAAO,CAAC;IAClC,CAAC,CAAC;;IAEF;IACA,IAAI,CAACb,SAAS,CAACgB,KAAK,CAACZ,GAAG,CAAEC,IAAI,IAAG;MAC7B,IAAIY,OAAO,GAAG,IAAI,CAACC,cAAc,CAACb,IAAI,CAAC;MACvCH,UAAU,CAACc,KAAK,CAACD,IAAI,CAACE,OAAO,CAAC;IAClC,CAAC,CAAC;IAGFN,OAAO,CAACC,GAAG,CAACV,UAAU,CAAC;IAEvB,OAAOA,UAAU;EACrB;EAEAK,SAASA,CAACY,IAAI,EAAEC,KAAK,EAAC;IAClB,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,IAAI,CAACrB,SAAS,CAACgB,KAAK,CAACM,MAAM,EAAED,CAAC,EAAE,EAAC;MAC5C,IAAIE,IAAI,GAAG,IAAI,CAACvB,SAAS,CAACgB,KAAK,CAACK,CAAC,CAAC;MAClC,QAAQF,IAAI;QACR,KAAK,MAAM;UACP,IAAGI,IAAI,CAACC,IAAI,KAAKJ,KAAK,EAAE;YACpBT,OAAO,CAACC,GAAG,CAACW,IAAI,CAAC;YACjB,OAAOA,IAAI;UACf;UACA;QAEJ;UACI;MACR;IACJ;IACA;;IAEA;EACJ;EAEAL,cAAcA,CAACK,IAAI,EAAC;IAChB;IACA,IAAIN,OAAO,GAAG;MACV,IAAI,EAAEM,IAAI,CAACT,EAAE;MACb,MAAM,EAAE,IAAI,CAACW,aAAa,CAACF,IAAI,CAACC,IAAI,CAAC;MACrC,OAAO,EAAED,IAAI,CAACG,KAAK;MACnB,SAAS,EAAE,IAAI,CAACC,YAAY,CAACJ,IAAI;IACrC,CAAC;IAGD,OAAON,OAAO;EAClB;EAEAU,YAAYA,CAACJ,IAAI,EAAC;IACd,IAAIA,IAAI,CAACG,KAAK,KAAK,CAAC,EAAE,OAAO;MAAC,IAAI,EAAE,IAAI;MAAE,QAAQ,EAAE;IAAK,CAAC,MACrD,IAAIH,IAAI,CAACG,KAAK,KAAK,CAAC,EAAE,OAAO;MAAC,IAAI,EAAEH,IAAI,CAACT,EAAE;MAAE,QAAQ,EAAE;IAAI,CAAC,MAC7D,CAEJ;EACJ;EAEAW,aAAaA,CAACG,GAAG,EAAC;IACdA,GAAG,GAAGA,GAAG,CAACC,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC;IAC9B,OAAOD,GAAG;EACd;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}