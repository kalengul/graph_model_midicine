{"ast":null,"code":"var _jsxFileName = \"C:\\\\UsersFolders\\\\Polina\\\\\\u0420\\u042D\\u0423\\\\Graph\\\\view\\\\src\\\\components\\\\graph\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, useMemo } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport { data, clusterIds, clusters } from \"./exampleData\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GraphView = () => {\n  _s();\n  const [initialCenter, setInitialCenter] = useState(true);\n  const [collapsedClusters, setCollapsedClusters] = useState(clusterIds);\n  const [hiddenClusters, setHiddenClusters] = useState([]);\n  const forceRef = useRef();\n  useEffect(() => {\n    // forceRef.current.d3Force(\"collide\", d3.forceCollide(13));\n    forceRef.current.d3Force(\"charge\").strength(-40);\n    forceRef.current.d3Force(\"link\").distance(50);\n    forceRef.current.d3Force(\"charge\").distanceMax(150);\n  }, []);\n  const toggleClusterCollapse = clusterId => {\n    if (collapsedClusters.includes(clusterId)) {\n      setCollapsedClusters(collapsedClusters.filter(id => id !== clusterId));\n    } else {\n      setCollapsedClusters([...collapsedClusters, clusterId]);\n    }\n  };\n  const handleNodeClick = node => {\n    toggleClusterCollapse(node.id);\n    if (collapsedClusters.includes(node.id)) {\n      forceRef.current.zoom(3.5, 400);\n      forceRef.current.centerAt(node.x, node.y, 400);\n    }\n  };\n  const toggleCluster = clusterId => {\n    if (hiddenClusters.includes(clusterId)) {\n      setHiddenClusters(hiddenClusters.filter(id => id !== clusterId));\n    } else {\n      setHiddenClusters([...hiddenClusters, clusterId]);\n    }\n    if (!collapsedClusters.includes(clusterId)) {\n      toggleClusterCollapse(clusterId);\n    }\n  };\n  const graphData = useMemo(() => {\n    return {\n      nodes: data.nodes.filter(node => !hiddenClusters.includes(node.id)),\n      links: data.links\n    };\n  }, [hiddenClusters]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        forceRef.current.zoomToFit();\n        setHiddenClusters([]);\n        setCollapsedClusters(clusterIds);\n      },\n      children: \"RESET\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexWrap: \"wrap\"\n      },\n      children: clusters.map(cluster => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          toggleCluster(cluster.id);\n        },\n        children: [\"Toggle \", cluster.name]\n      }, cluster.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: \"1px solid gray\",\n        marginTop: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n        width: window.innerWidth,\n        height: 650,\n        ref: forceRef,\n        onNodeClick: handleNodeClick,\n        graphData: graphData,\n        cooldownTicks: 50,\n        nodeRelSize: 1,\n        onEngineStop: () => {\n          if (initialCenter) {\n            forceRef.current.zoomToFit();\n          }\n          setInitialCenter(false);\n        },\n        nodeCanvasObjectMode: () => \"after\",\n        nodeCanvasObject: (node, ctx, globalScale) => {\n          const label = node.name;\n          const fontSize = node.isClusterNode ? 14 * (node.val / 1500) : 14 / (globalScale * 1.2);\n          ctx.font = `${fontSize}px Sans-Serif`;\n          ctx.textAlign = \"center\";\n          ctx.textBaseline = \"middle\";\n          ctx.fillStyle = node.isClusterNode ? \"white\" : \"black\"; //node.color;\n          if (node.isClusterNode) {\n            // console.log();\n            const lineHeight = fontSize * 1.2;\n            const lines = label.split(\",\");\n            let x = node.x;\n            let y = node.y - lineHeight;\n            for (let i = 0; i < lines.length; ++i) {\n              ctx.fillText(lines[i], x, y);\n              y += lineHeight;\n            }\n          } else if (globalScale >= 3.5) {\n            ctx.fillText(label, node.x, node.y + 2.5);\n          }\n        },\n        enableNodeDrag: false,\n        nodeVisibility: node => {\n          if (collapsedClusters.includes(node.clusterId)) {\n            return false;\n          } else return true;\n        },\n        linkVisibility: link => {\n          if (collapsedClusters.includes(link.source.id) && !link.target.isClusterNode) {\n            return false;\n          } else if (hiddenClusters.includes(link.source.id) || hiddenClusters.includes(link.target.id)) {\n            return false;\n          } else return true;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n  //     const svgRef = useRef();\n\n  //   useEffect(() => {\n  //     const data = [10, 20, 30, 40, 50];\n\n  //     const svg = d3.select(svgRef.current);\n\n  //     svg\n  //       .selectAll('circle')\n  //       .data(data)\n  //       .enter()\n  //       .append('circle')\n  //       .attr('cx', (d, i) => i * 100 + 25)\n  //       .attr('cy', 70)\n  //       .attr('r', (d) => d)\n  //       .style('fill', 'skyblue');\n  //   }, []);\n\n  //   return <svg ref={svgRef}></svg>;\n};\n_s(GraphView, \"ube/AvF7UjEKRHLux4bhjSMz69U=\");\n_c = GraphView;\nvar _c;\n$RefreshReg$(_c, \"GraphView\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useMemo","ReactDOM","ForceGraph2D","data","clusterIds","clusters","d3","jsxDEV","_jsxDEV","GraphView","_s","initialCenter","setInitialCenter","collapsedClusters","setCollapsedClusters","hiddenClusters","setHiddenClusters","forceRef","current","d3Force","strength","distance","distanceMax","toggleClusterCollapse","clusterId","includes","filter","id","handleNodeClick","node","zoom","centerAt","x","y","toggleCluster","graphData","nodes","links","children","onClick","zoomToFit","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flexWrap","map","cluster","name","border","marginTop","width","window","innerWidth","height","ref","onNodeClick","cooldownTicks","nodeRelSize","onEngineStop","nodeCanvasObjectMode","nodeCanvasObject","ctx","globalScale","label","fontSize","isClusterNode","val","font","textAlign","textBaseline","fillStyle","lineHeight","lines","split","i","length","fillText","enableNodeDrag","nodeVisibility","linkVisibility","link","source","target","_c","$RefreshReg$"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/view/src/components/graph/graph.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useMemo } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ForceGraph2D from \"react-force-graph-2d\";\r\nimport { data, clusterIds, clusters } from \"./exampleData\";\r\nimport * as d3 from \"d3\";\r\n\r\n\r\nexport const GraphView =() =>{\r\n    const [initialCenter, setInitialCenter] = useState(true);\r\n  const [collapsedClusters, setCollapsedClusters] = useState(clusterIds);\r\n  const [hiddenClusters, setHiddenClusters] = useState([]);\r\n  const forceRef = useRef();\r\n\r\n  useEffect(() => {\r\n    // forceRef.current.d3Force(\"collide\", d3.forceCollide(13));\r\n    forceRef.current.d3Force(\"charge\").strength(-40);\r\n    forceRef.current.d3Force(\"link\").distance(50);\r\n    forceRef.current.d3Force(\"charge\").distanceMax(150);\r\n  }, []);\r\n\r\n  const toggleClusterCollapse = (clusterId) => {\r\n    if (collapsedClusters.includes(clusterId)) {\r\n      setCollapsedClusters(collapsedClusters.filter((id) => id !== clusterId));\r\n    } else {\r\n      setCollapsedClusters([...collapsedClusters, clusterId]);\r\n    }\r\n  };\r\n\r\n  const handleNodeClick = (node) => {\r\n    toggleClusterCollapse(node.id);\r\n    if (collapsedClusters.includes(node.id)) {\r\n      forceRef.current.zoom(3.5, 400);\r\n      forceRef.current.centerAt(node.x, node.y, 400);\r\n    }\r\n  };\r\n\r\n  const toggleCluster = (clusterId) => {\r\n    if (hiddenClusters.includes(clusterId)) {\r\n      setHiddenClusters(hiddenClusters.filter((id) => id !== clusterId));\r\n    } else {\r\n      setHiddenClusters([...hiddenClusters, clusterId]);\r\n    }\r\n    if (!collapsedClusters.includes(clusterId)) {\r\n      toggleClusterCollapse(clusterId);\r\n    }\r\n  };\r\n\r\n  const graphData = useMemo(() => {\r\n    return {\r\n      nodes: data.nodes.filter((node) => !hiddenClusters.includes(node.id)),\r\n      links: data.links\r\n    };\r\n  }, [hiddenClusters]);\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={() => {\r\n          forceRef.current.zoomToFit();\r\n          setHiddenClusters([]);\r\n          setCollapsedClusters(clusterIds);\r\n        }}\r\n      >\r\n        RESET\r\n      </button>\r\n      <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n        {clusters.map((cluster) => (\r\n          <button\r\n            key={cluster.id}\r\n            onClick={() => {\r\n              toggleCluster(cluster.id);\r\n            }}\r\n          >\r\n            Toggle {cluster.name}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      <div\r\n        style={{\r\n          border: \"1px solid gray\",\r\n          marginTop: \"20px\"\r\n        }}\r\n      >\r\n        <ForceGraph2D\r\n          width={window.innerWidth}\r\n          height={650}\r\n          ref={forceRef}\r\n          onNodeClick={handleNodeClick}\r\n          graphData={graphData}\r\n          cooldownTicks={50}\r\n          nodeRelSize={1}\r\n          onEngineStop={() => {\r\n            if (initialCenter) {\r\n              forceRef.current.zoomToFit();\r\n            }\r\n            setInitialCenter(false);\r\n          }}\r\n          nodeCanvasObjectMode={() => \"after\"}\r\n          nodeCanvasObject={(node, ctx, globalScale) => {\r\n            const label = node.name;\r\n            const fontSize = node.isClusterNode\r\n              ? 14 * (node.val / 1500)\r\n              : 14 / (globalScale * 1.2);\r\n            ctx.font = `${fontSize}px Sans-Serif`;\r\n            ctx.textAlign = \"center\";\r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillStyle = node.isClusterNode ? \"white\" : \"black\"; //node.color;\r\n            if (node.isClusterNode) {\r\n              // console.log();\r\n              const lineHeight = fontSize * 1.2;\r\n              const lines = label.split(\",\");\r\n              let x = node.x;\r\n              let y = node.y - lineHeight;\r\n              for (let i = 0; i < lines.length; ++i) {\r\n                ctx.fillText(lines[i], x, y);\r\n                y += lineHeight;\r\n              }\r\n            } else if (globalScale >= 3.5) {\r\n              ctx.fillText(label, node.x, node.y + 2.5);\r\n            }\r\n          }}\r\n          enableNodeDrag={false}\r\n          nodeVisibility={(node) => {\r\n            if (collapsedClusters.includes(node.clusterId)) {\r\n              return false;\r\n            } else return true;\r\n          }}\r\n          linkVisibility={(link) => {\r\n            if (\r\n              collapsedClusters.includes(link.source.id) &&\r\n              !link.target.isClusterNode\r\n            ) {\r\n              return false;\r\n            } else if (\r\n              hiddenClusters.includes(link.source.id) ||\r\n              hiddenClusters.includes(link.target.id)\r\n            ) {\r\n              return false;\r\n            } else return true;\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n//     const svgRef = useRef();\r\n\r\n//   useEffect(() => {\r\n//     const data = [10, 20, 30, 40, 50];\r\n\r\n//     const svg = d3.select(svgRef.current);\r\n\r\n//     svg\r\n//       .selectAll('circle')\r\n//       .data(data)\r\n//       .enter()\r\n//       .append('circle')\r\n//       .attr('cx', (d, i) => i * 100 + 25)\r\n//       .attr('cy', 70)\r\n//       .attr('r', (d) => d)\r\n//       .style('fill', 'skyblue');\r\n//   }, []);\r\n\r\n//   return <svg ref={svgRef}></svg>;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}