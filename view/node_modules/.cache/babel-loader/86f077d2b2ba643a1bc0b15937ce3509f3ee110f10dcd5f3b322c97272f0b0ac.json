{"ast":null,"code":"import { ascending, bisect } from \"d3-array\";\nimport { identity } from \"./continuous\";\nimport { initInterpolator } from \"./init\";\nexport default function sequentialQuantile() {\n  var domain = [],\n    interpolator = identity;\n  function scale(x) {\n    if (!isNaN(x = +x)) return interpolator((bisect(domain, x) - 1) / (domain.length - 1));\n  }\n  scale.domain = function (_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(ascending);\n    return scale;\n  };\n  scale.interpolator = function (_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n  scale.copy = function () {\n    return sequentialQuantile(interpolator).domain(domain);\n  };\n  return initInterpolator.apply(scale, arguments);\n}","map":{"version":3,"names":["ascending","bisect","identity","initInterpolator","sequentialQuantile","domain","interpolator","scale","x","isNaN","length","_","arguments","slice","i","n","d","push","sort","copy","apply"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/graph_model_midicine/view/node_modules/d3-scale/src/sequentialQuantile.js"],"sourcesContent":["import {ascending, bisect} from \"d3-array\";\nimport {identity} from \"./continuous\";\nimport {initInterpolator} from \"./init\";\n\nexport default function sequentialQuantile() {\n  var domain = [],\n      interpolator = identity;\n\n  function scale(x) {\n    if (!isNaN(x = +x)) return interpolator((bisect(domain, x) - 1) / (domain.length - 1));\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(ascending);\n    return scale;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.copy = function() {\n    return sequentialQuantile(interpolator).domain(domain);\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n"],"mappings":"AAAA,SAAQA,SAAS,EAAEC,MAAM,QAAO,UAAU;AAC1C,SAAQC,QAAQ,QAAO,cAAc;AACrC,SAAQC,gBAAgB,QAAO,QAAQ;AAEvC,eAAe,SAASC,kBAAkBA,CAAA,EAAG;EAC3C,IAAIC,MAAM,GAAG,EAAE;IACXC,YAAY,GAAGJ,QAAQ;EAE3B,SAASK,KAAKA,CAACC,CAAC,EAAE;IAChB,IAAI,CAACC,KAAK,CAACD,CAAC,GAAG,CAACA,CAAC,CAAC,EAAE,OAAOF,YAAY,CAAC,CAACL,MAAM,CAACI,MAAM,EAAEG,CAAC,CAAC,GAAG,CAAC,KAAKH,MAAM,CAACK,MAAM,GAAG,CAAC,CAAC,CAAC;EACxF;EAEAH,KAAK,CAACF,MAAM,GAAG,UAASM,CAAC,EAAE;IACzB,IAAI,CAACC,SAAS,CAACF,MAAM,EAAE,OAAOL,MAAM,CAACQ,KAAK,CAAC,CAAC;IAC5CR,MAAM,GAAG,EAAE;IACX,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGJ,CAAC,CAACD,MAAM,EAAEM,CAAC,EAAEF,CAAC,GAAGC,CAAC,EAAE,EAAED,CAAC,EAAE,IAAIE,CAAC,GAAGL,CAAC,CAACG,CAAC,CAAC,EAAEE,CAAC,IAAI,IAAI,IAAI,CAACP,KAAK,CAACO,CAAC,GAAG,CAACA,CAAC,CAAC,EAAEX,MAAM,CAACY,IAAI,CAACD,CAAC,CAAC;IACtGX,MAAM,CAACa,IAAI,CAAClB,SAAS,CAAC;IACtB,OAAOO,KAAK;EACd,CAAC;EAEDA,KAAK,CAACD,YAAY,GAAG,UAASK,CAAC,EAAE;IAC/B,OAAOC,SAAS,CAACF,MAAM,IAAIJ,YAAY,GAAGK,CAAC,EAAEJ,KAAK,IAAID,YAAY;EACpE,CAAC;EAEDC,KAAK,CAACY,IAAI,GAAG,YAAW;IACtB,OAAOf,kBAAkB,CAACE,YAAY,CAAC,CAACD,MAAM,CAACA,MAAM,CAAC;EACxD,CAAC;EAED,OAAOF,gBAAgB,CAACiB,KAAK,CAACb,KAAK,EAAEK,SAAS,CAAC;AACjD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}