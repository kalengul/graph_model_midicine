{"ast":null,"code":"import constant from \"./constant\";\nimport jiggle from \"./jiggle\";\nimport { quadtree } from \"d3-quadtree\";\nfunction x(d) {\n  return d.x + d.vx;\n}\nfunction y(d) {\n  return d.y + d.vy;\n}\nexport default function (radius) {\n  var nodes,\n    radii,\n    strength = 1,\n    iterations = 1;\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n  function force() {\n    var i,\n      n = nodes.length,\n      tree,\n      node,\n      xi,\n      yi,\n      ri,\n      ri2;\n    for (var k = 0; k < iterations; ++k) {\n      tree = quadtree(nodes, x, y).visitAfter(prepare);\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data,\n        rj = quad.r,\n        r = ri + rj;\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n            y = yi - data.y - data.vy,\n            l = x * x + y * y;\n          if (l < r * r) {\n            if (x === 0) x = jiggle(), l += x * x;\n            if (y === 0) y = jiggle(), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n        return;\n      }\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n  function initialize() {\n    if (!nodes) return;\n    var i,\n      n = nodes.length,\n      node;\n    radii = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n  }\n  force.initialize = function (_) {\n    nodes = _;\n    initialize();\n  };\n  force.iterations = function (_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n  force.strength = function (_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n  force.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n  return force;\n}","map":{"version":3,"names":["constant","jiggle","quadtree","x","d","vx","y","vy","radius","nodes","radii","strength","iterations","force","i","n","length","tree","node","xi","yi","ri","ri2","k","visitAfter","prepare","index","visit","apply","quad","x0","y0","x1","y1","data","rj","r","l","Math","sqrt","initialize","Array","_","arguments"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/view/node_modules/d3-force/src/collide.js"],"sourcesContent":["import constant from \"./constant\";\nimport jiggle from \"./jiggle\";\nimport {quadtree} from \"d3-quadtree\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nexport default function(radius) {\n  var nodes,\n      radii,\n      strength = 1,\n      iterations = 1;\n\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i, n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = quadtree(nodes, x, y).visitAfter(prepare);\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data, rj = quad.r, r = ri + rj;\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = yi - data.y - data.vy,\n              l = x * x + y * y;\n          if (l < r * r) {\n            if (x === 0) x = jiggle(), l += x * x;\n            if (y === 0) y = jiggle(), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n        return;\n      }\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    radii = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}