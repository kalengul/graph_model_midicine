{"ast":null,"code":"var _jsxFileName = \"C:\\\\UsersFolders\\\\Polina\\\\\\u0420\\u042D\\u0423\\\\Graph\\\\view\\\\src\\\\components\\\\graph\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport * as d3 from \"d3\";\nimport './graph.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst myData = {\n  \"nodes\": [{\n    \"id\": \"id1\",\n    \"name\": \"name1\",\n    \"val\": 1,\n    \"color\": \"#D9EDFF\"\n  }, {\n    \"id\": \"id2\",\n    \"name\": \"name2\",\n    \"val\": 10,\n    \"color\": \"#B3CFE9\"\n  }, {\n    \"id\": \"id3\",\n    \"name\": \"name3\",\n    \"val\": 1,\n    \"color\": \"#D9EDFF\"\n  }],\n  \"links\": [{\n    \"source\": \"id1\",\n    \"target\": \"id2\"\n  }, {\n    \"source\": \"id2\",\n    \"target\": \"id3\"\n  }]\n};\nconst clusterIds = myData.map(data => data.id);\nexport const GraphView = () => {\n  _s();\n  const graphRef = useRef(null);\n  const [initialCenter, setInitialCenter] = useState(true);\n  const [collapsedClusters, setCollapsedClusters] = useState(clusterIds);\n  const [hiddenClusters, setHiddenClusters] = useState([]);\n  const forceRef = useRef();\n  useEffect(() => {\n    // forceRef.current.d3Force(\"collide\", d3.forceCollide(13));\n    forceRef.current.d3Force(\"charge\").strength(-40);\n    forceRef.current.d3Force(\"link\").distance(50);\n    forceRef.current.d3Force(\"charge\").distanceMax(150);\n  }, []);\n  const toggleClusterCollapse = clusterId => {\n    if (collapsedClusters.includes(clusterId)) {\n      setCollapsedClusters(collapsedClusters.filter(id => id !== clusterId));\n    } else {\n      setCollapsedClusters([...collapsedClusters, clusterId]);\n    }\n  };\n  const handleNodeClick = node => {\n    toggleClusterCollapse(node.id);\n    if (collapsedClusters.includes(node.id)) {\n      forceRef.current.zoom(3.5, 400);\n      forceRef.current.centerAt(node.x, node.y, 400);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Graphcontainer flex jc-center\",\n    ref: graphRef,\n    children: /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n      graphData: myData,\n      width: 1105,\n      height: 500,\n      ref: forceRef,\n      onNodeClick: handleNodeClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(GraphView, \"R5kepP/brBqs9TyAvXg4zl2+dX4=\");\n_c = GraphView;\nvar _c;\n$RefreshReg$(_c, \"GraphView\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ForceGraph2D","d3","jsxDEV","_jsxDEV","myData","clusterIds","map","data","id","GraphView","_s","graphRef","initialCenter","setInitialCenter","collapsedClusters","setCollapsedClusters","hiddenClusters","setHiddenClusters","forceRef","current","d3Force","strength","distance","distanceMax","toggleClusterCollapse","clusterId","includes","filter","handleNodeClick","node","zoom","centerAt","x","y","className","ref","children","graphData","width","height","onNodeClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/view/src/components/graph/graph.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport ForceGraph2D from \"react-force-graph-2d\";\r\nimport * as d3 from \"d3\";\r\n\r\nimport './graph.css'\r\n\r\nconst myData = {\r\n    \"nodes\": [ \r\n        { \r\n          \"id\": \"id1\",\r\n          \"name\": \"name1\",\r\n          \"val\": 1,\r\n          \"color\": \"#D9EDFF\"\r\n        },\r\n        { \r\n          \"id\": \"id2\",\r\n          \"name\": \"name2\",\r\n          \"val\": 10,\r\n          \"color\": \"#B3CFE9\" \r\n        },\r\n        { \r\n            \"id\": \"id3\",\r\n            \"name\": \"name3\",\r\n            \"val\": 1,\r\n            \"color\": \"#D9EDFF\" \r\n        },\r\n    ],\r\n    \"links\": [\r\n        {\r\n            \"source\": \"id1\",\r\n            \"target\": \"id2\"\r\n        },\r\n        {\r\n            \"source\": \"id2\",\r\n            \"target\": \"id3\"\r\n        },\r\n    ]\r\n}\r\n\r\nconst clusterIds = myData.map((data) => data.id);\r\n\r\nexport const GraphView =() =>{\r\n    const graphRef = useRef(null);\r\n    const [initialCenter, setInitialCenter] = useState(true);\r\n    const [collapsedClusters, setCollapsedClusters] = useState(clusterIds);\r\n    const [hiddenClusters, setHiddenClusters] = useState([]);\r\n    const forceRef = useRef();\r\n\r\n    useEffect(() => {\r\n        // forceRef.current.d3Force(\"collide\", d3.forceCollide(13));\r\n        forceRef.current.d3Force(\"charge\").strength(-40);\r\n        forceRef.current.d3Force(\"link\").distance(50);\r\n        forceRef.current.d3Force(\"charge\").distanceMax(150);\r\n      }, []);\r\n\r\n      const toggleClusterCollapse = (clusterId) => {\r\n        if (collapsedClusters.includes(clusterId)) {\r\n          setCollapsedClusters(collapsedClusters.filter((id) => id !== clusterId));\r\n        } else {\r\n          setCollapsedClusters([...collapsedClusters, clusterId]);\r\n        }\r\n      };\r\n    \r\n      const handleNodeClick = (node) => {\r\n        toggleClusterCollapse(node.id);\r\n        if (collapsedClusters.includes(node.id)) {\r\n          forceRef.current.zoom(3.5, 400);\r\n          forceRef.current.centerAt(node.x, node.y, 400);\r\n        }\r\n      };\r\n\r\n    return(\r\n        <div className='Graphcontainer flex jc-center' ref={graphRef}>\r\n            <ForceGraph2D\r\n                graphData={myData}\r\n                width = {1105}\r\n                height = {500}\r\n                ref={forceRef}\r\n                onNodeClick={handleNodeClick}\r\n            />\r\n        </div>\r\n    )\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAO,KAAKC,EAAE,MAAM,IAAI;AAExB,OAAO,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,MAAM,GAAG;EACX,OAAO,EAAE,CACL;IACE,IAAI,EAAE,KAAK;IACX,MAAM,EAAE,OAAO;IACf,KAAK,EAAE,CAAC;IACR,OAAO,EAAE;EACX,CAAC,EACD;IACE,IAAI,EAAE,KAAK;IACX,MAAM,EAAE,OAAO;IACf,KAAK,EAAE,EAAE;IACT,OAAO,EAAE;EACX,CAAC,EACD;IACI,IAAI,EAAE,KAAK;IACX,MAAM,EAAE,OAAO;IACf,KAAK,EAAE,CAAC;IACR,OAAO,EAAE;EACb,CAAC,CACJ;EACD,OAAO,EAAE,CACL;IACI,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE;EACd,CAAC,EACD;IACI,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE;EACd,CAAC;AAET,CAAC;AAED,MAAMC,UAAU,GAAGD,MAAM,CAACE,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,CAAC;AAEhD,OAAO,MAAMC,SAAS,GAAEA,CAAA,KAAK;EAAAC,EAAA;EACzB,MAAMC,QAAQ,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACiB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGlB,QAAQ,CAACQ,UAAU,CAAC;EACtE,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAMqB,QAAQ,GAAGnB,MAAM,CAAC,CAAC;EAEzBD,SAAS,CAAC,MAAM;IACZ;IACAoB,QAAQ,CAACC,OAAO,CAACC,OAAO,CAAC,QAAQ,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC;IAChDH,QAAQ,CAACC,OAAO,CAACC,OAAO,CAAC,MAAM,CAAC,CAACE,QAAQ,CAAC,EAAE,CAAC;IAC7CJ,QAAQ,CAACC,OAAO,CAACC,OAAO,CAAC,QAAQ,CAAC,CAACG,WAAW,CAAC,GAAG,CAAC;EACrD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,qBAAqB,GAAIC,SAAS,IAAK;IAC3C,IAAIX,iBAAiB,CAACY,QAAQ,CAACD,SAAS,CAAC,EAAE;MACzCV,oBAAoB,CAACD,iBAAiB,CAACa,MAAM,CAAEnB,EAAE,IAAKA,EAAE,KAAKiB,SAAS,CAAC,CAAC;IAC1E,CAAC,MAAM;MACLV,oBAAoB,CAAC,CAAC,GAAGD,iBAAiB,EAAEW,SAAS,CAAC,CAAC;IACzD;EACF,CAAC;EAED,MAAMG,eAAe,GAAIC,IAAI,IAAK;IAChCL,qBAAqB,CAACK,IAAI,CAACrB,EAAE,CAAC;IAC9B,IAAIM,iBAAiB,CAACY,QAAQ,CAACG,IAAI,CAACrB,EAAE,CAAC,EAAE;MACvCU,QAAQ,CAACC,OAAO,CAACW,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC;MAC/BZ,QAAQ,CAACC,OAAO,CAACY,QAAQ,CAACF,IAAI,CAACG,CAAC,EAAEH,IAAI,CAACI,CAAC,EAAE,GAAG,CAAC;IAChD;EACF,CAAC;EAEH,oBACI9B,OAAA;IAAK+B,SAAS,EAAC,+BAA+B;IAACC,GAAG,EAAExB,QAAS;IAAAyB,QAAA,eACzDjC,OAAA,CAACH,YAAY;MACTqC,SAAS,EAAEjC,MAAO;MAClBkC,KAAK,EAAI,IAAK;MACdC,MAAM,EAAI,GAAI;MACdJ,GAAG,EAAEjB,QAAS;MACdsB,WAAW,EAAEZ;IAAgB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAAlC,EAAA,CAzCYD,SAAS;AAAAoC,EAAA,GAATpC,SAAS;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}