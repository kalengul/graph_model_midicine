{"ast":null,"code":"import { Pass } from './Pass.js';\nclass MaskPass extends Pass {\n  constructor(scene, camera) {\n    super();\n    this.scene = scene;\n    this.camera = camera;\n    this.clear = true;\n    this.needsSwap = false;\n    this.inverse = false;\n  }\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n    const context = renderer.getContext();\n    const state = renderer.state;\n\n    // don't update color or depth\n\n    state.buffers.color.setMask(false);\n    state.buffers.depth.setMask(false);\n\n    // lock buffers\n\n    state.buffers.color.setLocked(true);\n    state.buffers.depth.setLocked(true);\n\n    // set up stencil\n\n    let writeValue, clearValue;\n    if (this.inverse) {\n      writeValue = 0;\n      clearValue = 1;\n    } else {\n      writeValue = 1;\n      clearValue = 0;\n    }\n    state.buffers.stencil.setTest(true);\n    state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n    state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n    state.buffers.stencil.setClear(clearValue);\n    state.buffers.stencil.setLocked(true);\n\n    // draw into the stencil buffer\n\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera);\n    renderer.setRenderTarget(writeBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera);\n\n    // unlock color and depth buffer and make them writable for subsequent rendering/clearing\n\n    state.buffers.color.setLocked(false);\n    state.buffers.depth.setLocked(false);\n    state.buffers.color.setMask(true);\n    state.buffers.depth.setMask(true);\n\n    // only render where stencil is set to 1\n\n    state.buffers.stencil.setLocked(false);\n    state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n    state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n    state.buffers.stencil.setLocked(true);\n  }\n}\nclass ClearMaskPass extends Pass {\n  constructor() {\n    super();\n    this.needsSwap = false;\n  }\n  render(renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */) {\n    renderer.state.buffers.stencil.setLocked(false);\n    renderer.state.buffers.stencil.setTest(false);\n  }\n}\nexport { MaskPass, ClearMaskPass };","map":{"version":3,"names":["Pass","MaskPass","constructor","scene","camera","clear","needsSwap","inverse","render","renderer","writeBuffer","readBuffer","context","getContext","state","buffers","color","setMask","depth","setLocked","writeValue","clearValue","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","setRenderTarget","EQUAL","KEEP","ClearMaskPass"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/view/node_modules/three/examples/jsm/postprocessing/MaskPass.js"],"sourcesContent":["import { Pass } from './Pass.js';\n\nclass MaskPass extends Pass {\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer and make them writable for subsequent rendering/clearing\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\tstate.buffers.color.setMask( true );\n\t\tstate.buffers.depth.setMask( true );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\nclass ClearMaskPass extends Pass {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.needsSwap = false;\n\n\t}\n\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}