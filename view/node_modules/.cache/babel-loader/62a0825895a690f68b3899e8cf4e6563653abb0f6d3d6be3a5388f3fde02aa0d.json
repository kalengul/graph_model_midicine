{"ast":null,"code":"var _jsxFileName = \"C:\\\\UsersFolders\\\\Polina\\\\\\u0420\\u042D\\u0423\\\\Graph\\\\view\\\\src\\\\components\\\\graph\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport * as d3 from \"d3\";\nimport { Data } from \"./data.js\";\nimport './graph.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst myData2 = {\n  \"nodes\": [{\n    \"id\": \"id1\",\n    \"name\": \"name1\",\n    \"val\": 1,\n    \"color\": \"#D9EDFF\"\n  }, {\n    \"id\": \"id2\",\n    \"name\": \"name2\",\n    \"val\": 10,\n    \"color\": \"#B3CFE9\"\n  }, {\n    \"id\": \"id3\",\n    \"name\": \"name3\",\n    \"val\": 1,\n    \"color\": \"#D9EDFF\"\n  }],\n  \"links\": [{\n    \"source\": \"id1\",\n    \"target\": \"id2\"\n  }, {\n    \"source\": \"id2\",\n    \"target\": \"id3\"\n  }]\n};\nconst myData = Data;\nexport const GraphView = () => {\n  _s();\n  const graphRef = useRef(null);\n  const forceRef = useRef();\n  useEffect(() => {\n    // forceRef.current.d3Force(\"collide\", d3.forceCollide(13));\n    forceRef.current.d3Force(\"charge\").strength(-90);\n    forceRef.current.d3Force(\"link\").distance(100);\n    forceRef.current.d3Force(\"charge\").distanceMax(250);\n  }, []);\n\n  //Отображение узлов\n  const CanvasHandler = (node, ctx, globalScale) => {\n    const label = node.id; //Подпись узла\n    const fontSize = 9;\n    // const fontSize = node.isClusterNode //Если узел корневой, то размер 1 иначе другой\n    //   ? 14 * (node.val / 1500)\n    //   : 14 / (globalScale * 1.2);\n    ctx.font = `${fontSize}px Sans-Serif`;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillStyle = 'black'; //node.isClusterNode ? \"white\" : \"black\"; //Если корень, то цвет белый иначе черный\n    // if (node.isClusterNode) {\n    //   // console.log();\n    //    const lineHeight = fontSize * 1.2;\n    //   const lines = label.split(\",\");\n    //   let x = node.x;\n    //   let y = node.y - lineHeight;\n    //   for (let i = 0; i < lines.length; ++i) {\n    //     ctx.fillText(lines[i], x, y);\n    //     y += lineHeight;\n    //   }\n    // } else if (globalScale >= 3.5) {\n    ctx.fillText(label, node.x, node.y + 1.5);\n    //}\n  };\n\n  //Наведение на узел графа\n  const HoverHandler = () => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Graphcontainer flex jc-center\",\n    ref: graphRef,\n    children: /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n      ref: forceRef,\n      graphData: Data //Данные для отображения графа\n\n      //Размеры окна (Посмотреть как сделать адаптивность в зависимости от ширены экрана)\n      ,\n      width: 1105,\n      height: 500,\n      nodeRelSize: 10 //Размер узлов\n      ,\n\n      nodeCanvasObjectMode: () => \"after\" //Сначала отрсовка узла по умолчанию, затем применение nodeCanvasObject для его доработки\n      ,\n      nodeCanvasObject: CanvasHandler,\n      onNodeHover: HoverHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n_s(GraphView, \"b/ySJWiewjWb4EyaDm6U6o1BL1k=\");\n_c = GraphView;\nvar _c;\n$RefreshReg$(_c, \"GraphView\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ForceGraph2D","d3","Data","jsxDEV","_jsxDEV","myData2","myData","GraphView","_s","graphRef","forceRef","current","d3Force","strength","distance","distanceMax","CanvasHandler","node","ctx","globalScale","label","id","fontSize","font","textAlign","textBaseline","fillStyle","fillText","x","y","HoverHandler","className","ref","children","graphData","width","height","nodeRelSize","nodeCanvasObjectMode","nodeCanvasObject","onNodeHover","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/view/src/components/graph/graph.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport ForceGraph2D from \"react-force-graph-2d\";\r\nimport * as d3 from \"d3\";\r\n\r\nimport {Data} from \"./data.js\"\r\n\r\nimport './graph.css'\r\n\r\nconst myData2 = {\r\n    \"nodes\": [ \r\n        { \r\n          \"id\": \"id1\",\r\n          \"name\": \"name1\",\r\n          \"val\": 1,\r\n          \"color\": \"#D9EDFF\"\r\n        },\r\n        { \r\n          \"id\": \"id2\",\r\n          \"name\": \"name2\",\r\n          \"val\": 10,\r\n          \"color\": \"#B3CFE9\" \r\n        },\r\n        { \r\n            \"id\": \"id3\",\r\n            \"name\": \"name3\",\r\n            \"val\": 1,\r\n            \"color\": \"#D9EDFF\" \r\n        },\r\n    ],\r\n    \"links\": [\r\n        {\r\n            \"source\": \"id1\",\r\n            \"target\": \"id2\"\r\n        },\r\n        {\r\n            \"source\": \"id2\",\r\n            \"target\": \"id3\"\r\n        },\r\n    ]\r\n}\r\n\r\nconst myData = Data\r\n\r\nexport const GraphView =() =>{\r\n    const graphRef = useRef(null);\r\n    const forceRef = useRef();\r\n\r\n    useEffect(() => {\r\n        // forceRef.current.d3Force(\"collide\", d3.forceCollide(13));\r\n        forceRef.current.d3Force(\"charge\").strength(-90);\r\n        forceRef.current.d3Force(\"link\").distance(100);\r\n        forceRef.current.d3Force(\"charge\").distanceMax(250);\r\n      }, []);\r\n\r\n\r\n    //Отображение узлов\r\n    const CanvasHandler = (node, ctx, globalScale) => {\r\n\r\n        const label = node.id; //Подпись узла\r\n        const fontSize = 9\r\n        // const fontSize = node.isClusterNode //Если узел корневой, то размер 1 иначе другой\r\n        //   ? 14 * (node.val / 1500)\r\n        //   : 14 / (globalScale * 1.2);\r\n        ctx.font = `${fontSize}px Sans-Serif`;\r\n        ctx.textAlign = \"center\";\r\n        ctx.textBaseline = \"middle\";\r\n        ctx.fillStyle = 'black'//node.isClusterNode ? \"white\" : \"black\"; //Если корень, то цвет белый иначе черный\r\n        // if (node.isClusterNode) {\r\n        //   // console.log();\r\n        //    const lineHeight = fontSize * 1.2;\r\n        //   const lines = label.split(\",\");\r\n        //   let x = node.x;\r\n        //   let y = node.y - lineHeight;\r\n        //   for (let i = 0; i < lines.length; ++i) {\r\n        //     ctx.fillText(lines[i], x, y);\r\n        //     y += lineHeight;\r\n        //   }\r\n        // } else if (globalScale >= 3.5) {\r\n          ctx.fillText(label, node.x, node.y + 1.5);\r\n        //}\r\n      }\r\n\r\n    //Наведение на узел графа\r\n    const HoverHandler = () =>{\r\n\r\n    }\r\n    \r\n    \r\n    return(\r\n        <div className='Graphcontainer flex jc-center' ref={graphRef}>\r\n            <ForceGraph2D\r\n                ref={forceRef}\r\n                graphData={Data} //Данные для отображения графа\r\n\r\n                //Размеры окна (Посмотреть как сделать адаптивность в зависимости от ширены экрана)\r\n                width = {1105} \r\n                height = {500}\r\n\r\n                \r\n                nodeRelSize={10} //Размер узлов\r\n\r\n                nodeCanvasObjectMode={() => \"after\"} //Сначала отрсовка узла по умолчанию, затем применение nodeCanvasObject для его доработки\r\n                nodeCanvasObject={CanvasHandler}\r\n\r\n                onNodeHover = {HoverHandler}\r\n            />\r\n        </div>\r\n    )\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}