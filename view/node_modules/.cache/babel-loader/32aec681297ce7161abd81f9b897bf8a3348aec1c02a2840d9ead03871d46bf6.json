{"ast":null,"code":"import { ShaderMaterial, UniformsUtils } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nclass ShaderPass extends Pass {\n  constructor(shader, textureID) {\n    super();\n    this.textureID = textureID !== undefined ? textureID : 'tDiffuse';\n    if (shader instanceof ShaderMaterial) {\n      this.uniforms = shader.uniforms;\n      this.material = shader;\n    } else if (shader) {\n      this.uniforms = UniformsUtils.clone(shader.uniforms);\n      this.material = new ShaderMaterial({\n        name: shader.name !== undefined ? shader.name : 'unspecified',\n        defines: Object.assign({}, shader.defines),\n        uniforms: this.uniforms,\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader\n      });\n    }\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n    this.fsQuad.material = this.material;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n      if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n      this.fsQuad.render(renderer);\n    }\n  }\n  dispose() {\n    this.material.dispose();\n    this.fsQuad.dispose();\n  }\n}\nexport { ShaderPass };","map":{"version":3,"names":["ShaderMaterial","UniformsUtils","Pass","FullScreenQuad","ShaderPass","constructor","shader","textureID","undefined","uniforms","material","clone","name","defines","Object","assign","vertexShader","fragmentShader","fsQuad","render","renderer","writeBuffer","readBuffer","value","texture","renderToScreen","setRenderTarget","clear","autoClearColor","autoClearDepth","autoClearStencil","dispose"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/view/node_modules/three/examples/jsm/postprocessing/ShaderPass.js"],"sourcesContent":["import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tname: ( shader.name !== undefined ) ? shader.name : 'unspecified',\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.material.dispose();\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n}\n\nexport { ShaderPass };\n"],"mappings":"AAAA,SACCA,cAAc,EACdC,aAAa,QACP,OAAO;AACd,SAASC,IAAI,EAAEC,cAAc,QAAQ,WAAW;AAEhD,MAAMC,UAAU,SAASF,IAAI,CAAC;EAE7BG,WAAWA,CAAEC,MAAM,EAAEC,SAAS,EAAG;IAEhC,KAAK,CAAC,CAAC;IAEP,IAAI,CAACA,SAAS,GAAKA,SAAS,KAAKC,SAAS,GAAKD,SAAS,GAAG,UAAU;IAErE,IAAKD,MAAM,YAAYN,cAAc,EAAG;MAEvC,IAAI,CAACS,QAAQ,GAAGH,MAAM,CAACG,QAAQ;MAE/B,IAAI,CAACC,QAAQ,GAAGJ,MAAM;IAEvB,CAAC,MAAM,IAAKA,MAAM,EAAG;MAEpB,IAAI,CAACG,QAAQ,GAAGR,aAAa,CAACU,KAAK,CAAEL,MAAM,CAACG,QAAS,CAAC;MAEtD,IAAI,CAACC,QAAQ,GAAG,IAAIV,cAAc,CAAE;QAEnCY,IAAI,EAAIN,MAAM,CAACM,IAAI,KAAKJ,SAAS,GAAKF,MAAM,CAACM,IAAI,GAAG,aAAa;QACjEC,OAAO,EAAEC,MAAM,CAACC,MAAM,CAAE,CAAC,CAAC,EAAET,MAAM,CAACO,OAAQ,CAAC;QAC5CJ,QAAQ,EAAE,IAAI,CAACA,QAAQ;QACvBO,YAAY,EAAEV,MAAM,CAACU,YAAY;QACjCC,cAAc,EAAEX,MAAM,CAACW;MAExB,CAAE,CAAC;IAEJ;IAEA,IAAI,CAACC,MAAM,GAAG,IAAIf,cAAc,CAAE,IAAI,CAACO,QAAS,CAAC;EAElD;EAEAS,MAAMA,CAAEC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,CAAC,8BAA+B;IAExE,IAAK,IAAI,CAACb,QAAQ,CAAE,IAAI,CAACF,SAAS,CAAE,EAAG;MAEtC,IAAI,CAACE,QAAQ,CAAE,IAAI,CAACF,SAAS,CAAE,CAACgB,KAAK,GAAGD,UAAU,CAACE,OAAO;IAE3D;IAEA,IAAI,CAACN,MAAM,CAACR,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAEpC,IAAK,IAAI,CAACe,cAAc,EAAG;MAE1BL,QAAQ,CAACM,eAAe,CAAE,IAAK,CAAC;MAChC,IAAI,CAACR,MAAM,CAACC,MAAM,CAAEC,QAAS,CAAC;IAE/B,CAAC,MAAM;MAENA,QAAQ,CAACM,eAAe,CAAEL,WAAY,CAAC;MACvC;MACA,IAAK,IAAI,CAACM,KAAK,EAAGP,QAAQ,CAACO,KAAK,CAAEP,QAAQ,CAACQ,cAAc,EAAER,QAAQ,CAACS,cAAc,EAAET,QAAQ,CAACU,gBAAiB,CAAC;MAC/G,IAAI,CAACZ,MAAM,CAACC,MAAM,CAAEC,QAAS,CAAC;IAE/B;EAED;EAEAW,OAAOA,CAAA,EAAG;IAET,IAAI,CAACrB,QAAQ,CAACqB,OAAO,CAAC,CAAC;IAEvB,IAAI,CAACb,MAAM,CAACa,OAAO,CAAC,CAAC;EAEtB;AAED;AAEA,SAAS3B,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}