{"ast":null,"code":"import { AmbientLight, AnimationClip, Bone, BufferGeometry, ClampToEdgeWrapping, Color, DirectionalLight, EquirectangularReflectionMapping, Euler, FileLoader, Float32BufferAttribute, Group, Line, LineBasicMaterial, Loader, LoaderUtils, MathUtils, Matrix3, Matrix4, Mesh, MeshLambertMaterial, MeshPhongMaterial, NumberKeyframeTrack, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, PropertyBinding, Quaternion, QuaternionKeyframeTrack, RepeatWrapping, Skeleton, SkinnedMesh, SpotLight, Texture, TextureLoader, Uint16BufferAttribute, Vector2, Vector3, Vector4, VectorKeyframeTrack, SRGBColorSpace, ShapeUtils } from 'three';\nimport * as fflate from '../libs/fflate.module.js';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * Binary format specification:\n *\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nlet fbxTree;\nlet connections;\nlet sceneGraph;\nclass FBXLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(FBXBuffer, path) {\n    if (isFbxFormatBinary(FBXBuffer)) {\n      fbxTree = new BinaryParser().parse(FBXBuffer);\n    } else {\n      const FBXText = convertArrayBufferToString(FBXBuffer);\n      if (!isFbxFormatASCII(FBXText)) {\n        throw new Error('THREE.FBXLoader: Unknown format.');\n      }\n      if (getFbxVersion(FBXText) < 7000) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n      }\n      fbxTree = new TextParser().parse(FBXText);\n    }\n\n    // console.log( fbxTree );\n\n    const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n  }\n}\n\n// Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\nclass FBXTreeParser {\n  constructor(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n  parse() {\n    connections = this.parseConnections();\n    const images = this.parseImages();\n    const textures = this.parseTextures(images);\n    const materials = this.parseMaterials(textures);\n    const deformers = this.parseDeformers();\n    const geometryMap = new GeometryParser().parse(deformers);\n    this.parseScene(deformers, geometryMap, materials);\n    return sceneGraph;\n  }\n\n  // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n  parseConnections() {\n    const connectionMap = new Map();\n    if ('Connections' in fbxTree) {\n      const rawConnections = fbxTree.Connections.connections;\n      rawConnections.forEach(function (rawConnection) {\n        const fromID = rawConnection[0];\n        const toID = rawConnection[1];\n        const relationship = rawConnection[2];\n        if (!connectionMap.has(fromID)) {\n          connectionMap.set(fromID, {\n            parents: [],\n            children: []\n          });\n        }\n        const parentRelationship = {\n          ID: toID,\n          relationship: relationship\n        };\n        connectionMap.get(fromID).parents.push(parentRelationship);\n        if (!connectionMap.has(toID)) {\n          connectionMap.set(toID, {\n            parents: [],\n            children: []\n          });\n        }\n        const childRelationship = {\n          ID: fromID,\n          relationship: relationship\n        };\n        connectionMap.get(toID).children.push(childRelationship);\n      });\n    }\n    return connectionMap;\n  }\n\n  // Parse FBXTree.Objects.Video for embedded image data\n  // These images are connected to textures in FBXTree.Objects.Textures\n  // via FBXTree.Connections.\n  parseImages() {\n    const images = {};\n    const blobs = {};\n    if ('Video' in fbxTree.Objects) {\n      const videoNodes = fbxTree.Objects.Video;\n      for (const nodeID in videoNodes) {\n        const videoNode = videoNodes[nodeID];\n        const id = parseInt(nodeID);\n        images[id] = videoNode.RelativeFilename || videoNode.Filename;\n\n        // raw image data is in videoNode.Content\n        if ('Content' in videoNode) {\n          const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n          const base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n          if (arrayBufferContent || base64Content) {\n            const image = this.parseImage(videoNodes[nodeID]);\n            blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n          }\n        }\n      }\n    }\n    for (const id in images) {\n      const filename = images[id];\n      if (blobs[filename] !== undefined) images[id] = blobs[filename];else images[id] = images[id].split('\\\\').pop();\n    }\n    return images;\n  }\n\n  // Parse embedded image data in FBXTree.Video.Content\n  parseImage(videoNode) {\n    const content = videoNode.Content;\n    const fileName = videoNode.RelativeFilename || videoNode.Filename;\n    const extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n    let type;\n    switch (extension) {\n      case 'bmp':\n        type = 'image/bmp';\n        break;\n      case 'jpg':\n      case 'jpeg':\n        type = 'image/jpeg';\n        break;\n      case 'png':\n        type = 'image/png';\n        break;\n      case 'tif':\n        type = 'image/tiff';\n        break;\n      case 'tga':\n        if (this.manager.getHandler('.tga') === null) {\n          console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n        }\n        type = 'image/tga';\n        break;\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n        return;\n    }\n    if (typeof content === 'string') {\n      // ASCII format\n\n      return 'data:' + type + ';base64,' + content;\n    } else {\n      // Binary Format\n\n      const array = new Uint8Array(content);\n      return window.URL.createObjectURL(new Blob([array], {\n        type: type\n      }));\n    }\n  }\n\n  // Parse nodes in FBXTree.Objects.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.Video\n  parseTextures(images) {\n    const textureMap = new Map();\n    if ('Texture' in fbxTree.Objects) {\n      const textureNodes = fbxTree.Objects.Texture;\n      for (const nodeID in textureNodes) {\n        const texture = this.parseTexture(textureNodes[nodeID], images);\n        textureMap.set(parseInt(nodeID), texture);\n      }\n    }\n    return textureMap;\n  }\n\n  // Parse individual node in FBXTree.Objects.Texture\n  parseTexture(textureNode, images) {\n    const texture = this.loadTexture(textureNode, images);\n    texture.ID = textureNode.id;\n    texture.name = textureNode.attrName;\n    const wrapModeU = textureNode.WrapModeU;\n    const wrapModeV = textureNode.WrapModeV;\n    const valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n    const valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n\n    // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n    // 0: repeat(default), 1: clamp\n\n    texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    if ('Scaling' in textureNode) {\n      const values = textureNode.Scaling.value;\n      texture.repeat.x = values[0];\n      texture.repeat.y = values[1];\n    }\n    if ('Translation' in textureNode) {\n      const values = textureNode.Translation.value;\n      texture.offset.x = values[0];\n      texture.offset.y = values[1];\n    }\n    return texture;\n  }\n\n  // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n  loadTexture(textureNode, images) {\n    let fileName;\n    const currentPath = this.textureLoader.path;\n    const children = connections.get(textureNode.id).children;\n    if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n      fileName = images[children[0].ID];\n      if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n        this.textureLoader.setPath(undefined);\n      }\n    }\n    let texture;\n    const extension = textureNode.FileName.slice(-3).toLowerCase();\n    if (extension === 'tga') {\n      const loader = this.manager.getHandler('.tga');\n      if (loader === null) {\n        console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        loader.setPath(this.textureLoader.path);\n        texture = loader.load(fileName);\n      }\n    } else if (extension === 'dds') {\n      const loader = this.manager.getHandler('.dds');\n      if (loader === null) {\n        console.warn('FBXLoader: DDS loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        loader.setPath(this.textureLoader.path);\n        texture = loader.load(fileName);\n      }\n    } else if (extension === 'psd') {\n      console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n      texture = new Texture();\n    } else {\n      texture = this.textureLoader.load(fileName);\n    }\n    this.textureLoader.setPath(currentPath);\n    return texture;\n  }\n\n  // Parse nodes in FBXTree.Objects.Material\n  parseMaterials(textureMap) {\n    const materialMap = new Map();\n    if ('Material' in fbxTree.Objects) {\n      const materialNodes = fbxTree.Objects.Material;\n      for (const nodeID in materialNodes) {\n        const material = this.parseMaterial(materialNodes[nodeID], textureMap);\n        if (material !== null) materialMap.set(parseInt(nodeID), material);\n      }\n    }\n    return materialMap;\n  }\n\n  // Parse single node in FBXTree.Objects.Material\n  // Materials are connected to texture maps in FBXTree.Objects.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n  parseMaterial(materialNode, textureMap) {\n    const ID = materialNode.id;\n    const name = materialNode.attrName;\n    let type = materialNode.ShadingModel;\n\n    // Case where FBX wraps shading model in property object.\n    if (typeof type === 'object') {\n      type = type.value;\n    }\n\n    // Ignore unused materials which don't have any connections.\n    if (!connections.has(ID)) return null;\n    const parameters = this.parseParameters(materialNode, textureMap, ID);\n    let material;\n    switch (type.toLowerCase()) {\n      case 'phong':\n        material = new MeshPhongMaterial();\n        break;\n      case 'lambert':\n        material = new MeshLambertMaterial();\n        break;\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n        material = new MeshPhongMaterial();\n        break;\n    }\n    material.setValues(parameters);\n    material.name = name;\n    return material;\n  }\n\n  // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n  parseParameters(materialNode, textureMap, ID) {\n    const parameters = {};\n    if (materialNode.BumpFactor) {\n      parameters.bumpScale = materialNode.BumpFactor.value;\n    }\n    if (materialNode.Diffuse) {\n      parameters.color = new Color().fromArray(materialNode.Diffuse.value).convertSRGBToLinear();\n    } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n      // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n      parameters.color = new Color().fromArray(materialNode.DiffuseColor.value).convertSRGBToLinear();\n    }\n    if (materialNode.DisplacementFactor) {\n      parameters.displacementScale = materialNode.DisplacementFactor.value;\n    }\n    if (materialNode.Emissive) {\n      parameters.emissive = new Color().fromArray(materialNode.Emissive.value).convertSRGBToLinear();\n    } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n      // The blender exporter exports emissive color here instead of in materialNode.Emissive\n      parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value).convertSRGBToLinear();\n    }\n    if (materialNode.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n    }\n    if (materialNode.Opacity) {\n      parameters.opacity = parseFloat(materialNode.Opacity.value);\n    }\n    if (parameters.opacity < 1.0) {\n      parameters.transparent = true;\n    }\n    if (materialNode.ReflectionFactor) {\n      parameters.reflectivity = materialNode.ReflectionFactor.value;\n    }\n    if (materialNode.Shininess) {\n      parameters.shininess = materialNode.Shininess.value;\n    }\n    if (materialNode.Specular) {\n      parameters.specular = new Color().fromArray(materialNode.Specular.value).convertSRGBToLinear();\n    } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n      // The blender exporter exports specular color here instead of in materialNode.Specular\n      parameters.specular = new Color().fromArray(materialNode.SpecularColor.value).convertSRGBToLinear();\n    }\n    const scope = this;\n    connections.get(ID).children.forEach(function (child) {\n      const type = child.relationship;\n      switch (type) {\n        case 'Bump':\n          parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case 'Maya|TEX_ao_map':\n          parameters.aoMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case 'DiffuseColor':\n        case 'Maya|TEX_color_map':\n          parameters.map = scope.getTexture(textureMap, child.ID);\n          if (parameters.map !== undefined) {\n            parameters.map.colorSpace = SRGBColorSpace;\n          }\n          break;\n        case 'DisplacementColor':\n          parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case 'EmissiveColor':\n          parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.emissiveMap !== undefined) {\n            parameters.emissiveMap.colorSpace = SRGBColorSpace;\n          }\n          break;\n        case 'NormalMap':\n        case 'Maya|TEX_normal_map':\n          parameters.normalMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case 'ReflectionColor':\n          parameters.envMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.envMap !== undefined) {\n            parameters.envMap.mapping = EquirectangularReflectionMapping;\n            parameters.envMap.colorSpace = SRGBColorSpace;\n          }\n          break;\n        case 'SpecularColor':\n          parameters.specularMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.specularMap !== undefined) {\n            parameters.specularMap.colorSpace = SRGBColorSpace;\n          }\n          break;\n        case 'TransparentColor':\n        case 'TransparencyFactor':\n          parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n          parameters.transparent = true;\n          break;\n        case 'AmbientColor':\n        case 'ShininessExponent': // AKA glossiness map\n        case 'SpecularFactor': // AKA specularLevel\n        case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n        default:\n          console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n          break;\n      }\n    });\n    return parameters;\n  }\n\n  // get a texture from the textureMap for use by a material.\n  getTexture(textureMap, id) {\n    // if the texture is a layered texture, just use the first layer and issue a warning\n    if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n      console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n      id = connections.get(id).children[0].ID;\n    }\n    return textureMap.get(id);\n  }\n\n  // Parse nodes in FBXTree.Objects.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n  parseDeformers() {\n    const skeletons = {};\n    const morphTargets = {};\n    if ('Deformer' in fbxTree.Objects) {\n      const DeformerNodes = fbxTree.Objects.Deformer;\n      for (const nodeID in DeformerNodes) {\n        const deformerNode = DeformerNodes[nodeID];\n        const relationships = connections.get(parseInt(nodeID));\n        if (deformerNode.attrType === 'Skin') {\n          const skeleton = this.parseSkeleton(relationships, DeformerNodes);\n          skeleton.ID = nodeID;\n          if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n          skeleton.geometryID = relationships.parents[0].ID;\n          skeletons[nodeID] = skeleton;\n        } else if (deformerNode.attrType === 'BlendShape') {\n          const morphTarget = {\n            id: nodeID\n          };\n          morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n          morphTarget.id = nodeID;\n          if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n          morphTargets[nodeID] = morphTarget;\n        }\n      }\n    }\n    return {\n      skeletons: skeletons,\n      morphTargets: morphTargets\n    };\n  }\n\n  // Parse single nodes in FBXTree.Objects.Deformer\n  // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n  // Each skin node represents a skeleton and each cluster node represents a bone\n  parseSkeleton(relationships, deformerNodes) {\n    const rawBones = [];\n    relationships.children.forEach(function (child) {\n      const boneNode = deformerNodes[child.ID];\n      if (boneNode.attrType !== 'Cluster') return;\n      const rawBone = {\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transformLink: new Matrix4().fromArray(boneNode.TransformLink.a)\n        // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n        // linkMode: boneNode.Mode,\n      };\n      if ('Indexes' in boneNode) {\n        rawBone.indices = boneNode.Indexes.a;\n        rawBone.weights = boneNode.Weights.a;\n      }\n      rawBones.push(rawBone);\n    });\n    return {\n      rawBones: rawBones,\n      bones: []\n    };\n  }\n\n  // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n  parseMorphTargets(relationships, deformerNodes) {\n    const rawMorphTargets = [];\n    for (let i = 0; i < relationships.children.length; i++) {\n      const child = relationships.children[i];\n      const morphTargetNode = deformerNodes[child.ID];\n      const rawMorphTarget = {\n        name: morphTargetNode.attrName,\n        initialWeight: morphTargetNode.DeformPercent,\n        id: morphTargetNode.id,\n        fullWeights: morphTargetNode.FullWeights.a\n      };\n      if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n      rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n        return child.relationship === undefined;\n      })[0].ID;\n      rawMorphTargets.push(rawMorphTarget);\n    }\n    return rawMorphTargets;\n  }\n\n  // create the main Group() to be returned by the loader\n  parseScene(deformers, geometryMap, materialMap) {\n    sceneGraph = new Group();\n    const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n    const modelNodes = fbxTree.Objects.Model;\n    const scope = this;\n    modelMap.forEach(function (model) {\n      const modelNode = modelNodes[model.ID];\n      scope.setLookAtProperties(model, modelNode);\n      const parentConnections = connections.get(model.ID).parents;\n      parentConnections.forEach(function (connection) {\n        const parent = modelMap.get(connection.ID);\n        if (parent !== undefined) parent.add(model);\n      });\n      if (model.parent === null) {\n        sceneGraph.add(model);\n      }\n    });\n    this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n    this.addGlobalSceneSettings();\n    sceneGraph.traverse(function (node) {\n      if (node.userData.transformData) {\n        if (node.parent) {\n          node.userData.transformData.parentMatrix = node.parent.matrix;\n          node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n        }\n        const transform = generateTransform(node.userData.transformData);\n        node.applyMatrix4(transform);\n        node.updateWorldMatrix();\n      }\n    });\n    const animations = new AnimationParser().parse();\n\n    // if all the models where already combined in a single group, just return that\n    if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n      sceneGraph.children[0].animations = animations;\n      sceneGraph = sceneGraph.children[0];\n    }\n    sceneGraph.animations = animations;\n  }\n\n  // parse nodes in FBXTree.Objects.Model\n  parseModels(skeletons, geometryMap, materialMap) {\n    const modelMap = new Map();\n    const modelNodes = fbxTree.Objects.Model;\n    for (const nodeID in modelNodes) {\n      const id = parseInt(nodeID);\n      const node = modelNodes[nodeID];\n      const relationships = connections.get(id);\n      let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n      if (!model) {\n        switch (node.attrType) {\n          case 'Camera':\n            model = this.createCamera(relationships);\n            break;\n          case 'Light':\n            model = this.createLight(relationships);\n            break;\n          case 'Mesh':\n            model = this.createMesh(relationships, geometryMap, materialMap);\n            break;\n          case 'NurbsCurve':\n            model = this.createCurve(relationships, geometryMap);\n            break;\n          case 'LimbNode':\n          case 'Root':\n            model = new Bone();\n            break;\n          case 'Null':\n          default:\n            model = new Group();\n            break;\n        }\n        model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : '';\n        model.userData.originalName = node.attrName;\n        model.ID = id;\n      }\n      this.getTransformData(model, node);\n      modelMap.set(id, model);\n    }\n    return modelMap;\n  }\n  buildSkeleton(relationships, skeletons, id, name) {\n    let bone = null;\n    relationships.parents.forEach(function (parent) {\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID];\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          if (rawBone.ID === parent.ID) {\n            const subBone = bone;\n            bone = new Bone();\n            bone.matrixWorld.copy(rawBone.transformLink);\n\n            // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n            bone.name = name ? PropertyBinding.sanitizeNodeName(name) : '';\n            bone.userData.originalName = name;\n            bone.ID = id;\n            skeleton.bones[i] = bone;\n\n            // In cases where a bone is shared between multiple meshes\n            // duplicate the bone here and and it as a child of the first bone\n            if (subBone !== null) {\n              bone.add(subBone);\n            }\n          }\n        });\n      }\n    });\n    return bone;\n  }\n\n  // create a PerspectiveCamera or OrthographicCamera\n  createCamera(relationships) {\n    let model;\n    let cameraAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n      if (attr !== undefined) {\n        cameraAttribute = attr;\n      }\n    });\n    if (cameraAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type = 0;\n      if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n        type = 1;\n      }\n      let nearClippingPlane = 1;\n      if (cameraAttribute.NearPlane !== undefined) {\n        nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n      }\n      let farClippingPlane = 1000;\n      if (cameraAttribute.FarPlane !== undefined) {\n        farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n      }\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n      if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n        width = cameraAttribute.AspectWidth.value;\n        height = cameraAttribute.AspectHeight.value;\n      }\n      const aspect = width / height;\n      let fov = 45;\n      if (cameraAttribute.FieldOfView !== undefined) {\n        fov = cameraAttribute.FieldOfView.value;\n      }\n      const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n      switch (type) {\n        case 0:\n          // Perspective\n          model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n          if (focalLength !== null) model.setFocalLength(focalLength);\n          break;\n        case 1:\n          // Orthographic\n          model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n          break;\n        default:\n          console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n          model = new Object3D();\n          break;\n      }\n    }\n    return model;\n  }\n\n  // Create a DirectionalLight, PointLight or SpotLight\n  createLight(relationships) {\n    let model;\n    let lightAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n      if (attr !== undefined) {\n        lightAttribute = attr;\n      }\n    });\n    if (lightAttribute === undefined) {\n      model = new Object3D();\n    } else {\n      let type;\n\n      // LightType can be undefined for Point lights\n      if (lightAttribute.LightType === undefined) {\n        type = 0;\n      } else {\n        type = lightAttribute.LightType.value;\n      }\n      let color = 0xffffff;\n      if (lightAttribute.Color !== undefined) {\n        color = new Color().fromArray(lightAttribute.Color.value).convertSRGBToLinear();\n      }\n      let intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100;\n\n      // light disabled\n      if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n        intensity = 0;\n      }\n      let distance = 0;\n      if (lightAttribute.FarAttenuationEnd !== undefined) {\n        if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n          distance = 0;\n        } else {\n          distance = lightAttribute.FarAttenuationEnd.value;\n        }\n      }\n\n      // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n      const decay = 1;\n      switch (type) {\n        case 0:\n          // Point\n          model = new PointLight(color, intensity, distance, decay);\n          break;\n        case 1:\n          // Directional\n          model = new DirectionalLight(color, intensity);\n          break;\n        case 2:\n          // Spot\n          let angle = Math.PI / 3;\n          if (lightAttribute.InnerAngle !== undefined) {\n            angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n          }\n          let penumbra = 0;\n          if (lightAttribute.OuterAngle !== undefined) {\n            // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n            // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n            // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n            penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n            penumbra = Math.max(penumbra, 1);\n          }\n          model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n          break;\n        default:\n          console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n          model = new PointLight(color, intensity);\n          break;\n      }\n      if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n        model.castShadow = true;\n      }\n    }\n    return model;\n  }\n  createMesh(relationships, geometryMap, materialMap) {\n    let model;\n    let geometry = null;\n    let material = null;\n    const materials = [];\n\n    // get geometry and materials(s) from connections\n    relationships.children.forEach(function (child) {\n      if (geometryMap.has(child.ID)) {\n        geometry = geometryMap.get(child.ID);\n      }\n      if (materialMap.has(child.ID)) {\n        materials.push(materialMap.get(child.ID));\n      }\n    });\n    if (materials.length > 1) {\n      material = materials;\n    } else if (materials.length > 0) {\n      material = materials[0];\n    } else {\n      material = new MeshPhongMaterial({\n        name: Loader.DEFAULT_MATERIAL_NAME,\n        color: 0xcccccc\n      });\n      materials.push(material);\n    }\n    if ('color' in geometry.attributes) {\n      materials.forEach(function (material) {\n        material.vertexColors = true;\n      });\n    }\n    if (geometry.FBX_Deformer) {\n      model = new SkinnedMesh(geometry, material);\n      model.normalizeSkinWeights();\n    } else {\n      model = new Mesh(geometry, material);\n    }\n    return model;\n  }\n  createCurve(relationships, geometryMap) {\n    const geometry = relationships.children.reduce(function (geo, child) {\n      if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n      return geo;\n    }, null);\n\n    // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n    const material = new LineBasicMaterial({\n      name: Loader.DEFAULT_MATERIAL_NAME,\n      color: 0x3300ff,\n      linewidth: 1\n    });\n    return new Line(geometry, material);\n  }\n\n  // parse the model node for transform data\n  getTransformData(model, modelNode) {\n    const transformData = {};\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n    if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n    if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n    if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n    if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n    if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n    if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n    if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n    if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n    if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n    model.userData.transformData = transformData;\n  }\n  setLookAtProperties(model, modelNode) {\n    if ('LookAtProperty' in modelNode) {\n      const children = connections.get(model.ID).children;\n      children.forEach(function (child) {\n        if (child.relationship === 'LookAtProperty') {\n          const lookAtTarget = fbxTree.Objects.Model[child.ID];\n          if ('Lcl_Translation' in lookAtTarget) {\n            const pos = lookAtTarget.Lcl_Translation.value;\n\n            // DirectionalLight, SpotLight\n            if (model.target !== undefined) {\n              model.target.position.fromArray(pos);\n              sceneGraph.add(model.target);\n            } else {\n              // Cameras and other Object3Ds\n\n              model.lookAt(new Vector3().fromArray(pos));\n            }\n          }\n        }\n      });\n    }\n  }\n  bindSkeleton(skeletons, geometryMap, modelMap) {\n    const bindMatrices = this.parsePoseNodes();\n    for (const ID in skeletons) {\n      const skeleton = skeletons[ID];\n      const parents = connections.get(parseInt(skeleton.ID)).parents;\n      parents.forEach(function (parent) {\n        if (geometryMap.has(parent.ID)) {\n          const geoID = parent.ID;\n          const geoRelationships = connections.get(geoID);\n          geoRelationships.parents.forEach(function (geoConnParent) {\n            if (modelMap.has(geoConnParent.ID)) {\n              const model = modelMap.get(geoConnParent.ID);\n              model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n            }\n          });\n        }\n      });\n    }\n  }\n  parsePoseNodes() {\n    const bindMatrices = {};\n    if ('Pose' in fbxTree.Objects) {\n      const BindPoseNode = fbxTree.Objects.Pose;\n      for (const nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === 'BindPose' && BindPoseNode[nodeID].NbPoseNodes > 0) {\n          const poseNodes = BindPoseNode[nodeID].PoseNode;\n          if (Array.isArray(poseNodes)) {\n            poseNodes.forEach(function (poseNode) {\n              bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n            });\n          } else {\n            bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n          }\n        }\n      }\n    }\n    return bindMatrices;\n  }\n  addGlobalSceneSettings() {\n    if ('GlobalSettings' in fbxTree) {\n      if ('AmbientColor' in fbxTree.GlobalSettings) {\n        // Parse ambient color - if it's not set to black (default), create an ambient light\n\n        const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n        const r = ambientColor[0];\n        const g = ambientColor[1];\n        const b = ambientColor[2];\n        if (r !== 0 || g !== 0 || b !== 0) {\n          const color = new Color(r, g, b).convertSRGBToLinear();\n          sceneGraph.add(new AmbientLight(color, 1));\n        }\n      }\n      if ('UnitScaleFactor' in fbxTree.GlobalSettings) {\n        sceneGraph.userData.unitScaleFactor = fbxTree.GlobalSettings.UnitScaleFactor.value;\n      }\n    }\n  }\n}\n\n// parse Geometry data from FBXTree and return map of BufferGeometries\nclass GeometryParser {\n  constructor() {\n    this.negativeMaterialIndices = false;\n  }\n\n  // Parse nodes in FBXTree.Objects.Geometry\n  parse(deformers) {\n    const geometryMap = new Map();\n    if ('Geometry' in fbxTree.Objects) {\n      const geoNodes = fbxTree.Objects.Geometry;\n      for (const nodeID in geoNodes) {\n        const relationships = connections.get(parseInt(nodeID));\n        const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n        geometryMap.set(parseInt(nodeID), geo);\n      }\n    }\n\n    // report warnings\n\n    if (this.negativeMaterialIndices === true) {\n      console.warn('THREE.FBXLoader: The FBX file contains invalid (negative) material indices. The asset might not render as expected.');\n    }\n    return geometryMap;\n  }\n\n  // Parse single node in FBXTree.Objects.Geometry\n  parseGeometry(relationships, geoNode, deformers) {\n    switch (geoNode.attrType) {\n      case 'Mesh':\n        return this.parseMeshGeometry(relationships, geoNode, deformers);\n        break;\n      case 'NurbsCurve':\n        return this.parseNurbsGeometry(geoNode);\n        break;\n    }\n  }\n\n  // Parse single node mesh geometry in FBXTree.Objects.Geometry\n  parseMeshGeometry(relationships, geoNode, deformers) {\n    const skeletons = deformers.skeletons;\n    const morphTargets = [];\n    const modelNodes = relationships.parents.map(function (parent) {\n      return fbxTree.Objects.Model[parent.ID];\n    });\n\n    // don't create geometry if it is not associated with any models\n    if (modelNodes.length === 0) return;\n    const skeleton = relationships.children.reduce(function (skeleton, child) {\n      if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n      return skeleton;\n    }, null);\n    relationships.children.forEach(function (child) {\n      if (deformers.morphTargets[child.ID] !== undefined) {\n        morphTargets.push(deformers.morphTargets[child.ID]);\n      }\n    });\n\n    // Assume one model and get the preRotation from that\n    // if there is more than one model associated with the geometry this may cause problems\n    const modelNode = modelNodes[0];\n    const transformData = {};\n    if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n    if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n    if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n    const transform = generateTransform(transformData);\n    return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n  }\n\n  // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n  genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n    const geo = new BufferGeometry();\n    if (geoNode.attrName) geo.name = geoNode.attrName;\n    const geoInfo = this.parseGeoNode(geoNode, skeleton);\n    const buffers = this.genBuffers(geoInfo);\n    const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n    positionAttribute.applyMatrix4(preTransform);\n    geo.setAttribute('position', positionAttribute);\n    if (buffers.colors.length > 0) {\n      geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3));\n    }\n    if (skeleton) {\n      geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4));\n      geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4));\n\n      // used later to bind the skeleton to the model\n      geo.FBX_Deformer = skeleton;\n    }\n    if (buffers.normal.length > 0) {\n      const normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n      const normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n      normalAttribute.applyNormalMatrix(normalMatrix);\n      geo.setAttribute('normal', normalAttribute);\n    }\n    buffers.uvs.forEach(function (uvBuffer, i) {\n      const name = i === 0 ? 'uv' : `uv${i}`;\n      geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n    });\n    if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n      // Convert the material indices of each vertex into rendering groups on the geometry.\n      let prevMaterialIndex = buffers.materialIndex[0];\n      let startIndex = 0;\n      buffers.materialIndex.forEach(function (currentIndex, i) {\n        if (currentIndex !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n          prevMaterialIndex = currentIndex;\n          startIndex = i;\n        }\n      });\n\n      // the loop above doesn't add the last group, do that here.\n      if (geo.groups.length > 0) {\n        const lastGroup = geo.groups[geo.groups.length - 1];\n        const lastIndex = lastGroup.start + lastGroup.count;\n        if (lastIndex !== buffers.materialIndex.length) {\n          geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n        }\n      }\n\n      // case where there are multiple materials but the whole geometry is only\n      // using one of them\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n      }\n    }\n    this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n    return geo;\n  }\n  parseGeoNode(geoNode, skeleton) {\n    const geoInfo = {};\n    geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n    geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n    if (geoNode.LayerElementColor) {\n      geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n    }\n    if (geoNode.LayerElementMaterial) {\n      geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n    }\n    if (geoNode.LayerElementNormal) {\n      geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n    }\n    if (geoNode.LayerElementUV) {\n      geoInfo.uv = [];\n      let i = 0;\n      while (geoNode.LayerElementUV[i]) {\n        if (geoNode.LayerElementUV[i].UV) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n        }\n        i++;\n      }\n    }\n    geoInfo.weightTable = {};\n    if (skeleton !== null) {\n      geoInfo.skeleton = skeleton;\n      skeleton.rawBones.forEach(function (rawBone, i) {\n        // loop over the bone's vertex indices and weights\n        rawBone.indices.forEach(function (index, j) {\n          if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n          geoInfo.weightTable[index].push({\n            id: i,\n            weight: rawBone.weights[j]\n          });\n        });\n      });\n    }\n    return geoInfo;\n  }\n  genBuffers(geoInfo) {\n    const buffers = {\n      vertex: [],\n      normal: [],\n      colors: [],\n      uvs: [],\n      materialIndex: [],\n      vertexWeights: [],\n      weightsIndices: []\n    };\n    let polygonIndex = 0;\n    let faceLength = 0;\n    let displayedWeightsWarning = false;\n\n    // these will hold data for a single face\n    let facePositionIndexes = [];\n    let faceNormals = [];\n    let faceColors = [];\n    let faceUVs = [];\n    let faceWeights = [];\n    let faceWeightIndices = [];\n    const scope = this;\n    geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n      let materialIndex;\n      let endOfFace = false;\n\n      // Face index and vertex index arrays are combined in a single array\n      // A cube with quad faces looks like this:\n      // PolygonVertexIndex: *24 {\n      //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n      //  }\n      // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n      // to find index of last vertex bit shift the index: ^ - 1\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n        endOfFace = true;\n      }\n      let weightIndices = [];\n      let weights = [];\n      facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n      if (geoInfo.color) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n        faceColors.push(data[0], data[1], data[2]);\n      }\n      if (geoInfo.skeleton) {\n        if (geoInfo.weightTable[vertexIndex] !== undefined) {\n          geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n            weights.push(wt.weight);\n            weightIndices.push(wt.id);\n          });\n        }\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n            displayedWeightsWarning = true;\n          }\n          const wIndex = [0, 0, 0, 0];\n          const Weight = [0, 0, 0, 0];\n          weights.forEach(function (weight, weightIndex) {\n            let currentWeight = weight;\n            let currentIndex = weightIndices[weightIndex];\n            Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight;\n                currentWeight = comparedWeight;\n                const tmp = wIndex[comparedWeightIndex];\n                wIndex[comparedWeightIndex] = currentIndex;\n                currentIndex = tmp;\n              }\n            });\n          });\n          weightIndices = wIndex;\n          weights = Weight;\n        }\n\n        // if the weight array is shorter than 4 pad with 0s\n        while (weights.length < 4) {\n          weights.push(0);\n          weightIndices.push(0);\n        }\n        for (let i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i]);\n          faceWeightIndices.push(weightIndices[i]);\n        }\n      }\n      if (geoInfo.normal) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n        faceNormals.push(data[0], data[1], data[2]);\n      }\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n        if (materialIndex < 0) {\n          scope.negativeMaterialIndices = true;\n          materialIndex = 0; // fallback\n        }\n      }\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, i) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n          if (faceUVs[i] === undefined) {\n            faceUVs[i] = [];\n          }\n          faceUVs[i].push(data[0]);\n          faceUVs[i].push(data[1]);\n        });\n      }\n      faceLength++;\n      if (endOfFace) {\n        scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n        polygonIndex++;\n        faceLength = 0;\n\n        // reset arrays for the next face\n        facePositionIndexes = [];\n        faceNormals = [];\n        faceColors = [];\n        faceUVs = [];\n        faceWeights = [];\n        faceWeightIndices = [];\n      }\n    });\n    return buffers;\n  }\n\n  // See https://www.khronos.org/opengl/wiki/Calculating_a_Surface_Normal\n  getNormalNewell(vertices) {\n    const normal = new Vector3(0.0, 0.0, 0.0);\n    for (let i = 0; i < vertices.length; i++) {\n      const current = vertices[i];\n      const next = vertices[(i + 1) % vertices.length];\n      normal.x += (current.y - next.y) * (current.z + next.z);\n      normal.y += (current.z - next.z) * (current.x + next.x);\n      normal.z += (current.x - next.x) * (current.y + next.y);\n    }\n    normal.normalize();\n    return normal;\n  }\n  getNormalTangentAndBitangent(vertices) {\n    const normalVector = this.getNormalNewell(vertices);\n    // Avoid up being equal or almost equal to normalVector\n    const up = Math.abs(normalVector.z) > 0.5 ? new Vector3(0.0, 1.0, 0.0) : new Vector3(0.0, 0.0, 1.0);\n    const tangent = up.cross(normalVector).normalize();\n    const bitangent = normalVector.clone().cross(tangent).normalize();\n    return {\n      normal: normalVector,\n      tangent: tangent,\n      bitangent: bitangent\n    };\n  }\n  flattenVertex(vertex, normalTangent, normalBitangent) {\n    return new Vector2(vertex.dot(normalTangent), vertex.dot(normalBitangent));\n  }\n\n  // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n  genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n    let triangles;\n    if (faceLength > 3) {\n      // Triangulate n-gon using earcut\n\n      const vertices = [];\n      for (let i = 0; i < facePositionIndexes.length; i += 3) {\n        vertices.push(new Vector3(geoInfo.vertexPositions[facePositionIndexes[i]], geoInfo.vertexPositions[facePositionIndexes[i + 1]], geoInfo.vertexPositions[facePositionIndexes[i + 2]]));\n      }\n      const {\n        tangent,\n        bitangent\n      } = this.getNormalTangentAndBitangent(vertices);\n      const triangulationInput = [];\n      for (const vertex of vertices) {\n        triangulationInput.push(this.flattenVertex(vertex, tangent, bitangent));\n      }\n      triangles = ShapeUtils.triangulateShape(triangulationInput, []);\n    } else {\n      // Regular triangle, skip earcut triangulation step\n      triangles = [[0, 1, 2]];\n    }\n    for (const [i0, i1, i2] of triangles) {\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i0 * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i0 * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i0 * 3 + 2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i1 * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i1 * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i1 * 3 + 2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i2 * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i2 * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i2 * 3 + 2]]);\n      if (geoInfo.skeleton) {\n        buffers.vertexWeights.push(faceWeights[i0 * 4]);\n        buffers.vertexWeights.push(faceWeights[i0 * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[i0 * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[i0 * 4 + 3]);\n        buffers.vertexWeights.push(faceWeights[i1 * 4]);\n        buffers.vertexWeights.push(faceWeights[i1 * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[i1 * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[i1 * 4 + 3]);\n        buffers.vertexWeights.push(faceWeights[i2 * 4]);\n        buffers.vertexWeights.push(faceWeights[i2 * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[i2 * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[i2 * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[i0 * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[i0 * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[i0 * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[i0 * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[i1 * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[i1 * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[i1 * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[i1 * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[i2 * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[i2 * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[i2 * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[i2 * 4 + 3]);\n      }\n      if (geoInfo.color) {\n        buffers.colors.push(faceColors[i0 * 3]);\n        buffers.colors.push(faceColors[i0 * 3 + 1]);\n        buffers.colors.push(faceColors[i0 * 3 + 2]);\n        buffers.colors.push(faceColors[i1 * 3]);\n        buffers.colors.push(faceColors[i1 * 3 + 1]);\n        buffers.colors.push(faceColors[i1 * 3 + 2]);\n        buffers.colors.push(faceColors[i2 * 3]);\n        buffers.colors.push(faceColors[i2 * 3 + 1]);\n        buffers.colors.push(faceColors[i2 * 3 + 2]);\n      }\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n      }\n      if (geoInfo.normal) {\n        buffers.normal.push(faceNormals[i0 * 3]);\n        buffers.normal.push(faceNormals[i0 * 3 + 1]);\n        buffers.normal.push(faceNormals[i0 * 3 + 2]);\n        buffers.normal.push(faceNormals[i1 * 3]);\n        buffers.normal.push(faceNormals[i1 * 3 + 1]);\n        buffers.normal.push(faceNormals[i1 * 3 + 2]);\n        buffers.normal.push(faceNormals[i2 * 3]);\n        buffers.normal.push(faceNormals[i2 * 3 + 1]);\n        buffers.normal.push(faceNormals[i2 * 3 + 2]);\n      }\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, j) {\n          if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n          buffers.uvs[j].push(faceUVs[j][i0 * 2]);\n          buffers.uvs[j].push(faceUVs[j][i0 * 2 + 1]);\n          buffers.uvs[j].push(faceUVs[j][i1 * 2]);\n          buffers.uvs[j].push(faceUVs[j][i1 * 2 + 1]);\n          buffers.uvs[j].push(faceUVs[j][i2 * 2]);\n          buffers.uvs[j].push(faceUVs[j][i2 * 2 + 1]);\n        });\n      }\n    }\n  }\n  addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n    if (morphTargets.length === 0) return;\n    parentGeo.morphTargetsRelative = true;\n    parentGeo.morphAttributes.position = [];\n    // parentGeo.morphAttributes.normal = []; // not implemented\n\n    const scope = this;\n    morphTargets.forEach(function (morphTarget) {\n      morphTarget.rawTargets.forEach(function (rawTarget) {\n        const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n        if (morphGeoNode !== undefined) {\n          scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n        }\n      });\n    });\n  }\n\n  // a morph geometry node is similar to a standard  node, and the node is also contained\n  // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n  // and a special attribute Index defining which vertices of the original geometry are affected\n  // Normal and position attributes only have data for the vertices that are affected by the morph\n  genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n    const vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n    const morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n    const indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n    const length = parentGeo.attributes.position.count * 3;\n    const morphPositions = new Float32Array(length);\n    for (let i = 0; i < indices.length; i++) {\n      const morphIndex = indices[i] * 3;\n      morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n      morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n      morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n    }\n\n    // TODO: add morph normal support\n    const morphGeoInfo = {\n      vertexIndices: vertexIndices,\n      vertexPositions: morphPositions\n    };\n    const morphBuffers = this.genBuffers(morphGeoInfo);\n    const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n    positionAttribute.name = name || morphGeoNode.attrName;\n    positionAttribute.applyMatrix4(preTransform);\n    parentGeo.morphAttributes.position.push(positionAttribute);\n  }\n\n  // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n  parseNormals(NormalNode) {\n    const mappingType = NormalNode.MappingInformationType;\n    const referenceType = NormalNode.ReferenceInformationType;\n    const buffer = NormalNode.Normals.a;\n    let indexBuffer = [];\n    if (referenceType === 'IndexToDirect') {\n      if ('NormalIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalIndex.a;\n      } else if ('NormalsIndex' in NormalNode) {\n        indexBuffer = NormalNode.NormalsIndex.a;\n      }\n    }\n    return {\n      dataSize: 3,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  }\n\n  // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n  parseUVs(UVNode) {\n    const mappingType = UVNode.MappingInformationType;\n    const referenceType = UVNode.ReferenceInformationType;\n    const buffer = UVNode.UV.a;\n    let indexBuffer = [];\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = UVNode.UVIndex.a;\n    }\n    return {\n      dataSize: 2,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  }\n\n  // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n  parseVertexColors(ColorNode) {\n    const mappingType = ColorNode.MappingInformationType;\n    const referenceType = ColorNode.ReferenceInformationType;\n    const buffer = ColorNode.Colors.a;\n    let indexBuffer = [];\n    if (referenceType === 'IndexToDirect') {\n      indexBuffer = ColorNode.ColorIndex.a;\n    }\n    for (let i = 0, c = new Color(); i < buffer.length; i += 4) {\n      c.fromArray(buffer, i).convertSRGBToLinear().toArray(buffer, i);\n    }\n    return {\n      dataSize: 4,\n      buffer: buffer,\n      indices: indexBuffer,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  }\n\n  // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n  parseMaterialIndices(MaterialNode) {\n    const mappingType = MaterialNode.MappingInformationType;\n    const referenceType = MaterialNode.ReferenceInformationType;\n    if (mappingType === 'NoMappingInformation') {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: 'AllSame',\n        referenceType: referenceType\n      };\n    }\n    const materialIndexBuffer = MaterialNode.Materials.a;\n\n    // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n    // we expect.So we create an intermediate buffer that points to the index in the buffer,\n    // for conforming with the other functions we've written for other data.\n    const materialIndices = [];\n    for (let i = 0; i < materialIndexBuffer.length; ++i) {\n      materialIndices.push(i);\n    }\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType: mappingType,\n      referenceType: referenceType\n    };\n  }\n\n  // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n  parseNurbsGeometry(geoNode) {\n    const order = parseInt(geoNode.Order);\n    if (isNaN(order)) {\n      console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n      return new BufferGeometry();\n    }\n    const degree = order - 1;\n    const knots = geoNode.KnotVector.a;\n    const controlPoints = [];\n    const pointsValues = geoNode.Points.a;\n    for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new Vector4().fromArray(pointsValues, i));\n    }\n    let startKnot, endKnot;\n    if (geoNode.Form === 'Closed') {\n      controlPoints.push(controlPoints[0]);\n    } else if (geoNode.Form === 'Periodic') {\n      startKnot = degree;\n      endKnot = knots.length - 1 - startKnot;\n      for (let i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i]);\n      }\n    }\n    const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n    const points = curve.getPoints(controlPoints.length * 12);\n    return new BufferGeometry().setFromPoints(points);\n  }\n}\n\n// parse animation data from FBXTree\nclass AnimationParser {\n  // take raw animation clips and turn them into three.js animation clips\n  parse() {\n    const animationClips = [];\n    const rawClips = this.parseClips();\n    if (rawClips !== undefined) {\n      for (const key in rawClips) {\n        const rawClip = rawClips[key];\n        const clip = this.addClip(rawClip);\n        animationClips.push(clip);\n      }\n    }\n    return animationClips;\n  }\n  parseClips() {\n    // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n    // if this is undefined we can safely assume there are no animations\n    if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n    const curveNodesMap = this.parseAnimationCurveNodes();\n    this.parseAnimationCurves(curveNodesMap);\n    const layersMap = this.parseAnimationLayers(curveNodesMap);\n    const rawClips = this.parseAnimStacks(layersMap);\n    return rawClips;\n  }\n\n  // parse nodes in FBXTree.Objects.AnimationCurveNode\n  // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n  // and is referenced by an AnimationLayer\n  parseAnimationCurveNodes() {\n    const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n    const curveNodesMap = new Map();\n    for (const nodeID in rawCurveNodes) {\n      const rawCurveNode = rawCurveNodes[nodeID];\n      if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n        const curveNode = {\n          id: rawCurveNode.id,\n          attr: rawCurveNode.attrName,\n          curves: {}\n        };\n        curveNodesMap.set(curveNode.id, curveNode);\n      }\n    }\n    return curveNodesMap;\n  }\n\n  // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n  // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n  // axis ( e.g. times and values of x rotation)\n  parseAnimationCurves(curveNodesMap) {\n    const rawCurves = fbxTree.Objects.AnimationCurve;\n\n    // TODO: Many values are identical up to roundoff error, but won't be optimised\n    // e.g. position times: [0, 0.4, 0. 8]\n    // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n    // clearly, this should be optimised to\n    // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n    // this shows up in nearly every FBX file, and generally time array is length > 100\n\n    for (const nodeID in rawCurves) {\n      const animationCurve = {\n        id: rawCurves[nodeID].id,\n        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n        values: rawCurves[nodeID].KeyValueFloat.a\n      };\n      const relationships = connections.get(animationCurve.id);\n      if (relationships !== undefined) {\n        const animationCurveID = relationships.parents[0].ID;\n        const animationCurveRelationship = relationships.parents[0].relationship;\n        if (animationCurveRelationship.match(/X/)) {\n          curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Y/)) {\n          curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n        } else if (animationCurveRelationship.match(/Z/)) {\n          curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n        } else if (animationCurveRelationship.match(/DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n          curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n        }\n      }\n    }\n  }\n\n  // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n  // to various AnimationCurveNodes and is referenced by an AnimationStack node\n  // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n  parseAnimationLayers(curveNodesMap) {\n    const rawLayers = fbxTree.Objects.AnimationLayer;\n    const layersMap = new Map();\n    for (const nodeID in rawLayers) {\n      const layerCurveNodes = [];\n      const connection = connections.get(parseInt(nodeID));\n      if (connection !== undefined) {\n        // all the animationCurveNodes used in the layer\n        const children = connection.children;\n        children.forEach(function (child, i) {\n          if (curveNodesMap.has(child.ID)) {\n            const curveNode = curveNodesMap.get(child.ID);\n\n            // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n            if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const modelID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n                if (modelID !== undefined) {\n                  const rawModel = fbxTree.Objects.Model[modelID.toString()];\n                  if (rawModel === undefined) {\n                    console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                    return;\n                  }\n                  const node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                    ID: rawModel.id,\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1]\n                  };\n                  sceneGraph.traverse(function (child) {\n                    if (child.ID === rawModel.id) {\n                      node.transform = child.matrix;\n                      if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                    }\n                  });\n                  if (!node.transform) node.transform = new Matrix4();\n\n                  // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                  // animation value as well\n                  if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                  if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                  layerCurveNodes[i] = node;\n                }\n              }\n              if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n            } else if (curveNode.curves.morph !== undefined) {\n              if (layerCurveNodes[i] === undefined) {\n                const deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== undefined;\n                })[0].ID;\n                const morpherID = connections.get(deformerID).parents[0].ID;\n                const geoID = connections.get(morpherID).parents[0].ID;\n\n                // assuming geometry is not used in more than one model\n                const modelID = connections.get(geoID).parents[0].ID;\n                const rawModel = fbxTree.Objects.Model[modelID];\n                const node = {\n                  modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                  morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                };\n                layerCurveNodes[i] = node;\n              }\n              layerCurveNodes[i][curveNode.attr] = curveNode;\n            }\n          }\n        });\n        layersMap.set(parseInt(nodeID), layerCurveNodes);\n      }\n    }\n    return layersMap;\n  }\n\n  // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n  // hierarchy. Each Stack node will be used to create a AnimationClip\n  parseAnimStacks(layersMap) {\n    const rawStacks = fbxTree.Objects.AnimationStack;\n\n    // connect the stacks (clips) up to the layers\n    const rawClips = {};\n    for (const nodeID in rawStacks) {\n      const children = connections.get(parseInt(nodeID)).children;\n      if (children.length > 1) {\n        // it seems like stacks will always be associated with a single layer. But just in case there are files\n        // where there are multiple layers per stack, we'll display a warning\n        console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n      }\n      const layer = layersMap.get(children[0].ID);\n      rawClips[nodeID] = {\n        name: rawStacks[nodeID].attrName,\n        layer: layer\n      };\n    }\n    return rawClips;\n  }\n  addClip(rawClip) {\n    let tracks = [];\n    const scope = this;\n    rawClip.layer.forEach(function (rawTracks) {\n      tracks = tracks.concat(scope.generateTracks(rawTracks));\n    });\n    return new AnimationClip(rawClip.name, -1, tracks);\n  }\n  generateTracks(rawTracks) {\n    const tracks = [];\n    let initialPosition = new Vector3();\n    let initialScale = new Vector3();\n    if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, new Quaternion(), initialScale);\n    initialPosition = initialPosition.toArray();\n    initialScale = initialScale.toArray();\n    if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n      const positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n      if (positionTrack !== undefined) tracks.push(positionTrack);\n    }\n    if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n      const rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n      if (rotationTrack !== undefined) tracks.push(rotationTrack);\n    }\n    if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n      const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n      if (scaleTrack !== undefined) tracks.push(scaleTrack);\n    }\n    if (rawTracks.DeformPercent !== undefined) {\n      const morphTrack = this.generateMorphTrack(rawTracks);\n      if (morphTrack !== undefined) tracks.push(morphTrack);\n    }\n    return tracks;\n  }\n  generateVectorTrack(modelName, curves, initialValue, type) {\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    return new VectorKeyframeTrack(modelName + '.' + type, times, values);\n  }\n  generateRotationTrack(modelName, curves, preRotation, postRotation, eulerOrder) {\n    let times;\n    let values;\n    if (curves.x !== undefined && curves.y !== undefined && curves.z !== undefined) {\n      const result = this.interpolateRotations(curves.x, curves.y, curves.z, eulerOrder);\n      times = result[0];\n      values = result[1];\n    }\n    if (preRotation !== undefined) {\n      preRotation = preRotation.map(MathUtils.degToRad);\n      preRotation.push(eulerOrder);\n      preRotation = new Euler().fromArray(preRotation);\n      preRotation = new Quaternion().setFromEuler(preRotation);\n    }\n    if (postRotation !== undefined) {\n      postRotation = postRotation.map(MathUtils.degToRad);\n      postRotation.push(eulerOrder);\n      postRotation = new Euler().fromArray(postRotation);\n      postRotation = new Quaternion().setFromEuler(postRotation).invert();\n    }\n    const quaternion = new Quaternion();\n    const euler = new Euler();\n    const quaternionValues = [];\n    if (!values || !times) return new QuaternionKeyframeTrack(modelName + '.quaternion', [0], [0]);\n    for (let i = 0; i < values.length; i += 3) {\n      euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n      quaternion.setFromEuler(euler);\n      if (preRotation !== undefined) quaternion.premultiply(preRotation);\n      if (postRotation !== undefined) quaternion.multiply(postRotation);\n\n      // Check unroll\n      if (i > 2) {\n        const prevQuat = new Quaternion().fromArray(quaternionValues, (i - 3) / 3 * 4);\n        if (prevQuat.dot(quaternion) < 0) {\n          quaternion.set(-quaternion.x, -quaternion.y, -quaternion.z, -quaternion.w);\n        }\n      }\n      quaternion.toArray(quaternionValues, i / 3 * 4);\n    }\n    return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n  }\n  generateMorphTrack(rawTracks) {\n    const curves = rawTracks.DeformPercent.curves.morph;\n    const values = curves.values.map(function (val) {\n      return val / 100;\n    });\n    const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n    return new NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n  }\n\n  // For all animated objects, times are defined separately for each axis\n  // Here we'll combine the times into one sorted array without duplicates\n  getTimesForAllAxes(curves) {\n    let times = [];\n\n    // first join together the times for each axis, if defined\n    if (curves.x !== undefined) times = times.concat(curves.x.times);\n    if (curves.y !== undefined) times = times.concat(curves.y.times);\n    if (curves.z !== undefined) times = times.concat(curves.z.times);\n\n    // then sort them\n    times = times.sort(function (a, b) {\n      return a - b;\n    });\n\n    // and remove duplicates\n    if (times.length > 1) {\n      let targetIndex = 1;\n      let lastValue = times[0];\n      for (let i = 1; i < times.length; i++) {\n        const currentValue = times[i];\n        if (currentValue !== lastValue) {\n          times[targetIndex] = currentValue;\n          lastValue = currentValue;\n          targetIndex++;\n        }\n      }\n      times = times.slice(0, targetIndex);\n    }\n    return times;\n  }\n  getKeyframeTrackValues(times, curves, initialValue) {\n    const prevValue = initialValue;\n    const values = [];\n    let xIndex = -1;\n    let yIndex = -1;\n    let zIndex = -1;\n    times.forEach(function (time) {\n      if (curves.x) xIndex = curves.x.times.indexOf(time);\n      if (curves.y) yIndex = curves.y.times.indexOf(time);\n      if (curves.z) zIndex = curves.z.times.indexOf(time);\n\n      // if there is an x value defined for this frame, use that\n      if (xIndex !== -1) {\n        const xValue = curves.x.values[xIndex];\n        values.push(xValue);\n        prevValue[0] = xValue;\n      } else {\n        // otherwise use the x value from the previous frame\n        values.push(prevValue[0]);\n      }\n      if (yIndex !== -1) {\n        const yValue = curves.y.values[yIndex];\n        values.push(yValue);\n        prevValue[1] = yValue;\n      } else {\n        values.push(prevValue[1]);\n      }\n      if (zIndex !== -1) {\n        const zValue = curves.z.values[zIndex];\n        values.push(zValue);\n        prevValue[2] = zValue;\n      } else {\n        values.push(prevValue[2]);\n      }\n    });\n    return values;\n  }\n\n  // Rotations are defined as Euler angles which can have values  of any size\n  // These will be converted to quaternions which don't support values greater than\n  // PI, so we'll interpolate large rotations\n  interpolateRotations(curvex, curvey, curvez, eulerOrder) {\n    const times = [];\n    const values = [];\n\n    // Add first frame\n    times.push(curvex.times[0]);\n    values.push(MathUtils.degToRad(curvex.values[0]));\n    values.push(MathUtils.degToRad(curvey.values[0]));\n    values.push(MathUtils.degToRad(curvez.values[0]));\n    for (let i = 1; i < curvex.values.length; i++) {\n      const initialValue = [curvex.values[i - 1], curvey.values[i - 1], curvez.values[i - 1]];\n      if (isNaN(initialValue[0]) || isNaN(initialValue[1]) || isNaN(initialValue[2])) {\n        continue;\n      }\n      const initialValueRad = initialValue.map(MathUtils.degToRad);\n      const currentValue = [curvex.values[i], curvey.values[i], curvez.values[i]];\n      if (isNaN(currentValue[0]) || isNaN(currentValue[1]) || isNaN(currentValue[2])) {\n        continue;\n      }\n      const currentValueRad = currentValue.map(MathUtils.degToRad);\n      const valuesSpan = [currentValue[0] - initialValue[0], currentValue[1] - initialValue[1], currentValue[2] - initialValue[2]];\n      const absoluteSpan = [Math.abs(valuesSpan[0]), Math.abs(valuesSpan[1]), Math.abs(valuesSpan[2])];\n      if (absoluteSpan[0] >= 180 || absoluteSpan[1] >= 180 || absoluteSpan[2] >= 180) {\n        const maxAbsSpan = Math.max(...absoluteSpan);\n        const numSubIntervals = maxAbsSpan / 180;\n        const E1 = new Euler(...initialValueRad, eulerOrder);\n        const E2 = new Euler(...currentValueRad, eulerOrder);\n        const Q1 = new Quaternion().setFromEuler(E1);\n        const Q2 = new Quaternion().setFromEuler(E2);\n\n        // Check unroll\n        if (Q1.dot(Q2)) {\n          Q2.set(-Q2.x, -Q2.y, -Q2.z, -Q2.w);\n        }\n\n        // Interpolate\n        const initialTime = curvex.times[i - 1];\n        const timeSpan = curvex.times[i] - initialTime;\n        const Q = new Quaternion();\n        const E = new Euler();\n        for (let t = 0; t < 1; t += 1 / numSubIntervals) {\n          Q.copy(Q1.clone().slerp(Q2.clone(), t));\n          times.push(initialTime + t * timeSpan);\n          E.setFromQuaternion(Q, eulerOrder);\n          values.push(E.x);\n          values.push(E.y);\n          values.push(E.z);\n        }\n      } else {\n        times.push(curvex.times[i]);\n        values.push(MathUtils.degToRad(curvex.values[i]));\n        values.push(MathUtils.degToRad(curvey.values[i]));\n        values.push(MathUtils.degToRad(curvez.values[i]));\n      }\n    }\n    return [times, values];\n  }\n}\n\n// parse an FBX file in ASCII format\nclass TextParser {\n  getPrevNode() {\n    return this.nodeStack[this.currentIndent - 2];\n  }\n  getCurrentNode() {\n    return this.nodeStack[this.currentIndent - 1];\n  }\n  getCurrentProp() {\n    return this.currentProp;\n  }\n  pushStack(node) {\n    this.nodeStack.push(node);\n    this.currentIndent += 1;\n  }\n  popStack() {\n    this.nodeStack.pop();\n    this.currentIndent -= 1;\n  }\n  setCurrentProp(val, name) {\n    this.currentProp = val;\n    this.currentPropName = name;\n  }\n  parse(text) {\n    this.currentIndent = 0;\n    this.allNodes = new FBXTree();\n    this.nodeStack = [];\n    this.currentProp = [];\n    this.currentPropName = '';\n    const scope = this;\n    const split = text.split(/[\\r\\n]+/);\n    split.forEach(function (line, i) {\n      const matchComment = line.match(/^[\\s\\t]*;/);\n      const matchEmpty = line.match(/^[\\s\\t]*$/);\n      if (matchComment || matchEmpty) return;\n      const matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n      const matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n      const matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n      if (matchBeginning) {\n        scope.parseNodeBegin(line, matchBeginning);\n      } else if (matchProperty) {\n        scope.parseNodeProperty(line, matchProperty, split[++i]);\n      } else if (matchEnd) {\n        scope.popStack();\n      } else if (line.match(/^[^\\s\\t}]/)) {\n        // large arrays are split over multiple lines terminated with a ',' character\n        // if this is encountered the line needs to be joined to the previous line\n        scope.parseNodePropertyContinued(line);\n      }\n    });\n    return this.allNodes;\n  }\n  parseNodeBegin(line, property) {\n    const nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n    const nodeAttrs = property[2].split(',').map(function (attr) {\n      return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n    });\n    const node = {\n      name: nodeName\n    };\n    const attrs = this.parseNodeAttr(nodeAttrs);\n    const currentNode = this.getCurrentNode();\n\n    // a top node\n    if (this.currentIndent === 0) {\n      this.allNodes.add(nodeName, node);\n    } else {\n      // a subnode\n\n      // if the subnode already exists, append it\n      if (nodeName in currentNode) {\n        // special case Pose needs PoseNodes as an array\n        if (nodeName === 'PoseNode') {\n          currentNode.PoseNode.push(node);\n        } else if (currentNode[nodeName].id !== undefined) {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n        }\n        if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n      } else if (typeof attrs.id === 'number') {\n        currentNode[nodeName] = {};\n        currentNode[nodeName][attrs.id] = node;\n      } else if (nodeName !== 'Properties70') {\n        if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n      }\n    }\n    if (typeof attrs.id === 'number') node.id = attrs.id;\n    if (attrs.name !== '') node.attrName = attrs.name;\n    if (attrs.type !== '') node.attrType = attrs.type;\n    this.pushStack(node);\n  }\n  parseNodeAttr(attrs) {\n    let id = attrs[0];\n    if (attrs[0] !== '') {\n      id = parseInt(attrs[0]);\n      if (isNaN(id)) {\n        id = attrs[0];\n      }\n    }\n    let name = '',\n      type = '';\n    if (attrs.length > 1) {\n      name = attrs[1].replace(/^(\\w+)::/, '');\n      type = attrs[2];\n    }\n    return {\n      id: id,\n      name: name,\n      type: type\n    };\n  }\n  parseNodeProperty(line, property, contentLine) {\n    let propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n    let propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim();\n\n    // for special case: base64 image data follows \"Content: ,\" line\n    //\tContent: ,\n    //\t \"/9j/4RDaRXhpZgAATU0A...\"\n    if (propName === 'Content' && propValue === ',') {\n      propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n    }\n    const currentNode = this.getCurrentNode();\n    const parentName = currentNode.name;\n    if (parentName === 'Properties70') {\n      this.parseNodeSpecialProperty(line, propName, propValue);\n      return;\n    }\n\n    // Connections\n    if (propName === 'C') {\n      const connProps = propValue.split(',').slice(1);\n      const from = parseInt(connProps[0]);\n      const to = parseInt(connProps[1]);\n      let rest = propValue.split(',').slice(3);\n      rest = rest.map(function (elem) {\n        return elem.trim().replace(/^\"/, '');\n      });\n      propName = 'connections';\n      propValue = [from, to];\n      append(propValue, rest);\n      if (currentNode[propName] === undefined) {\n        currentNode[propName] = [];\n      }\n    }\n\n    // Node\n    if (propName === 'Node') currentNode.id = propValue;\n\n    // connections\n    if (propName in currentNode && Array.isArray(currentNode[propName])) {\n      currentNode[propName].push(propValue);\n    } else {\n      if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n    }\n    this.setCurrentProp(currentNode, propName);\n\n    // convert string to array, unless it ends in ',' in which case more will be added to it\n    if (propName === 'a' && propValue.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(propValue);\n    }\n  }\n  parseNodePropertyContinued(line) {\n    const currentNode = this.getCurrentNode();\n    currentNode.a += line;\n\n    // if the line doesn't end in ',' we have reached the end of the property value\n    // so convert the string to an array\n    if (line.slice(-1) !== ',') {\n      currentNode.a = parseNumberArray(currentNode.a);\n    }\n  }\n\n  // parse \"Property70\"\n  parseNodeSpecialProperty(line, propName, propValue) {\n    // split this\n    // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n    // into array like below\n    // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n    const props = propValue.split('\",').map(function (prop) {\n      return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n    });\n    const innerPropName = props[0];\n    const innerPropType1 = props[1];\n    const innerPropType2 = props[2];\n    const innerPropFlag = props[3];\n    let innerPropValue = props[4];\n\n    // cast values where needed, otherwise leave as strings\n    switch (innerPropType1) {\n      case 'int':\n      case 'enum':\n      case 'bool':\n      case 'ULongLong':\n      case 'double':\n      case 'Number':\n      case 'FieldOfView':\n        innerPropValue = parseFloat(innerPropValue);\n        break;\n      case 'Color':\n      case 'ColorRGB':\n      case 'Vector3D':\n      case 'Lcl_Translation':\n      case 'Lcl_Rotation':\n      case 'Lcl_Scaling':\n        innerPropValue = parseNumberArray(innerPropValue);\n        break;\n    }\n\n    // CAUTION: these props must append to parent's parent\n    this.getPrevNode()[innerPropName] = {\n      'type': innerPropType1,\n      'type2': innerPropType2,\n      'flag': innerPropFlag,\n      'value': innerPropValue\n    };\n    this.setCurrentProp(this.getPrevNode(), innerPropName);\n  }\n}\n\n// Parse an FBX file in Binary format\nclass BinaryParser {\n  parse(buffer) {\n    const reader = new BinaryReader(buffer);\n    reader.skip(23); // skip magic 23 bytes\n\n    const version = reader.getUint32();\n    if (version < 6400) {\n      throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n    }\n    const allNodes = new FBXTree();\n    while (!this.endOfContent(reader)) {\n      const node = this.parseNode(reader, version);\n      if (node !== null) allNodes.add(node.name, node);\n    }\n    return allNodes;\n  }\n\n  // Check if reader has reached the end of content.\n  endOfContent(reader) {\n    // footer size: 160bytes + 16-byte alignment padding\n    // - 16bytes: magic\n    // - padding til 16-byte alignment (at least 1byte?)\n    //\t(seems like some exporters embed fixed 15 or 16bytes?)\n    // - 4bytes: magic\n    // - 4bytes: version\n    // - 120bytes: zero\n    // - 16bytes: magic\n    if (reader.size() % 16 === 0) {\n      return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n    } else {\n      return reader.getOffset() + 160 + 16 >= reader.size();\n    }\n  }\n\n  // recursively parse nodes until the end of the file is reached\n  parseNode(reader, version) {\n    const node = {};\n\n    // The first three data sizes depends on version.\n    const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n    const nameLen = reader.getUint8();\n    const name = reader.getString(nameLen);\n\n    // Regards this node as NULL-record if endOffset is zero\n    if (endOffset === 0) return null;\n    const propertyList = [];\n    for (let i = 0; i < numProperties; i++) {\n      propertyList.push(this.parseProperty(reader));\n    }\n\n    // Regards the first three elements in propertyList as id, attrName, and attrType\n    const id = propertyList.length > 0 ? propertyList[0] : '';\n    const attrName = propertyList.length > 1 ? propertyList[1] : '';\n    const attrType = propertyList.length > 2 ? propertyList[2] : '';\n\n    // check if this node represents just a single property\n    // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n    node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n    while (endOffset > reader.getOffset()) {\n      const subNode = this.parseNode(reader, version);\n      if (subNode !== null) this.parseSubNode(name, node, subNode);\n    }\n    node.propertyList = propertyList; // raw property list used by parent\n\n    if (typeof id === 'number') node.id = id;\n    if (attrName !== '') node.attrName = attrName;\n    if (attrType !== '') node.attrType = attrType;\n    if (name !== '') node.name = name;\n    return node;\n  }\n  parseSubNode(name, node, subNode) {\n    // special case: child node is single property\n    if (subNode.singleProperty === true) {\n      const value = subNode.propertyList[0];\n      if (Array.isArray(value)) {\n        node[subNode.name] = subNode;\n        subNode.a = value;\n      } else {\n        node[subNode.name] = value;\n      }\n    } else if (name === 'Connections' && subNode.name === 'C') {\n      const array = [];\n      subNode.propertyList.forEach(function (property, i) {\n        // first Connection is FBX type (OO, OP, etc.). We'll discard these\n        if (i !== 0) array.push(property);\n      });\n      if (node.connections === undefined) {\n        node.connections = [];\n      }\n      node.connections.push(array);\n    } else if (subNode.name === 'Properties70') {\n      const keys = Object.keys(subNode);\n      keys.forEach(function (key) {\n        node[key] = subNode[key];\n      });\n    } else if (name === 'Properties70' && subNode.name === 'P') {\n      let innerPropName = subNode.propertyList[0];\n      let innerPropType1 = subNode.propertyList[1];\n      const innerPropType2 = subNode.propertyList[2];\n      const innerPropFlag = subNode.propertyList[3];\n      let innerPropValue;\n      if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n      if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n      if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n        innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n      } else {\n        innerPropValue = subNode.propertyList[4];\n      }\n\n      // this will be copied to parent, see above\n      node[innerPropName] = {\n        'type': innerPropType1,\n        'type2': innerPropType2,\n        'flag': innerPropFlag,\n        'value': innerPropValue\n      };\n    } else if (node[subNode.name] === undefined) {\n      if (typeof subNode.id === 'number') {\n        node[subNode.name] = {};\n        node[subNode.name][subNode.id] = subNode;\n      } else {\n        node[subNode.name] = subNode;\n      }\n    } else {\n      if (subNode.name === 'PoseNode') {\n        if (!Array.isArray(node[subNode.name])) {\n          node[subNode.name] = [node[subNode.name]];\n        }\n        node[subNode.name].push(subNode);\n      } else if (node[subNode.name][subNode.id] === undefined) {\n        node[subNode.name][subNode.id] = subNode;\n      }\n    }\n  }\n  parseProperty(reader) {\n    const type = reader.getString(1);\n    let length;\n    switch (type) {\n      case 'C':\n        return reader.getBoolean();\n      case 'D':\n        return reader.getFloat64();\n      case 'F':\n        return reader.getFloat32();\n      case 'I':\n        return reader.getInt32();\n      case 'L':\n        return reader.getInt64();\n      case 'R':\n        length = reader.getUint32();\n        return reader.getArrayBuffer(length);\n      case 'S':\n        length = reader.getUint32();\n        return reader.getString(length);\n      case 'Y':\n        return reader.getInt16();\n      case 'b':\n      case 'c':\n      case 'd':\n      case 'f':\n      case 'i':\n      case 'l':\n        const arrayLength = reader.getUint32();\n        const encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n        const compressedLength = reader.getUint32();\n        if (encoding === 0) {\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader.getBooleanArray(arrayLength);\n            case 'd':\n              return reader.getFloat64Array(arrayLength);\n            case 'f':\n              return reader.getFloat32Array(arrayLength);\n            case 'i':\n              return reader.getInt32Array(arrayLength);\n            case 'l':\n              return reader.getInt64Array(arrayLength);\n          }\n        }\n        const data = fflate.unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength)));\n        const reader2 = new BinaryReader(data.buffer);\n        switch (type) {\n          case 'b':\n          case 'c':\n            return reader2.getBooleanArray(arrayLength);\n          case 'd':\n            return reader2.getFloat64Array(arrayLength);\n          case 'f':\n            return reader2.getFloat32Array(arrayLength);\n          case 'i':\n            return reader2.getInt32Array(arrayLength);\n          case 'l':\n            return reader2.getInt64Array(arrayLength);\n        }\n        break;\n      // cannot happen but is required by the DeepScan\n\n      default:\n        throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n    }\n  }\n}\nclass BinaryReader {\n  constructor(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n    this._textDecoder = new TextDecoder();\n  }\n  getOffset() {\n    return this.offset;\n  }\n  size() {\n    return this.dv.buffer.byteLength;\n  }\n  skip(length) {\n    this.offset += length;\n  }\n\n  // seems like true/false representation depends on exporter.\n  // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n  // then sees LSB.\n  getBoolean() {\n    return (this.getUint8() & 1) === 1;\n  }\n  getBooleanArray(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getBoolean());\n    }\n    return a;\n  }\n  getUint8() {\n    const value = this.dv.getUint8(this.offset);\n    this.offset += 1;\n    return value;\n  }\n  getInt16() {\n    const value = this.dv.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n  getInt32() {\n    const value = this.dv.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  getInt32Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt32());\n    }\n    return a;\n  }\n  getUint32() {\n    const value = this.dv.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  // JavaScript doesn't support 64-bit integer so calculate this here\n  // 1 << 32 will return 1 so using multiply operation instead here.\n  // There's a possibility that this method returns wrong value if the value\n  // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n  // TODO: safely handle 64-bit integer\n  getInt64() {\n    let low, high;\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n\n    // calculate negative value\n    if (high & 0x80000000) {\n      high = ~high & 0xFFFFFFFF;\n      low = ~low & 0xFFFFFFFF;\n      if (low === 0xFFFFFFFF) high = high + 1 & 0xFFFFFFFF;\n      low = low + 1 & 0xFFFFFFFF;\n      return -(high * 0x100000000 + low);\n    }\n    return high * 0x100000000 + low;\n  }\n  getInt64Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt64());\n    }\n    return a;\n  }\n\n  // Note: see getInt64() comment\n  getUint64() {\n    let low, high;\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n    return high * 0x100000000 + low;\n  }\n  getFloat32() {\n    const value = this.dv.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  getFloat32Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat32());\n    }\n    return a;\n  }\n  getFloat64() {\n    const value = this.dv.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n  getFloat64Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat64());\n    }\n    return a;\n  }\n  getArrayBuffer(size) {\n    const value = this.dv.buffer.slice(this.offset, this.offset + size);\n    this.offset += size;\n    return value;\n  }\n  getString(size) {\n    const start = this.offset;\n    let a = new Uint8Array(this.dv.buffer, start, size);\n    this.skip(size);\n    const nullByte = a.indexOf(0);\n    if (nullByte >= 0) a = new Uint8Array(this.dv.buffer, start, nullByte);\n    return this._textDecoder.decode(a);\n  }\n}\n\n// FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\nclass FBXTree {\n  add(key, val) {\n    this[key] = val;\n  }\n}\n\n// ************** UTILITY FUNCTIONS **************\n\nfunction isFbxFormatBinary(buffer) {\n  const CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\nfunction isFbxFormatASCII(text) {\n  const CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n  let cursor = 0;\n  function read(offset) {\n    const result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n  for (let i = 0; i < CORRECT.length; ++i) {\n    const num = read(1);\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getFbxVersion(text) {\n  const versionRegExp = /FBXVersion: (\\d+)/;\n  const match = text.match(versionRegExp);\n  if (match) {\n    const version = parseInt(match[1]);\n    return version;\n  }\n  throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n}\n\n// Converts FBX ticks into real time seconds.\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158000;\n}\nconst dataArray = [];\n\n// extracts the data from the correct position in the FBX array based on indexing type\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  let index;\n  switch (infoObject.mappingType) {\n    case 'ByPolygonVertex':\n      index = polygonVertexIndex;\n      break;\n    case 'ByPolygon':\n      index = polygonIndex;\n      break;\n    case 'ByVertice':\n      index = vertexIndex;\n      break;\n    case 'AllSame':\n      index = infoObject.indices[0];\n      break;\n    default:\n      console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n  }\n  if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n  const from = index * infoObject.dataSize;\n  const to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\nconst tempEuler = new Euler();\nconst tempVec = new Vector3();\n\n// generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\nfunction generateTransform(transformData) {\n  const lTranslationM = new Matrix4();\n  const lPreRotationM = new Matrix4();\n  const lRotationM = new Matrix4();\n  const lPostRotationM = new Matrix4();\n  const lScalingM = new Matrix4();\n  const lScalingPivotM = new Matrix4();\n  const lScalingOffsetM = new Matrix4();\n  const lRotationOffsetM = new Matrix4();\n  const lRotationPivotM = new Matrix4();\n  const lParentGX = new Matrix4();\n  const lParentLX = new Matrix4();\n  const lGlobalT = new Matrix4();\n  const inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n  if (transformData.preRotation) {\n    const array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder || Euler.DEFAULT_ORDER);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.rotation) {\n    const array = transformData.rotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder || Euler.DEFAULT_ORDER);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.postRotation) {\n    const array = transformData.postRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder || Euler.DEFAULT_ORDER);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    lPostRotationM.invert();\n  }\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale));\n\n  // Pivots and offsets\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));\n\n  // parent transform\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n  const lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM);\n  // Global Rotation\n  const lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX);\n\n  // Global Shear*Scaling\n  const lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  const lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  const lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  const lLSM = lScalingM;\n  const lGlobalRS = new Matrix4();\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    const lParentLSM_inv = lParentLSM.clone().invert();\n    const lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n  const lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  const lScalingPivotM_inv = lScalingPivotM.clone().invert();\n  // Calculate the local transform matrix\n  let lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  const lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS);\n\n  // from global to local\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n}\n\n// Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\nfunction getEulerOrder(order) {\n  order = order || 0;\n  const enums = ['ZYX',\n  // -> XYZ extrinsic\n  'YZX',\n  // -> XZY extrinsic\n  'XZY',\n  // -> YZX extrinsic\n  'ZXY',\n  // -> YXZ extrinsic\n  'YXZ',\n  // -> ZXY extrinsic\n  'XYZ' // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n  if (order === 6) {\n    console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n    return enums[0];\n  }\n  return enums[order];\n}\n\n// Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\nfunction parseNumberArray(value) {\n  const array = value.split(',').map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === undefined) from = 0;\n  if (to === undefined) to = buffer.byteLength;\n  return new TextDecoder().decode(new Uint8Array(buffer, from, to));\n}\nfunction append(a, b) {\n  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\nfunction slice(a, b, from, to) {\n  for (let i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n  return a;\n}\nexport { FBXLoader };","map":{"version":3,"names":["AmbientLight","AnimationClip","Bone","BufferGeometry","ClampToEdgeWrapping","Color","DirectionalLight","EquirectangularReflectionMapping","Euler","FileLoader","Float32BufferAttribute","Group","Line","LineBasicMaterial","Loader","LoaderUtils","MathUtils","Matrix3","Matrix4","Mesh","MeshLambertMaterial","MeshPhongMaterial","NumberKeyframeTrack","Object3D","OrthographicCamera","PerspectiveCamera","PointLight","PropertyBinding","Quaternion","QuaternionKeyframeTrack","RepeatWrapping","Skeleton","SkinnedMesh","SpotLight","Texture","TextureLoader","Uint16BufferAttribute","Vector2","Vector3","Vector4","VectorKeyframeTrack","SRGBColorSpace","ShapeUtils","fflate","NURBSCurve","fbxTree","connections","sceneGraph","FBXLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","undefined","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","getHandler","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","value","valueV","wrapS","wrapT","values","Scaling","repeat","x","y","Translation","offset","currentPath","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","setValues","BumpFactor","bumpScale","Diffuse","color","fromArray","convertSRGBToLinear","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","colorSpace","displacementMap","emissiveMap","normalMap","envMap","mapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","add","bindSkeleton","addGlobalSceneSettings","traverse","node","userData","transformData","parentMatrix","matrix","parentMatrixWorld","matrixWorld","transform","generateTransform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","sanitizeNodeName","originalName","getTransformData","bone","subBone","copy","cameraAttribute","attr","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","setFocalLength","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","angle","Math","PI","InnerAngle","degToRad","penumbra","OuterAngle","max","CastShadows","castShadow","geometry","DEFAULT_MATERIAL_NAME","attributes","vertexColors","FBX_Deformer","normalizeSkinWeights","reduce","geo","linewidth","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","bind","BindPoseNode","Pose","NbPoseNodes","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","unitScaleFactor","UnitScaleFactor","negativeMaterialIndices","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","vertex","setAttribute","colors","weightsIndices","vertexWeights","normal","normalMatrix","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","index","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","getNormalNewell","vertices","current","next","z","normalize","getNormalTangentAndBitangent","normalVector","up","abs","tangent","cross","bitangent","clone","flattenVertex","normalTangent","normalBitangent","dot","triangles","triangulationInput","triangulateShape","i0","i1","i2","parentGeo","parentGeoNode","morphTargetsRelative","morphAttributes","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UVIndex","ColorNode","Colors","ColorIndex","c","toArray","MaterialNode","materialIndexBuffer","Materials","materialIndices","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","startKnot","endKnot","Form","curve","points","getPoints","setFromPoints","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","modelID","rawModel","toString","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","decompose","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","result","interpolateRotations","setFromEuler","invert","quaternion","euler","quaternionValues","premultiply","multiply","prevQuat","w","val","morphNum","getObjectByName","morphTargetDictionary","sort","targetIndex","lastValue","currentValue","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","curvex","curvey","curvez","initialValueRad","currentValueRad","valuesSpan","absoluteSpan","maxAbsSpan","numSubIntervals","E1","E2","Q1","Q2","initialTime","timeSpan","Q","E","t","slerp","setFromQuaternion","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","text","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","elem","append","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","encoding","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","unzlibSync","reader2","littleEndian","dv","DataView","_textDecoder","TextDecoder","low","high","nullByte","decode","CORRECT","cursor","read","num","versionRegExp","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","setPosition","DEFAULT_ORDER","makeRotationFromEuler","lLRM","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGRSM","lParentGSM","lLSM","lGlobalRS","lParentLSM","setFromMatrixScale","lParentLSM_inv","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/view/node_modules/aframe-extras/node_modules/three/examples/jsm/loaders/FBXLoader.js"],"sourcesContent":["import {\n\tAmbientLight,\n\tAnimationClip,\n\tBone,\n\tBufferGeometry,\n\tClampToEdgeWrapping,\n\tColor,\n\tDirectionalLight,\n\tEquirectangularReflectionMapping,\n\tEuler,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLine,\n\tLineBasicMaterial,\n\tLoader,\n\tLoaderUtils,\n\tMathUtils,\n\tMatrix3,\n\tMatrix4,\n\tMesh,\n\tMeshLambertMaterial,\n\tMeshPhongMaterial,\n\tNumberKeyframeTrack,\n\tObject3D,\n\tOrthographicCamera,\n\tPerspectiveCamera,\n\tPointLight,\n\tPropertyBinding,\n\tQuaternion,\n\tQuaternionKeyframeTrack,\n\tRepeatWrapping,\n\tSkeleton,\n\tSkinnedMesh,\n\tSpotLight,\n\tTexture,\n\tTextureLoader,\n\tUint16BufferAttribute,\n\tVector2,\n\tVector3,\n\tVector4,\n\tVectorKeyframeTrack,\n\tSRGBColorSpace,\n\tShapeUtils\n} from 'three';\nimport * as fflate from '../libs/fflate.module.js';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * Binary format specification:\n *\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\n\nlet fbxTree;\nlet connections;\nlet sceneGraph;\n\nclass FBXLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( scope.path === '' ) ? LoaderUtils.extractUrlBase( url ) : scope.path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( buffer, path ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( FBXBuffer, path ) {\n\n\t\tif ( isFbxFormatBinary( FBXBuffer ) ) {\n\n\t\t\tfbxTree = new BinaryParser().parse( FBXBuffer );\n\n\t\t} else {\n\n\t\t\tconst FBXText = convertArrayBufferToString( FBXBuffer );\n\n\t\t\tif ( ! isFbxFormatASCII( FBXText ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown format.' );\n\n\t\t\t}\n\n\t\t\tif ( getFbxVersion( FBXText ) < 7000 ) {\n\n\t\t\t\tthrow new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion( FBXText ) );\n\n\t\t\t}\n\n\t\t\tfbxTree = new TextParser().parse( FBXText );\n\n\t\t}\n\n\t\t// console.log( fbxTree );\n\n\t\tconst textureLoader = new TextureLoader( this.manager ).setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\treturn new FBXTreeParser( textureLoader, this.manager ).parse( fbxTree );\n\n\t}\n\n}\n\n// Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\nclass FBXTreeParser {\n\n\tconstructor( textureLoader, manager ) {\n\n\t\tthis.textureLoader = textureLoader;\n\t\tthis.manager = manager;\n\n\t}\n\n\tparse() {\n\n\t\tconnections = this.parseConnections();\n\n\t\tconst images = this.parseImages();\n\t\tconst textures = this.parseTextures( images );\n\t\tconst materials = this.parseMaterials( textures );\n\t\tconst deformers = this.parseDeformers();\n\t\tconst geometryMap = new GeometryParser().parse( deformers );\n\n\t\tthis.parseScene( deformers, geometryMap, materials );\n\n\t\treturn sceneGraph;\n\n\t}\n\n\t// Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n\t// and details the connection type\n\tparseConnections() {\n\n\t\tconst connectionMap = new Map();\n\n\t\tif ( 'Connections' in fbxTree ) {\n\n\t\t\tconst rawConnections = fbxTree.Connections.connections;\n\n\t\t\trawConnections.forEach( function ( rawConnection ) {\n\n\t\t\t\tconst fromID = rawConnection[ 0 ];\n\t\t\t\tconst toID = rawConnection[ 1 ];\n\t\t\t\tconst relationship = rawConnection[ 2 ];\n\n\t\t\t\tif ( ! connectionMap.has( fromID ) ) {\n\n\t\t\t\t\tconnectionMap.set( fromID, {\n\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\tchildren: []\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tconst parentRelationship = { ID: toID, relationship: relationship };\n\t\t\t\tconnectionMap.get( fromID ).parents.push( parentRelationship );\n\n\t\t\t\tif ( ! connectionMap.has( toID ) ) {\n\n\t\t\t\t\tconnectionMap.set( toID, {\n\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\tchildren: []\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tconst childRelationship = { ID: fromID, relationship: relationship };\n\t\t\t\tconnectionMap.get( toID ).children.push( childRelationship );\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn connectionMap;\n\n\t}\n\n\t// Parse FBXTree.Objects.Video for embedded image data\n\t// These images are connected to textures in FBXTree.Objects.Textures\n\t// via FBXTree.Connections.\n\tparseImages() {\n\n\t\tconst images = {};\n\t\tconst blobs = {};\n\n\t\tif ( 'Video' in fbxTree.Objects ) {\n\n\t\t\tconst videoNodes = fbxTree.Objects.Video;\n\n\t\t\tfor ( const nodeID in videoNodes ) {\n\n\t\t\t\tconst videoNode = videoNodes[ nodeID ];\n\n\t\t\t\tconst id = parseInt( nodeID );\n\n\t\t\t\timages[ id ] = videoNode.RelativeFilename || videoNode.Filename;\n\n\t\t\t\t// raw image data is in videoNode.Content\n\t\t\t\tif ( 'Content' in videoNode ) {\n\n\t\t\t\t\tconst arrayBufferContent = ( videoNode.Content instanceof ArrayBuffer ) && ( videoNode.Content.byteLength > 0 );\n\t\t\t\t\tconst base64Content = ( typeof videoNode.Content === 'string' ) && ( videoNode.Content !== '' );\n\n\t\t\t\t\tif ( arrayBufferContent || base64Content ) {\n\n\t\t\t\t\t\tconst image = this.parseImage( videoNodes[ nodeID ] );\n\n\t\t\t\t\t\tblobs[ videoNode.RelativeFilename || videoNode.Filename ] = image;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( const id in images ) {\n\n\t\t\tconst filename = images[ id ];\n\n\t\t\tif ( blobs[ filename ] !== undefined ) images[ id ] = blobs[ filename ];\n\t\t\telse images[ id ] = images[ id ].split( '\\\\' ).pop();\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\t// Parse embedded image data in FBXTree.Video.Content\n\tparseImage( videoNode ) {\n\n\t\tconst content = videoNode.Content;\n\t\tconst fileName = videoNode.RelativeFilename || videoNode.Filename;\n\t\tconst extension = fileName.slice( fileName.lastIndexOf( '.' ) + 1 ).toLowerCase();\n\n\t\tlet type;\n\n\t\tswitch ( extension ) {\n\n\t\t\tcase 'bmp':\n\n\t\t\t\ttype = 'image/bmp';\n\t\t\t\tbreak;\n\n\t\t\tcase 'jpg':\n\t\t\tcase 'jpeg':\n\n\t\t\t\ttype = 'image/jpeg';\n\t\t\t\tbreak;\n\n\t\t\tcase 'png':\n\n\t\t\t\ttype = 'image/png';\n\t\t\t\tbreak;\n\n\t\t\tcase 'tif':\n\n\t\t\t\ttype = 'image/tiff';\n\t\t\t\tbreak;\n\n\t\t\tcase 'tga':\n\n\t\t\t\tif ( this.manager.getHandler( '.tga' ) === null ) {\n\n\t\t\t\t\tconsole.warn( 'FBXLoader: TGA loader not found, skipping ', fileName );\n\n\t\t\t\t}\n\n\t\t\t\ttype = 'image/tga';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'FBXLoader: Image type \"' + extension + '\" is not supported.' );\n\t\t\t\treturn;\n\n\t\t}\n\n\t\tif ( typeof content === 'string' ) { // ASCII format\n\n\t\t\treturn 'data:' + type + ';base64,' + content;\n\n\t\t} else { // Binary Format\n\n\t\t\tconst array = new Uint8Array( content );\n\t\t\treturn window.URL.createObjectURL( new Blob( [ array ], { type: type } ) );\n\n\t\t}\n\n\t}\n\n\t// Parse nodes in FBXTree.Objects.Texture\n\t// These contain details such as UV scaling, cropping, rotation etc and are connected\n\t// to images in FBXTree.Objects.Video\n\tparseTextures( images ) {\n\n\t\tconst textureMap = new Map();\n\n\t\tif ( 'Texture' in fbxTree.Objects ) {\n\n\t\t\tconst textureNodes = fbxTree.Objects.Texture;\n\t\t\tfor ( const nodeID in textureNodes ) {\n\n\t\t\t\tconst texture = this.parseTexture( textureNodes[ nodeID ], images );\n\t\t\t\ttextureMap.set( parseInt( nodeID ), texture );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textureMap;\n\n\t}\n\n\t// Parse individual node in FBXTree.Objects.Texture\n\tparseTexture( textureNode, images ) {\n\n\t\tconst texture = this.loadTexture( textureNode, images );\n\n\t\ttexture.ID = textureNode.id;\n\n\t\ttexture.name = textureNode.attrName;\n\n\t\tconst wrapModeU = textureNode.WrapModeU;\n\t\tconst wrapModeV = textureNode.WrapModeV;\n\n\t\tconst valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n\t\tconst valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n\n\t\t// http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n\t\t// 0: repeat(default), 1: clamp\n\n\t\ttexture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\t\ttexture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\n\t\tif ( 'Scaling' in textureNode ) {\n\n\t\t\tconst values = textureNode.Scaling.value;\n\n\t\t\ttexture.repeat.x = values[ 0 ];\n\t\t\ttexture.repeat.y = values[ 1 ];\n\n\t\t}\n\n\t\tif ( 'Translation' in textureNode ) {\n\n\t\t\tconst values = textureNode.Translation.value;\n\n\t\t\ttexture.offset.x = values[ 0 ];\n\t\t\ttexture.offset.y = values[ 1 ];\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\t// load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n\tloadTexture( textureNode, images ) {\n\n\t\tlet fileName;\n\n\t\tconst currentPath = this.textureLoader.path;\n\n\t\tconst children = connections.get( textureNode.id ).children;\n\n\t\tif ( children !== undefined && children.length > 0 && images[ children[ 0 ].ID ] !== undefined ) {\n\n\t\t\tfileName = images[ children[ 0 ].ID ];\n\n\t\t\tif ( fileName.indexOf( 'blob:' ) === 0 || fileName.indexOf( 'data:' ) === 0 ) {\n\n\t\t\t\tthis.textureLoader.setPath( undefined );\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet texture;\n\n\t\tconst extension = textureNode.FileName.slice( - 3 ).toLowerCase();\n\n\t\tif ( extension === 'tga' ) {\n\n\t\t\tconst loader = this.manager.getHandler( '.tga' );\n\n\t\t\tif ( loader === null ) {\n\n\t\t\t\tconsole.warn( 'FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename );\n\t\t\t\ttexture = new Texture();\n\n\t\t\t} else {\n\n\t\t\t\tloader.setPath( this.textureLoader.path );\n\t\t\t\ttexture = loader.load( fileName );\n\n\t\t\t}\n\n\t\t} else if ( extension === 'dds' ) {\n\n\t\t\tconst loader = this.manager.getHandler( '.dds' );\n\n\t\t\tif ( loader === null ) {\n\n\t\t\t\tconsole.warn( 'FBXLoader: DDS loader not found, creating placeholder texture for', textureNode.RelativeFilename );\n\t\t\t\ttexture = new Texture();\n\n\t\t\t} else {\n\n\t\t\t\tloader.setPath( this.textureLoader.path );\n\t\t\t\ttexture = loader.load( fileName );\n\n\t\t\t}\n\n\t\t} else if ( extension === 'psd' ) {\n\n\t\t\tconsole.warn( 'FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename );\n\t\t\ttexture = new Texture();\n\n\t\t} else {\n\n\t\t\ttexture = this.textureLoader.load( fileName );\n\n\t\t}\n\n\t\tthis.textureLoader.setPath( currentPath );\n\n\t\treturn texture;\n\n\t}\n\n\t// Parse nodes in FBXTree.Objects.Material\n\tparseMaterials( textureMap ) {\n\n\t\tconst materialMap = new Map();\n\n\t\tif ( 'Material' in fbxTree.Objects ) {\n\n\t\t\tconst materialNodes = fbxTree.Objects.Material;\n\n\t\t\tfor ( const nodeID in materialNodes ) {\n\n\t\t\t\tconst material = this.parseMaterial( materialNodes[ nodeID ], textureMap );\n\n\t\t\t\tif ( material !== null ) materialMap.set( parseInt( nodeID ), material );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materialMap;\n\n\t}\n\n\t// Parse single node in FBXTree.Objects.Material\n\t// Materials are connected to texture maps in FBXTree.Objects.Textures\n\t// FBX format currently only supports Lambert and Phong shading models\n\tparseMaterial( materialNode, textureMap ) {\n\n\t\tconst ID = materialNode.id;\n\t\tconst name = materialNode.attrName;\n\t\tlet type = materialNode.ShadingModel;\n\n\t\t// Case where FBX wraps shading model in property object.\n\t\tif ( typeof type === 'object' ) {\n\n\t\t\ttype = type.value;\n\n\t\t}\n\n\t\t// Ignore unused materials which don't have any connections.\n\t\tif ( ! connections.has( ID ) ) return null;\n\n\t\tconst parameters = this.parseParameters( materialNode, textureMap, ID );\n\n\t\tlet material;\n\n\t\tswitch ( type.toLowerCase() ) {\n\n\t\t\tcase 'phong':\n\t\t\t\tmaterial = new MeshPhongMaterial();\n\t\t\t\tbreak;\n\t\t\tcase 'lambert':\n\t\t\t\tmaterial = new MeshLambertMaterial();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type );\n\t\t\t\tmaterial = new MeshPhongMaterial();\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tmaterial.setValues( parameters );\n\t\tmaterial.name = name;\n\n\t\treturn material;\n\n\t}\n\n\t// Parse FBX material and return parameters suitable for a three.js material\n\t// Also parse the texture map and return any textures associated with the material\n\tparseParameters( materialNode, textureMap, ID ) {\n\n\t\tconst parameters = {};\n\n\t\tif ( materialNode.BumpFactor ) {\n\n\t\t\tparameters.bumpScale = materialNode.BumpFactor.value;\n\n\t\t}\n\n\t\tif ( materialNode.Diffuse ) {\n\n\t\t\tparameters.color = new Color().fromArray( materialNode.Diffuse.value ).convertSRGBToLinear();\n\n\t\t} else if ( materialNode.DiffuseColor && ( materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB' ) ) {\n\n\t\t\t// The blender exporter exports diffuse here instead of in materialNode.Diffuse\n\t\t\tparameters.color = new Color().fromArray( materialNode.DiffuseColor.value ).convertSRGBToLinear();\n\n\t\t}\n\n\t\tif ( materialNode.DisplacementFactor ) {\n\n\t\t\tparameters.displacementScale = materialNode.DisplacementFactor.value;\n\n\t\t}\n\n\t\tif ( materialNode.Emissive ) {\n\n\t\t\tparameters.emissive = new Color().fromArray( materialNode.Emissive.value ).convertSRGBToLinear();\n\n\t\t} else if ( materialNode.EmissiveColor && ( materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB' ) ) {\n\n\t\t\t// The blender exporter exports emissive color here instead of in materialNode.Emissive\n\t\t\tparameters.emissive = new Color().fromArray( materialNode.EmissiveColor.value ).convertSRGBToLinear();\n\n\t\t}\n\n\t\tif ( materialNode.EmissiveFactor ) {\n\n\t\t\tparameters.emissiveIntensity = parseFloat( materialNode.EmissiveFactor.value );\n\n\t\t}\n\n\t\tif ( materialNode.Opacity ) {\n\n\t\t\tparameters.opacity = parseFloat( materialNode.Opacity.value );\n\n\t\t}\n\n\t\tif ( parameters.opacity < 1.0 ) {\n\n\t\t\tparameters.transparent = true;\n\n\t\t}\n\n\t\tif ( materialNode.ReflectionFactor ) {\n\n\t\t\tparameters.reflectivity = materialNode.ReflectionFactor.value;\n\n\t\t}\n\n\t\tif ( materialNode.Shininess ) {\n\n\t\t\tparameters.shininess = materialNode.Shininess.value;\n\n\t\t}\n\n\t\tif ( materialNode.Specular ) {\n\n\t\t\tparameters.specular = new Color().fromArray( materialNode.Specular.value ).convertSRGBToLinear();\n\n\t\t} else if ( materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color' ) {\n\n\t\t\t// The blender exporter exports specular color here instead of in materialNode.Specular\n\t\t\tparameters.specular = new Color().fromArray( materialNode.SpecularColor.value ).convertSRGBToLinear();\n\n\t\t}\n\n\t\tconst scope = this;\n\t\tconnections.get( ID ).children.forEach( function ( child ) {\n\n\t\t\tconst type = child.relationship;\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'Bump':\n\t\t\t\t\tparameters.bumpMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Maya|TEX_ao_map':\n\t\t\t\t\tparameters.aoMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DiffuseColor':\n\t\t\t\tcase 'Maya|TEX_color_map':\n\t\t\t\t\tparameters.map = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.map !== undefined ) {\n\n\t\t\t\t\t\tparameters.map.colorSpace = SRGBColorSpace;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DisplacementColor':\n\t\t\t\t\tparameters.displacementMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EmissiveColor':\n\t\t\t\t\tparameters.emissiveMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.emissiveMap !== undefined ) {\n\n\t\t\t\t\t\tparameters.emissiveMap.colorSpace = SRGBColorSpace;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'NormalMap':\n\t\t\t\tcase 'Maya|TEX_normal_map':\n\t\t\t\t\tparameters.normalMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ReflectionColor':\n\t\t\t\t\tparameters.envMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.envMap !== undefined ) {\n\n\t\t\t\t\t\tparameters.envMap.mapping = EquirectangularReflectionMapping;\n\t\t\t\t\t\tparameters.envMap.colorSpace = SRGBColorSpace;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpecularColor':\n\t\t\t\t\tparameters.specularMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tif ( parameters.specularMap !== undefined ) {\n\n\t\t\t\t\t\tparameters.specularMap.colorSpace = SRGBColorSpace;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'TransparentColor':\n\t\t\t\tcase 'TransparencyFactor':\n\t\t\t\t\tparameters.alphaMap = scope.getTexture( textureMap, child.ID );\n\t\t\t\t\tparameters.transparent = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientColor':\n\t\t\t\tcase 'ShininessExponent': // AKA glossiness map\n\t\t\t\tcase 'SpecularFactor': // AKA specularLevel\n\t\t\t\tcase 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn parameters;\n\n\t}\n\n\t// get a texture from the textureMap for use by a material.\n\tgetTexture( textureMap, id ) {\n\n\t\t// if the texture is a layered texture, just use the first layer and issue a warning\n\t\tif ( 'LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture ) {\n\n\t\t\tconsole.warn( 'THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.' );\n\t\t\tid = connections.get( id ).children[ 0 ].ID;\n\n\t\t}\n\n\t\treturn textureMap.get( id );\n\n\t}\n\n\t// Parse nodes in FBXTree.Objects.Deformer\n\t// Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n\t// Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\tparseDeformers() {\n\n\t\tconst skeletons = {};\n\t\tconst morphTargets = {};\n\n\t\tif ( 'Deformer' in fbxTree.Objects ) {\n\n\t\t\tconst DeformerNodes = fbxTree.Objects.Deformer;\n\n\t\t\tfor ( const nodeID in DeformerNodes ) {\n\n\t\t\t\tconst deformerNode = DeformerNodes[ nodeID ];\n\n\t\t\t\tconst relationships = connections.get( parseInt( nodeID ) );\n\n\t\t\t\tif ( deformerNode.attrType === 'Skin' ) {\n\n\t\t\t\t\tconst skeleton = this.parseSkeleton( relationships, DeformerNodes );\n\t\t\t\t\tskeleton.ID = nodeID;\n\n\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: skeleton attached to more than one geometry is not supported.' );\n\t\t\t\t\tskeleton.geometryID = relationships.parents[ 0 ].ID;\n\n\t\t\t\t\tskeletons[ nodeID ] = skeleton;\n\n\t\t\t\t} else if ( deformerNode.attrType === 'BlendShape' ) {\n\n\t\t\t\t\tconst morphTarget = {\n\t\t\t\t\t\tid: nodeID,\n\t\t\t\t\t};\n\n\t\t\t\t\tmorphTarget.rawTargets = this.parseMorphTargets( relationships, DeformerNodes );\n\t\t\t\t\tmorphTarget.id = nodeID;\n\n\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: morph target attached to more than one geometry is not supported.' );\n\n\t\t\t\t\tmorphTargets[ nodeID ] = morphTarget;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tskeletons: skeletons,\n\t\t\tmorphTargets: morphTargets,\n\n\t\t};\n\n\t}\n\n\t// Parse single nodes in FBXTree.Objects.Deformer\n\t// The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n\t// Each skin node represents a skeleton and each cluster node represents a bone\n\tparseSkeleton( relationships, deformerNodes ) {\n\n\t\tconst rawBones = [];\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tconst boneNode = deformerNodes[ child.ID ];\n\n\t\t\tif ( boneNode.attrType !== 'Cluster' ) return;\n\n\t\t\tconst rawBone = {\n\n\t\t\t\tID: child.ID,\n\t\t\t\tindices: [],\n\t\t\t\tweights: [],\n\t\t\t\ttransformLink: new Matrix4().fromArray( boneNode.TransformLink.a ),\n\t\t\t\t// transform: new Matrix4().fromArray( boneNode.Transform.a ),\n\t\t\t\t// linkMode: boneNode.Mode,\n\n\t\t\t};\n\n\t\t\tif ( 'Indexes' in boneNode ) {\n\n\t\t\t\trawBone.indices = boneNode.Indexes.a;\n\t\t\t\trawBone.weights = boneNode.Weights.a;\n\n\t\t\t}\n\n\t\t\trawBones.push( rawBone );\n\n\t\t} );\n\n\t\treturn {\n\n\t\t\trawBones: rawBones,\n\t\t\tbones: []\n\n\t\t};\n\n\t}\n\n\t// The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\tparseMorphTargets( relationships, deformerNodes ) {\n\n\t\tconst rawMorphTargets = [];\n\n\t\tfor ( let i = 0; i < relationships.children.length; i ++ ) {\n\n\t\t\tconst child = relationships.children[ i ];\n\n\t\t\tconst morphTargetNode = deformerNodes[ child.ID ];\n\n\t\t\tconst rawMorphTarget = {\n\n\t\t\t\tname: morphTargetNode.attrName,\n\t\t\t\tinitialWeight: morphTargetNode.DeformPercent,\n\t\t\t\tid: morphTargetNode.id,\n\t\t\t\tfullWeights: morphTargetNode.FullWeights.a\n\n\t\t\t};\n\n\t\t\tif ( morphTargetNode.attrType !== 'BlendShapeChannel' ) return;\n\n\t\t\trawMorphTarget.geoID = connections.get( parseInt( child.ID ) ).children.filter( function ( child ) {\n\n\t\t\t\treturn child.relationship === undefined;\n\n\t\t\t} )[ 0 ].ID;\n\n\t\t\trawMorphTargets.push( rawMorphTarget );\n\n\t\t}\n\n\t\treturn rawMorphTargets;\n\n\t}\n\n\t// create the main Group() to be returned by the loader\n\tparseScene( deformers, geometryMap, materialMap ) {\n\n\t\tsceneGraph = new Group();\n\n\t\tconst modelMap = this.parseModels( deformers.skeletons, geometryMap, materialMap );\n\n\t\tconst modelNodes = fbxTree.Objects.Model;\n\n\t\tconst scope = this;\n\t\tmodelMap.forEach( function ( model ) {\n\n\t\t\tconst modelNode = modelNodes[ model.ID ];\n\t\t\tscope.setLookAtProperties( model, modelNode );\n\n\t\t\tconst parentConnections = connections.get( model.ID ).parents;\n\n\t\t\tparentConnections.forEach( function ( connection ) {\n\n\t\t\t\tconst parent = modelMap.get( connection.ID );\n\t\t\t\tif ( parent !== undefined ) parent.add( model );\n\n\t\t\t} );\n\n\t\t\tif ( model.parent === null ) {\n\n\t\t\t\tsceneGraph.add( model );\n\n\t\t\t}\n\n\n\t\t} );\n\n\t\tthis.bindSkeleton( deformers.skeletons, geometryMap, modelMap );\n\n\t\tthis.addGlobalSceneSettings();\n\n\t\tsceneGraph.traverse( function ( node ) {\n\n\t\t\tif ( node.userData.transformData ) {\n\n\t\t\t\tif ( node.parent ) {\n\n\t\t\t\t\tnode.userData.transformData.parentMatrix = node.parent.matrix;\n\t\t\t\t\tnode.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n\n\t\t\t\t}\n\n\t\t\t\tconst transform = generateTransform( node.userData.transformData );\n\n\t\t\t\tnode.applyMatrix4( transform );\n\t\t\t\tnode.updateWorldMatrix();\n\n\t\t\t}\n\n\t\t} );\n\n\t\tconst animations = new AnimationParser().parse();\n\n\t\t// if all the models where already combined in a single group, just return that\n\t\tif ( sceneGraph.children.length === 1 && sceneGraph.children[ 0 ].isGroup ) {\n\n\t\t\tsceneGraph.children[ 0 ].animations = animations;\n\t\t\tsceneGraph = sceneGraph.children[ 0 ];\n\n\t\t}\n\n\t\tsceneGraph.animations = animations;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.Model\n\tparseModels( skeletons, geometryMap, materialMap ) {\n\n\t\tconst modelMap = new Map();\n\t\tconst modelNodes = fbxTree.Objects.Model;\n\n\t\tfor ( const nodeID in modelNodes ) {\n\n\t\t\tconst id = parseInt( nodeID );\n\t\t\tconst node = modelNodes[ nodeID ];\n\t\t\tconst relationships = connections.get( id );\n\n\t\t\tlet model = this.buildSkeleton( relationships, skeletons, id, node.attrName );\n\n\t\t\tif ( ! model ) {\n\n\t\t\t\tswitch ( node.attrType ) {\n\n\t\t\t\t\tcase 'Camera':\n\t\t\t\t\t\tmodel = this.createCamera( relationships );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Light':\n\t\t\t\t\t\tmodel = this.createLight( relationships );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Mesh':\n\t\t\t\t\t\tmodel = this.createMesh( relationships, geometryMap, materialMap );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'NurbsCurve':\n\t\t\t\t\t\tmodel = this.createCurve( relationships, geometryMap );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'LimbNode':\n\t\t\t\t\tcase 'Root':\n\t\t\t\t\t\tmodel = new Bone();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Null':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmodel = new Group();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tmodel.name = node.attrName ? PropertyBinding.sanitizeNodeName( node.attrName ) : '';\n\t\t\t\tmodel.userData.originalName = node.attrName;\n\n\t\t\t\tmodel.ID = id;\n\n\t\t\t}\n\n\t\t\tthis.getTransformData( model, node );\n\t\t\tmodelMap.set( id, model );\n\n\t\t}\n\n\t\treturn modelMap;\n\n\t}\n\n\tbuildSkeleton( relationships, skeletons, id, name ) {\n\n\t\tlet bone = null;\n\n\t\trelationships.parents.forEach( function ( parent ) {\n\n\t\t\tfor ( const ID in skeletons ) {\n\n\t\t\t\tconst skeleton = skeletons[ ID ];\n\n\t\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t\tif ( rawBone.ID === parent.ID ) {\n\n\t\t\t\t\t\tconst subBone = bone;\n\t\t\t\t\t\tbone = new Bone();\n\n\t\t\t\t\t\tbone.matrixWorld.copy( rawBone.transformLink );\n\n\t\t\t\t\t\t// set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n\t\t\t\t\t\tbone.name = name ? PropertyBinding.sanitizeNodeName( name ) : '';\n\t\t\t\t\t\tbone.userData.originalName = name;\n\t\t\t\t\t\tbone.ID = id;\n\n\t\t\t\t\t\tskeleton.bones[ i ] = bone;\n\n\t\t\t\t\t\t// In cases where a bone is shared between multiple meshes\n\t\t\t\t\t\t// duplicate the bone here and and it as a child of the first bone\n\t\t\t\t\t\tif ( subBone !== null ) {\n\n\t\t\t\t\t\t\tbone.add( subBone );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn bone;\n\n\t}\n\n\t// create a PerspectiveCamera or OrthographicCamera\n\tcreateCamera( relationships ) {\n\n\t\tlet model;\n\t\tlet cameraAttribute;\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tconst attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\tcameraAttribute = attr;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( cameraAttribute === undefined ) {\n\n\t\t\tmodel = new Object3D();\n\n\t\t} else {\n\n\t\t\tlet type = 0;\n\t\t\tif ( cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1 ) {\n\n\t\t\t\ttype = 1;\n\n\t\t\t}\n\n\t\t\tlet nearClippingPlane = 1;\n\t\t\tif ( cameraAttribute.NearPlane !== undefined ) {\n\n\t\t\t\tnearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n\n\t\t\t}\n\n\t\t\tlet farClippingPlane = 1000;\n\t\t\tif ( cameraAttribute.FarPlane !== undefined ) {\n\n\t\t\t\tfarClippingPlane = cameraAttribute.FarPlane.value / 1000;\n\n\t\t\t}\n\n\n\t\t\tlet width = window.innerWidth;\n\t\t\tlet height = window.innerHeight;\n\n\t\t\tif ( cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined ) {\n\n\t\t\t\twidth = cameraAttribute.AspectWidth.value;\n\t\t\t\theight = cameraAttribute.AspectHeight.value;\n\n\t\t\t}\n\n\t\t\tconst aspect = width / height;\n\n\t\t\tlet fov = 45;\n\t\t\tif ( cameraAttribute.FieldOfView !== undefined ) {\n\n\t\t\t\tfov = cameraAttribute.FieldOfView.value;\n\n\t\t\t}\n\n\t\t\tconst focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 0: // Perspective\n\t\t\t\t\tmodel = new PerspectiveCamera( fov, aspect, nearClippingPlane, farClippingPlane );\n\t\t\t\t\tif ( focalLength !== null ) model.setFocalLength( focalLength );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1: // Orthographic\n\t\t\t\t\tmodel = new OrthographicCamera( - width / 2, width / 2, height / 2, - height / 2, nearClippingPlane, farClippingPlane );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown camera type ' + type + '.' );\n\t\t\t\t\tmodel = new Object3D();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn model;\n\n\t}\n\n\t// Create a DirectionalLight, PointLight or SpotLight\n\tcreateLight( relationships ) {\n\n\t\tlet model;\n\t\tlet lightAttribute;\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tconst attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\tlightAttribute = attr;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( lightAttribute === undefined ) {\n\n\t\t\tmodel = new Object3D();\n\n\t\t} else {\n\n\t\t\tlet type;\n\n\t\t\t// LightType can be undefined for Point lights\n\t\t\tif ( lightAttribute.LightType === undefined ) {\n\n\t\t\t\ttype = 0;\n\n\t\t\t} else {\n\n\t\t\t\ttype = lightAttribute.LightType.value;\n\n\t\t\t}\n\n\t\t\tlet color = 0xffffff;\n\n\t\t\tif ( lightAttribute.Color !== undefined ) {\n\n\t\t\t\tcolor = new Color().fromArray( lightAttribute.Color.value ).convertSRGBToLinear();\n\n\t\t\t}\n\n\t\t\tlet intensity = ( lightAttribute.Intensity === undefined ) ? 1 : lightAttribute.Intensity.value / 100;\n\n\t\t\t// light disabled\n\t\t\tif ( lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0 ) {\n\n\t\t\t\tintensity = 0;\n\n\t\t\t}\n\n\t\t\tlet distance = 0;\n\t\t\tif ( lightAttribute.FarAttenuationEnd !== undefined ) {\n\n\t\t\t\tif ( lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0 ) {\n\n\t\t\t\t\tdistance = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdistance = lightAttribute.FarAttenuationEnd.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\t\t\tconst decay = 1;\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 0: // Point\n\t\t\t\t\tmodel = new PointLight( color, intensity, distance, decay );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1: // Directional\n\t\t\t\t\tmodel = new DirectionalLight( color, intensity );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2: // Spot\n\t\t\t\t\tlet angle = Math.PI / 3;\n\n\t\t\t\t\tif ( lightAttribute.InnerAngle !== undefined ) {\n\n\t\t\t\t\t\tangle = MathUtils.degToRad( lightAttribute.InnerAngle.value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet penumbra = 0;\n\t\t\t\t\tif ( lightAttribute.OuterAngle !== undefined ) {\n\n\t\t\t\t\t\t// TODO: this is not correct - FBX calculates outer and inner angle in degrees\n\t\t\t\t\t\t// with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n\t\t\t\t\t\t// while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n\t\t\t\t\t\tpenumbra = MathUtils.degToRad( lightAttribute.OuterAngle.value );\n\t\t\t\t\t\tpenumbra = Math.max( penumbra, 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel = new SpotLight( color, intensity, distance, angle, penumbra, decay );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.' );\n\t\t\t\t\tmodel = new PointLight( color, intensity );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1 ) {\n\n\t\t\t\tmodel.castShadow = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn model;\n\n\t}\n\n\tcreateMesh( relationships, geometryMap, materialMap ) {\n\n\t\tlet model;\n\t\tlet geometry = null;\n\t\tlet material = null;\n\t\tconst materials = [];\n\n\t\t// get geometry and materials(s) from connections\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tif ( geometryMap.has( child.ID ) ) {\n\n\t\t\t\tgeometry = geometryMap.get( child.ID );\n\n\t\t\t}\n\n\t\t\tif ( materialMap.has( child.ID ) ) {\n\n\t\t\t\tmaterials.push( materialMap.get( child.ID ) );\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( materials.length > 1 ) {\n\n\t\t\tmaterial = materials;\n\n\t\t} else if ( materials.length > 0 ) {\n\n\t\t\tmaterial = materials[ 0 ];\n\n\t\t} else {\n\n\t\t\tmaterial = new MeshPhongMaterial( {\n\t\t\t\tname: Loader.DEFAULT_MATERIAL_NAME,\n\t\t\t\tcolor: 0xcccccc\n\t\t\t} );\n\t\t\tmaterials.push( material );\n\n\t\t}\n\n\t\tif ( 'color' in geometry.attributes ) {\n\n\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\tmaterial.vertexColors = true;\n\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( geometry.FBX_Deformer ) {\n\n\t\t\tmodel = new SkinnedMesh( geometry, material );\n\t\t\tmodel.normalizeSkinWeights();\n\n\t\t} else {\n\n\t\t\tmodel = new Mesh( geometry, material );\n\n\t\t}\n\n\t\treturn model;\n\n\t}\n\n\tcreateCurve( relationships, geometryMap ) {\n\n\t\tconst geometry = relationships.children.reduce( function ( geo, child ) {\n\n\t\t\tif ( geometryMap.has( child.ID ) ) geo = geometryMap.get( child.ID );\n\n\t\t\treturn geo;\n\n\t\t}, null );\n\n\t\t// FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\t\tconst material = new LineBasicMaterial( {\n\t\t\tname: Loader.DEFAULT_MATERIAL_NAME,\n\t\t\tcolor: 0x3300ff,\n\t\t\tlinewidth: 1\n\t\t} );\n\t\treturn new Line( geometry, material );\n\n\t}\n\n\t// parse the model node for transform data\n\tgetTransformData( model, modelNode ) {\n\n\t\tconst transformData = {};\n\n\t\tif ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );\n\n\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );\n\t\telse transformData.eulerOrder = 'ZYX';\n\n\t\tif ( 'Lcl_Translation' in modelNode ) transformData.translation = modelNode.Lcl_Translation.value;\n\n\t\tif ( 'PreRotation' in modelNode ) transformData.preRotation = modelNode.PreRotation.value;\n\t\tif ( 'Lcl_Rotation' in modelNode ) transformData.rotation = modelNode.Lcl_Rotation.value;\n\t\tif ( 'PostRotation' in modelNode ) transformData.postRotation = modelNode.PostRotation.value;\n\n\t\tif ( 'Lcl_Scaling' in modelNode ) transformData.scale = modelNode.Lcl_Scaling.value;\n\n\t\tif ( 'ScalingOffset' in modelNode ) transformData.scalingOffset = modelNode.ScalingOffset.value;\n\t\tif ( 'ScalingPivot' in modelNode ) transformData.scalingPivot = modelNode.ScalingPivot.value;\n\n\t\tif ( 'RotationOffset' in modelNode ) transformData.rotationOffset = modelNode.RotationOffset.value;\n\t\tif ( 'RotationPivot' in modelNode ) transformData.rotationPivot = modelNode.RotationPivot.value;\n\n\t\tmodel.userData.transformData = transformData;\n\n\t}\n\n\tsetLookAtProperties( model, modelNode ) {\n\n\t\tif ( 'LookAtProperty' in modelNode ) {\n\n\t\t\tconst children = connections.get( model.ID ).children;\n\n\t\t\tchildren.forEach( function ( child ) {\n\n\t\t\t\tif ( child.relationship === 'LookAtProperty' ) {\n\n\t\t\t\t\tconst lookAtTarget = fbxTree.Objects.Model[ child.ID ];\n\n\t\t\t\t\tif ( 'Lcl_Translation' in lookAtTarget ) {\n\n\t\t\t\t\t\tconst pos = lookAtTarget.Lcl_Translation.value;\n\n\t\t\t\t\t\t// DirectionalLight, SpotLight\n\t\t\t\t\t\tif ( model.target !== undefined ) {\n\n\t\t\t\t\t\t\tmodel.target.position.fromArray( pos );\n\t\t\t\t\t\t\tsceneGraph.add( model.target );\n\n\t\t\t\t\t\t} else { // Cameras and other Object3Ds\n\n\t\t\t\t\t\t\tmodel.lookAt( new Vector3().fromArray( pos ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\tbindSkeleton( skeletons, geometryMap, modelMap ) {\n\n\t\tconst bindMatrices = this.parsePoseNodes();\n\n\t\tfor ( const ID in skeletons ) {\n\n\t\t\tconst skeleton = skeletons[ ID ];\n\n\t\t\tconst parents = connections.get( parseInt( skeleton.ID ) ).parents;\n\n\t\t\tparents.forEach( function ( parent ) {\n\n\t\t\t\tif ( geometryMap.has( parent.ID ) ) {\n\n\t\t\t\t\tconst geoID = parent.ID;\n\t\t\t\t\tconst geoRelationships = connections.get( geoID );\n\n\t\t\t\t\tgeoRelationships.parents.forEach( function ( geoConnParent ) {\n\n\t\t\t\t\t\tif ( modelMap.has( geoConnParent.ID ) ) {\n\n\t\t\t\t\t\t\tconst model = modelMap.get( geoConnParent.ID );\n\n\t\t\t\t\t\t\tmodel.bind( new Skeleton( skeleton.bones ), bindMatrices[ geoConnParent.ID ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\tparsePoseNodes() {\n\n\t\tconst bindMatrices = {};\n\n\t\tif ( 'Pose' in fbxTree.Objects ) {\n\n\t\t\tconst BindPoseNode = fbxTree.Objects.Pose;\n\n\t\t\tfor ( const nodeID in BindPoseNode ) {\n\n\t\t\t\tif ( BindPoseNode[ nodeID ].attrType === 'BindPose' && BindPoseNode[ nodeID ].NbPoseNodes > 0 ) {\n\n\t\t\t\t\tconst poseNodes = BindPoseNode[ nodeID ].PoseNode;\n\n\t\t\t\t\tif ( Array.isArray( poseNodes ) ) {\n\n\t\t\t\t\t\tposeNodes.forEach( function ( poseNode ) {\n\n\t\t\t\t\t\t\tbindMatrices[ poseNode.Node ] = new Matrix4().fromArray( poseNode.Matrix.a );\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbindMatrices[ poseNodes.Node ] = new Matrix4().fromArray( poseNodes.Matrix.a );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bindMatrices;\n\n\t}\n\n\taddGlobalSceneSettings() {\n\n\t\tif ( 'GlobalSettings' in fbxTree ) {\n\n\t\t\tif ( 'AmbientColor' in fbxTree.GlobalSettings ) {\n\n\t\t\t\t// Parse ambient color - if it's not set to black (default), create an ambient light\n\n\t\t\t\tconst ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n\t\t\t\tconst r = ambientColor[ 0 ];\n\t\t\t\tconst g = ambientColor[ 1 ];\n\t\t\t\tconst b = ambientColor[ 2 ];\n\n\t\t\t\tif ( r !== 0 || g !== 0 || b !== 0 ) {\n\n\t\t\t\t\tconst color = new Color( r, g, b ).convertSRGBToLinear();\n\t\t\t\t\tsceneGraph.add( new AmbientLight( color, 1 ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( 'UnitScaleFactor' in fbxTree.GlobalSettings ) {\n\n\t\t\t\tsceneGraph.userData.unitScaleFactor = fbxTree.GlobalSettings.UnitScaleFactor.value;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\n// parse Geometry data from FBXTree and return map of BufferGeometries\nclass GeometryParser {\n\n\tconstructor() {\n\n\t\tthis.negativeMaterialIndices = false;\n\n\t}\n\n\t// Parse nodes in FBXTree.Objects.Geometry\n\tparse( deformers ) {\n\n\t\tconst geometryMap = new Map();\n\n\t\tif ( 'Geometry' in fbxTree.Objects ) {\n\n\t\t\tconst geoNodes = fbxTree.Objects.Geometry;\n\n\t\t\tfor ( const nodeID in geoNodes ) {\n\n\t\t\t\tconst relationships = connections.get( parseInt( nodeID ) );\n\t\t\t\tconst geo = this.parseGeometry( relationships, geoNodes[ nodeID ], deformers );\n\n\t\t\t\tgeometryMap.set( parseInt( nodeID ), geo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// report warnings\n\n\t\tif ( this.negativeMaterialIndices === true ) {\n\n\t\t\tconsole.warn( 'THREE.FBXLoader: The FBX file contains invalid (negative) material indices. The asset might not render as expected.' );\n\n\t\t}\n\n\t\treturn geometryMap;\n\n\t}\n\n\t// Parse single node in FBXTree.Objects.Geometry\n\tparseGeometry( relationships, geoNode, deformers ) {\n\n\t\tswitch ( geoNode.attrType ) {\n\n\t\t\tcase 'Mesh':\n\t\t\t\treturn this.parseMeshGeometry( relationships, geoNode, deformers );\n\t\t\t\tbreak;\n\n\t\t\tcase 'NurbsCurve':\n\t\t\t\treturn this.parseNurbsGeometry( geoNode );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\t// Parse single node mesh geometry in FBXTree.Objects.Geometry\n\tparseMeshGeometry( relationships, geoNode, deformers ) {\n\n\t\tconst skeletons = deformers.skeletons;\n\t\tconst morphTargets = [];\n\n\t\tconst modelNodes = relationships.parents.map( function ( parent ) {\n\n\t\t\treturn fbxTree.Objects.Model[ parent.ID ];\n\n\t\t} );\n\n\t\t// don't create geometry if it is not associated with any models\n\t\tif ( modelNodes.length === 0 ) return;\n\n\t\tconst skeleton = relationships.children.reduce( function ( skeleton, child ) {\n\n\t\t\tif ( skeletons[ child.ID ] !== undefined ) skeleton = skeletons[ child.ID ];\n\n\t\t\treturn skeleton;\n\n\t\t}, null );\n\n\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\tif ( deformers.morphTargets[ child.ID ] !== undefined ) {\n\n\t\t\t\tmorphTargets.push( deformers.morphTargets[ child.ID ] );\n\n\t\t\t}\n\n\t\t} );\n\n\t\t// Assume one model and get the preRotation from that\n\t\t// if there is more than one model associated with the geometry this may cause problems\n\t\tconst modelNode = modelNodes[ 0 ];\n\n\t\tconst transformData = {};\n\n\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );\n\t\tif ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );\n\n\t\tif ( 'GeometricTranslation' in modelNode ) transformData.translation = modelNode.GeometricTranslation.value;\n\t\tif ( 'GeometricRotation' in modelNode ) transformData.rotation = modelNode.GeometricRotation.value;\n\t\tif ( 'GeometricScaling' in modelNode ) transformData.scale = modelNode.GeometricScaling.value;\n\n\t\tconst transform = generateTransform( transformData );\n\n\t\treturn this.genGeometry( geoNode, skeleton, morphTargets, transform );\n\n\t}\n\n\t// Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n\tgenGeometry( geoNode, skeleton, morphTargets, preTransform ) {\n\n\t\tconst geo = new BufferGeometry();\n\t\tif ( geoNode.attrName ) geo.name = geoNode.attrName;\n\n\t\tconst geoInfo = this.parseGeoNode( geoNode, skeleton );\n\t\tconst buffers = this.genBuffers( geoInfo );\n\n\t\tconst positionAttribute = new Float32BufferAttribute( buffers.vertex, 3 );\n\n\t\tpositionAttribute.applyMatrix4( preTransform );\n\n\t\tgeo.setAttribute( 'position', positionAttribute );\n\n\t\tif ( buffers.colors.length > 0 ) {\n\n\t\t\tgeo.setAttribute( 'color', new Float32BufferAttribute( buffers.colors, 3 ) );\n\n\t\t}\n\n\t\tif ( skeleton ) {\n\n\t\t\tgeo.setAttribute( 'skinIndex', new Uint16BufferAttribute( buffers.weightsIndices, 4 ) );\n\n\t\t\tgeo.setAttribute( 'skinWeight', new Float32BufferAttribute( buffers.vertexWeights, 4 ) );\n\n\t\t\t// used later to bind the skeleton to the model\n\t\t\tgeo.FBX_Deformer = skeleton;\n\n\t\t}\n\n\t\tif ( buffers.normal.length > 0 ) {\n\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( preTransform );\n\n\t\t\tconst normalAttribute = new Float32BufferAttribute( buffers.normal, 3 );\n\t\t\tnormalAttribute.applyNormalMatrix( normalMatrix );\n\n\t\t\tgeo.setAttribute( 'normal', normalAttribute );\n\n\t\t}\n\n\t\tbuffers.uvs.forEach( function ( uvBuffer, i ) {\n\n\t\t\tconst name = i === 0 ? 'uv' : `uv${ i }`;\n\n\t\t\tgeo.setAttribute( name, new Float32BufferAttribute( buffers.uvs[ i ], 2 ) );\n\n\t\t} );\n\n\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t// Convert the material indices of each vertex into rendering groups on the geometry.\n\t\t\tlet prevMaterialIndex = buffers.materialIndex[ 0 ];\n\t\t\tlet startIndex = 0;\n\n\t\t\tbuffers.materialIndex.forEach( function ( currentIndex, i ) {\n\n\t\t\t\tif ( currentIndex !== prevMaterialIndex ) {\n\n\t\t\t\t\tgeo.addGroup( startIndex, i - startIndex, prevMaterialIndex );\n\n\t\t\t\t\tprevMaterialIndex = currentIndex;\n\t\t\t\t\tstartIndex = i;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\t// the loop above doesn't add the last group, do that here.\n\t\t\tif ( geo.groups.length > 0 ) {\n\n\t\t\t\tconst lastGroup = geo.groups[ geo.groups.length - 1 ];\n\t\t\t\tconst lastIndex = lastGroup.start + lastGroup.count;\n\n\t\t\t\tif ( lastIndex !== buffers.materialIndex.length ) {\n\n\t\t\t\t\tgeo.addGroup( lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// case where there are multiple materials but the whole geometry is only\n\t\t\t// using one of them\n\t\t\tif ( geo.groups.length === 0 ) {\n\n\t\t\t\tgeo.addGroup( 0, buffers.materialIndex.length, buffers.materialIndex[ 0 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.addMorphTargets( geo, geoNode, morphTargets, preTransform );\n\n\t\treturn geo;\n\n\t}\n\n\tparseGeoNode( geoNode, skeleton ) {\n\n\t\tconst geoInfo = {};\n\n\t\tgeoInfo.vertexPositions = ( geoNode.Vertices !== undefined ) ? geoNode.Vertices.a : [];\n\t\tgeoInfo.vertexIndices = ( geoNode.PolygonVertexIndex !== undefined ) ? geoNode.PolygonVertexIndex.a : [];\n\n\t\tif ( geoNode.LayerElementColor ) {\n\n\t\t\tgeoInfo.color = this.parseVertexColors( geoNode.LayerElementColor[ 0 ] );\n\n\t\t}\n\n\t\tif ( geoNode.LayerElementMaterial ) {\n\n\t\t\tgeoInfo.material = this.parseMaterialIndices( geoNode.LayerElementMaterial[ 0 ] );\n\n\t\t}\n\n\t\tif ( geoNode.LayerElementNormal ) {\n\n\t\t\tgeoInfo.normal = this.parseNormals( geoNode.LayerElementNormal[ 0 ] );\n\n\t\t}\n\n\t\tif ( geoNode.LayerElementUV ) {\n\n\t\t\tgeoInfo.uv = [];\n\n\t\t\tlet i = 0;\n\t\t\twhile ( geoNode.LayerElementUV[ i ] ) {\n\n\t\t\t\tif ( geoNode.LayerElementUV[ i ].UV ) {\n\n\t\t\t\t\tgeoInfo.uv.push( this.parseUVs( geoNode.LayerElementUV[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeoInfo.weightTable = {};\n\n\t\tif ( skeleton !== null ) {\n\n\t\t\tgeoInfo.skeleton = skeleton;\n\n\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t// loop over the bone's vertex indices and weights\n\t\t\t\trawBone.indices.forEach( function ( index, j ) {\n\n\t\t\t\t\tif ( geoInfo.weightTable[ index ] === undefined ) geoInfo.weightTable[ index ] = [];\n\n\t\t\t\t\tgeoInfo.weightTable[ index ].push( {\n\n\t\t\t\t\t\tid: i,\n\t\t\t\t\t\tweight: rawBone.weights[ j ],\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn geoInfo;\n\n\t}\n\n\tgenBuffers( geoInfo ) {\n\n\t\tconst buffers = {\n\t\t\tvertex: [],\n\t\t\tnormal: [],\n\t\t\tcolors: [],\n\t\t\tuvs: [],\n\t\t\tmaterialIndex: [],\n\t\t\tvertexWeights: [],\n\t\t\tweightsIndices: [],\n\t\t};\n\n\t\tlet polygonIndex = 0;\n\t\tlet faceLength = 0;\n\t\tlet displayedWeightsWarning = false;\n\n\t\t// these will hold data for a single face\n\t\tlet facePositionIndexes = [];\n\t\tlet faceNormals = [];\n\t\tlet faceColors = [];\n\t\tlet faceUVs = [];\n\t\tlet faceWeights = [];\n\t\tlet faceWeightIndices = [];\n\n\t\tconst scope = this;\n\t\tgeoInfo.vertexIndices.forEach( function ( vertexIndex, polygonVertexIndex ) {\n\n\t\t\tlet materialIndex;\n\t\t\tlet endOfFace = false;\n\n\t\t\t// Face index and vertex index arrays are combined in a single array\n\t\t\t// A cube with quad faces looks like this:\n\t\t\t// PolygonVertexIndex: *24 {\n\t\t\t//  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n\t\t\t//  }\n\t\t\t// Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n\t\t\t// to find index of last vertex bit shift the index: ^ - 1\n\t\t\tif ( vertexIndex < 0 ) {\n\n\t\t\t\tvertexIndex = vertexIndex ^ - 1; // equivalent to ( x * -1 ) - 1\n\t\t\t\tendOfFace = true;\n\n\t\t\t}\n\n\t\t\tlet weightIndices = [];\n\t\t\tlet weights = [];\n\n\t\t\tfacePositionIndexes.push( vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2 );\n\n\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\tconst data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color );\n\n\t\t\t\tfaceColors.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\tif ( geoInfo.weightTable[ vertexIndex ] !== undefined ) {\n\n\t\t\t\t\tgeoInfo.weightTable[ vertexIndex ].forEach( function ( wt ) {\n\n\t\t\t\t\t\tweights.push( wt.weight );\n\t\t\t\t\t\tweightIndices.push( wt.id );\n\n\t\t\t\t\t} );\n\n\n\t\t\t\t}\n\n\t\t\t\tif ( weights.length > 4 ) {\n\n\t\t\t\t\tif ( ! displayedWeightsWarning ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.' );\n\t\t\t\t\t\tdisplayedWeightsWarning = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst wIndex = [ 0, 0, 0, 0 ];\n\t\t\t\t\tconst Weight = [ 0, 0, 0, 0 ];\n\n\t\t\t\t\tweights.forEach( function ( weight, weightIndex ) {\n\n\t\t\t\t\t\tlet currentWeight = weight;\n\t\t\t\t\t\tlet currentIndex = weightIndices[ weightIndex ];\n\n\t\t\t\t\t\tWeight.forEach( function ( comparedWeight, comparedWeightIndex, comparedWeightArray ) {\n\n\t\t\t\t\t\t\tif ( currentWeight > comparedWeight ) {\n\n\t\t\t\t\t\t\t\tcomparedWeightArray[ comparedWeightIndex ] = currentWeight;\n\t\t\t\t\t\t\t\tcurrentWeight = comparedWeight;\n\n\t\t\t\t\t\t\t\tconst tmp = wIndex[ comparedWeightIndex ];\n\t\t\t\t\t\t\t\twIndex[ comparedWeightIndex ] = currentIndex;\n\t\t\t\t\t\t\t\tcurrentIndex = tmp;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tweightIndices = wIndex;\n\t\t\t\t\tweights = Weight;\n\n\t\t\t\t}\n\n\t\t\t\t// if the weight array is shorter than 4 pad with 0s\n\t\t\t\twhile ( weights.length < 4 ) {\n\n\t\t\t\t\tweights.push( 0 );\n\t\t\t\t\tweightIndices.push( 0 );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 4; ++ i ) {\n\n\t\t\t\t\tfaceWeights.push( weights[ i ] );\n\t\t\t\t\tfaceWeightIndices.push( weightIndices[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\tconst data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal );\n\n\t\t\t\tfaceNormals.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\tmaterialIndex = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material )[ 0 ];\n\n\t\t\t\tif ( materialIndex < 0 ) {\n\n\t\t\t\t\tscope.negativeMaterialIndices = true;\n\t\t\t\t\tmaterialIndex = 0; // fallback\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\tgeoInfo.uv.forEach( function ( uv, i ) {\n\n\t\t\t\t\tconst data = getData( polygonVertexIndex, polygonIndex, vertexIndex, uv );\n\n\t\t\t\t\tif ( faceUVs[ i ] === undefined ) {\n\n\t\t\t\t\t\tfaceUVs[ i ] = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceUVs[ i ].push( data[ 0 ] );\n\t\t\t\t\tfaceUVs[ i ].push( data[ 1 ] );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tfaceLength ++;\n\n\t\t\tif ( endOfFace ) {\n\n\t\t\t\tscope.genFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength );\n\n\t\t\t\tpolygonIndex ++;\n\t\t\t\tfaceLength = 0;\n\n\t\t\t\t// reset arrays for the next face\n\t\t\t\tfacePositionIndexes = [];\n\t\t\t\tfaceNormals = [];\n\t\t\t\tfaceColors = [];\n\t\t\t\tfaceUVs = [];\n\t\t\t\tfaceWeights = [];\n\t\t\t\tfaceWeightIndices = [];\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn buffers;\n\n\t}\n\n\t// See https://www.khronos.org/opengl/wiki/Calculating_a_Surface_Normal\n\tgetNormalNewell( vertices ) {\n\n\t\tconst normal = new Vector3( 0.0, 0.0, 0.0 );\n\n\t\tfor ( let i = 0; i < vertices.length; i ++ ) {\n\n\t\t\tconst current = vertices[ i ];\n\t\t\tconst next = vertices[ ( i + 1 ) % vertices.length ];\n\n\t\t\tnormal.x += ( current.y - next.y ) * ( current.z + next.z );\n\t\t\tnormal.y += ( current.z - next.z ) * ( current.x + next.x );\n\t\t\tnormal.z += ( current.x - next.x ) * ( current.y + next.y );\n\n\t\t}\n\n\t\tnormal.normalize();\n\n\t\treturn normal;\n\n\t}\n\n\tgetNormalTangentAndBitangent( vertices ) {\n\n\t\tconst normalVector = this.getNormalNewell( vertices );\n\t\t// Avoid up being equal or almost equal to normalVector\n\t\tconst up = Math.abs( normalVector.z ) > 0.5 ? new Vector3( 0.0, 1.0, 0.0 ) : new Vector3( 0.0, 0.0, 1.0 );\n\t\tconst tangent = up.cross( normalVector ).normalize();\n\t\tconst bitangent = normalVector.clone().cross( tangent ).normalize();\n\n\t\treturn {\n\t\t\tnormal: normalVector,\n\t\t\ttangent: tangent,\n\t\t\tbitangent: bitangent\n\t\t};\n\n\t}\n\n\tflattenVertex( vertex, normalTangent, normalBitangent ) {\n\n\t\treturn new Vector2(\n\t\t\tvertex.dot( normalTangent ),\n\t\t\tvertex.dot( normalBitangent )\n\t\t);\n\n\t}\n\n\t// Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\tgenFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength ) {\n\n\t\tlet triangles;\n\n\t\tif ( faceLength > 3 ) {\n\n\t\t\t// Triangulate n-gon using earcut\n\n\t\t\tconst vertices = [];\n\n\t\t\tfor ( let i = 0; i < facePositionIndexes.length; i += 3 ) {\n\n\t\t\t\tvertices.push( new Vector3(\n\t\t\t\t\tgeoInfo.vertexPositions[ facePositionIndexes[ i ] ],\n\t\t\t\t\tgeoInfo.vertexPositions[ facePositionIndexes[ i + 1 ] ],\n\t\t\t\t\tgeoInfo.vertexPositions[ facePositionIndexes[ i + 2 ] ]\n\t\t\t\t) );\n\n\t\t\t}\n\n\t\t\tconst { tangent, bitangent } = this.getNormalTangentAndBitangent( vertices );\n\t\t\tconst triangulationInput = [];\n\n\t\t\tfor ( const vertex of vertices ) {\n\n\t\t\t\ttriangulationInput.push( this.flattenVertex( vertex, tangent, bitangent ) );\n\n\t\t\t}\n\n\t\t\ttriangles = ShapeUtils.triangulateShape( triangulationInput, [] );\n\n\t\t} else {\n\n\t\t\t// Regular triangle, skip earcut triangulation step\n\t\t\ttriangles = [[ 0, 1, 2 ]];\n\n\t\t}\n\n\t\tfor ( const [ i0, i1, i2 ] of triangles ) {\n\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i0 * 3 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i0 * 3 + 1 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i0 * 3 + 2 ] ] );\n\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i1 * 3 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i1 * 3 + 1 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i1 * 3 + 2 ] ] );\n\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i2 * 3 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i2 * 3 + 1 ] ] );\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i2 * 3 + 2 ] ] );\n\n\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i0 * 4 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i0 * 4 + 1 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i0 * 4 + 2 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i0 * 4 + 3 ] );\n\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i1 * 4 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i1 * 4 + 1 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i1 * 4 + 2 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i1 * 4 + 3 ] );\n\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i2 * 4 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i2 * 4 + 1 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i2 * 4 + 2 ] );\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i2 * 4 + 3 ] );\n\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i0 * 4 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i0 * 4 + 1 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i0 * 4 + 2 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i0 * 4 + 3 ] );\n\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i1 * 4 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i1 * 4 + 1 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i1 * 4 + 2 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i1 * 4 + 3 ] );\n\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i2 * 4 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i2 * 4 + 1 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i2 * 4 + 2 ] );\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i2 * 4 + 3 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\tbuffers.colors.push( faceColors[ i0 * 3 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ i0 * 3 + 1 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ i0 * 3 + 2 ] );\n\n\t\t\t\tbuffers.colors.push( faceColors[ i1 * 3 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ i1 * 3 + 1 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ i1 * 3 + 2 ] );\n\n\t\t\t\tbuffers.colors.push( faceColors[ i2 * 3 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ i2 * 3 + 1 ] );\n\t\t\t\tbuffers.colors.push( faceColors[ i2 * 3 + 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\tbuffers.normal.push( faceNormals[ i0 * 3 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ i0 * 3 + 1 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ i0 * 3 + 2 ] );\n\n\t\t\t\tbuffers.normal.push( faceNormals[ i1 * 3 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ i1 * 3 + 1 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ i1 * 3 + 2 ] );\n\n\t\t\t\tbuffers.normal.push( faceNormals[ i2 * 3 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ i2 * 3 + 1 ] );\n\t\t\t\tbuffers.normal.push( faceNormals[ i2 * 3 + 2 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\tgeoInfo.uv.forEach( function ( uv, j ) {\n\n\t\t\t\t\tif ( buffers.uvs[ j ] === undefined ) buffers.uvs[ j ] = [];\n\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i0 * 2 ] );\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i0 * 2 + 1 ] );\n\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i1 * 2 ] );\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i1 * 2 + 1 ] );\n\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i2 * 2 ] );\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i2 * 2 + 1 ] );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\taddMorphTargets( parentGeo, parentGeoNode, morphTargets, preTransform ) {\n\n\t\tif ( morphTargets.length === 0 ) return;\n\n\t\tparentGeo.morphTargetsRelative = true;\n\n\t\tparentGeo.morphAttributes.position = [];\n\t\t// parentGeo.morphAttributes.normal = []; // not implemented\n\n\t\tconst scope = this;\n\t\tmorphTargets.forEach( function ( morphTarget ) {\n\n\t\t\tmorphTarget.rawTargets.forEach( function ( rawTarget ) {\n\n\t\t\t\tconst morphGeoNode = fbxTree.Objects.Geometry[ rawTarget.geoID ];\n\n\t\t\t\tif ( morphGeoNode !== undefined ) {\n\n\t\t\t\t\tscope.genMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\t// a morph geometry node is similar to a standard  node, and the node is also contained\n\t// in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n\t// and a special attribute Index defining which vertices of the original geometry are affected\n\t// Normal and position attributes only have data for the vertices that are affected by the morph\n\tgenMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform, name ) {\n\n\t\tconst vertexIndices = ( parentGeoNode.PolygonVertexIndex !== undefined ) ? parentGeoNode.PolygonVertexIndex.a : [];\n\n\t\tconst morphPositionsSparse = ( morphGeoNode.Vertices !== undefined ) ? morphGeoNode.Vertices.a : [];\n\t\tconst indices = ( morphGeoNode.Indexes !== undefined ) ? morphGeoNode.Indexes.a : [];\n\n\t\tconst length = parentGeo.attributes.position.count * 3;\n\t\tconst morphPositions = new Float32Array( length );\n\n\t\tfor ( let i = 0; i < indices.length; i ++ ) {\n\n\t\t\tconst morphIndex = indices[ i ] * 3;\n\n\t\t\tmorphPositions[ morphIndex ] = morphPositionsSparse[ i * 3 ];\n\t\t\tmorphPositions[ morphIndex + 1 ] = morphPositionsSparse[ i * 3 + 1 ];\n\t\t\tmorphPositions[ morphIndex + 2 ] = morphPositionsSparse[ i * 3 + 2 ];\n\n\t\t}\n\n\t\t// TODO: add morph normal support\n\t\tconst morphGeoInfo = {\n\t\t\tvertexIndices: vertexIndices,\n\t\t\tvertexPositions: morphPositions,\n\n\t\t};\n\n\t\tconst morphBuffers = this.genBuffers( morphGeoInfo );\n\n\t\tconst positionAttribute = new Float32BufferAttribute( morphBuffers.vertex, 3 );\n\t\tpositionAttribute.name = name || morphGeoNode.attrName;\n\n\t\tpositionAttribute.applyMatrix4( preTransform );\n\n\t\tparentGeo.morphAttributes.position.push( positionAttribute );\n\n\t}\n\n\t// Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\tparseNormals( NormalNode ) {\n\n\t\tconst mappingType = NormalNode.MappingInformationType;\n\t\tconst referenceType = NormalNode.ReferenceInformationType;\n\t\tconst buffer = NormalNode.Normals.a;\n\t\tlet indexBuffer = [];\n\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\tif ( 'NormalIndex' in NormalNode ) {\n\n\t\t\t\tindexBuffer = NormalNode.NormalIndex.a;\n\n\t\t\t} else if ( 'NormalsIndex' in NormalNode ) {\n\n\t\t\t\tindexBuffer = NormalNode.NormalsIndex.a;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 3,\n\t\t\tbuffer: buffer,\n\t\t\tindices: indexBuffer,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\tparseUVs( UVNode ) {\n\n\t\tconst mappingType = UVNode.MappingInformationType;\n\t\tconst referenceType = UVNode.ReferenceInformationType;\n\t\tconst buffer = UVNode.UV.a;\n\t\tlet indexBuffer = [];\n\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\tindexBuffer = UVNode.UVIndex.a;\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 2,\n\t\t\tbuffer: buffer,\n\t\t\tindices: indexBuffer,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\tparseVertexColors( ColorNode ) {\n\n\t\tconst mappingType = ColorNode.MappingInformationType;\n\t\tconst referenceType = ColorNode.ReferenceInformationType;\n\t\tconst buffer = ColorNode.Colors.a;\n\t\tlet indexBuffer = [];\n\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\tindexBuffer = ColorNode.ColorIndex.a;\n\n\t\t}\n\n\t\tfor ( let i = 0, c = new Color(); i < buffer.length; i += 4 ) {\n\n\t\t\tc.fromArray( buffer, i ).convertSRGBToLinear().toArray( buffer, i );\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 4,\n\t\t\tbuffer: buffer,\n\t\t\tindices: indexBuffer,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\tparseMaterialIndices( MaterialNode ) {\n\n\t\tconst mappingType = MaterialNode.MappingInformationType;\n\t\tconst referenceType = MaterialNode.ReferenceInformationType;\n\n\t\tif ( mappingType === 'NoMappingInformation' ) {\n\n\t\t\treturn {\n\t\t\t\tdataSize: 1,\n\t\t\t\tbuffer: [ 0 ],\n\t\t\t\tindices: [ 0 ],\n\t\t\t\tmappingType: 'AllSame',\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t}\n\n\t\tconst materialIndexBuffer = MaterialNode.Materials.a;\n\n\t\t// Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n\t\t// we expect.So we create an intermediate buffer that points to the index in the buffer,\n\t\t// for conforming with the other functions we've written for other data.\n\t\tconst materialIndices = [];\n\n\t\tfor ( let i = 0; i < materialIndexBuffer.length; ++ i ) {\n\n\t\t\tmaterialIndices.push( i );\n\n\t\t}\n\n\t\treturn {\n\t\t\tdataSize: 1,\n\t\t\tbuffer: materialIndexBuffer,\n\t\t\tindices: materialIndices,\n\t\t\tmappingType: mappingType,\n\t\t\treferenceType: referenceType\n\t\t};\n\n\t}\n\n\t// Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\tparseNurbsGeometry( geoNode ) {\n\n\t\tconst order = parseInt( geoNode.Order );\n\n\t\tif ( isNaN( order ) ) {\n\n\t\t\tconsole.error( 'THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id );\n\t\t\treturn new BufferGeometry();\n\n\t\t}\n\n\t\tconst degree = order - 1;\n\n\t\tconst knots = geoNode.KnotVector.a;\n\t\tconst controlPoints = [];\n\t\tconst pointsValues = geoNode.Points.a;\n\n\t\tfor ( let i = 0, l = pointsValues.length; i < l; i += 4 ) {\n\n\t\t\tcontrolPoints.push( new Vector4().fromArray( pointsValues, i ) );\n\n\t\t}\n\n\t\tlet startKnot, endKnot;\n\n\t\tif ( geoNode.Form === 'Closed' ) {\n\n\t\t\tcontrolPoints.push( controlPoints[ 0 ] );\n\n\t\t} else if ( geoNode.Form === 'Periodic' ) {\n\n\t\t\tstartKnot = degree;\n\t\t\tendKnot = knots.length - 1 - startKnot;\n\n\t\t\tfor ( let i = 0; i < degree; ++ i ) {\n\n\t\t\t\tcontrolPoints.push( controlPoints[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst curve = new NURBSCurve( degree, knots, controlPoints, startKnot, endKnot );\n\t\tconst points = curve.getPoints( controlPoints.length * 12 );\n\n\t\treturn new BufferGeometry().setFromPoints( points );\n\n\t}\n\n}\n\n// parse animation data from FBXTree\nclass AnimationParser {\n\n\t// take raw animation clips and turn them into three.js animation clips\n\tparse() {\n\n\t\tconst animationClips = [];\n\n\t\tconst rawClips = this.parseClips();\n\n\t\tif ( rawClips !== undefined ) {\n\n\t\t\tfor ( const key in rawClips ) {\n\n\t\t\t\tconst rawClip = rawClips[ key ];\n\n\t\t\t\tconst clip = this.addClip( rawClip );\n\n\t\t\t\tanimationClips.push( clip );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn animationClips;\n\n\t}\n\n\tparseClips() {\n\n\t\t// since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n\t\t// if this is undefined we can safely assume there are no animations\n\t\tif ( fbxTree.Objects.AnimationCurve === undefined ) return undefined;\n\n\t\tconst curveNodesMap = this.parseAnimationCurveNodes();\n\n\t\tthis.parseAnimationCurves( curveNodesMap );\n\n\t\tconst layersMap = this.parseAnimationLayers( curveNodesMap );\n\t\tconst rawClips = this.parseAnimStacks( layersMap );\n\n\t\treturn rawClips;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationCurveNode\n\t// each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n\t// and is referenced by an AnimationLayer\n\tparseAnimationCurveNodes() {\n\n\t\tconst rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n\n\t\tconst curveNodesMap = new Map();\n\n\t\tfor ( const nodeID in rawCurveNodes ) {\n\n\t\t\tconst rawCurveNode = rawCurveNodes[ nodeID ];\n\n\t\t\tif ( rawCurveNode.attrName.match( /S|R|T|DeformPercent/ ) !== null ) {\n\n\t\t\t\tconst curveNode = {\n\n\t\t\t\t\tid: rawCurveNode.id,\n\t\t\t\t\tattr: rawCurveNode.attrName,\n\t\t\t\t\tcurves: {},\n\n\t\t\t\t};\n\n\t\t\t\tcurveNodesMap.set( curveNode.id, curveNode );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn curveNodesMap;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n\t// previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n\t// axis ( e.g. times and values of x rotation)\n\tparseAnimationCurves( curveNodesMap ) {\n\n\t\tconst rawCurves = fbxTree.Objects.AnimationCurve;\n\n\t\t// TODO: Many values are identical up to roundoff error, but won't be optimised\n\t\t// e.g. position times: [0, 0.4, 0. 8]\n\t\t// position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n\t\t// clearly, this should be optimised to\n\t\t// times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n\t\t// this shows up in nearly every FBX file, and generally time array is length > 100\n\n\t\tfor ( const nodeID in rawCurves ) {\n\n\t\t\tconst animationCurve = {\n\n\t\t\t\tid: rawCurves[ nodeID ].id,\n\t\t\t\ttimes: rawCurves[ nodeID ].KeyTime.a.map( convertFBXTimeToSeconds ),\n\t\t\t\tvalues: rawCurves[ nodeID ].KeyValueFloat.a,\n\n\t\t\t};\n\n\t\t\tconst relationships = connections.get( animationCurve.id );\n\n\t\t\tif ( relationships !== undefined ) {\n\n\t\t\t\tconst animationCurveID = relationships.parents[ 0 ].ID;\n\t\t\t\tconst animationCurveRelationship = relationships.parents[ 0 ].relationship;\n\n\t\t\t\tif ( animationCurveRelationship.match( /X/ ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'x' ] = animationCurve;\n\n\t\t\t\t} else if ( animationCurveRelationship.match( /Y/ ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'y' ] = animationCurve;\n\n\t\t\t\t} else if ( animationCurveRelationship.match( /Z/ ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'z' ] = animationCurve;\n\n\t\t\t\t} else if ( animationCurveRelationship.match( /DeformPercent/ ) && curveNodesMap.has( animationCurveID ) ) {\n\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'morph' ] = animationCurve;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n\t// to various AnimationCurveNodes and is referenced by an AnimationStack node\n\t// note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\tparseAnimationLayers( curveNodesMap ) {\n\n\t\tconst rawLayers = fbxTree.Objects.AnimationLayer;\n\n\t\tconst layersMap = new Map();\n\n\t\tfor ( const nodeID in rawLayers ) {\n\n\t\t\tconst layerCurveNodes = [];\n\n\t\t\tconst connection = connections.get( parseInt( nodeID ) );\n\n\t\t\tif ( connection !== undefined ) {\n\n\t\t\t\t// all the animationCurveNodes used in the layer\n\t\t\t\tconst children = connection.children;\n\n\t\t\t\tchildren.forEach( function ( child, i ) {\n\n\t\t\t\t\tif ( curveNodesMap.has( child.ID ) ) {\n\n\t\t\t\t\t\tconst curveNode = curveNodesMap.get( child.ID );\n\n\t\t\t\t\t\t// check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\t\t\t\t\t\tif ( curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined ) {\n\n\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\tconst modelID = connections.get( child.ID ).parents.filter( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\n\n\t\t\t\t\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\t\t\t\t\tif ( modelID !== undefined ) {\n\n\t\t\t\t\t\t\t\t\tconst rawModel = fbxTree.Objects.Model[ modelID.toString() ];\n\n\t\t\t\t\t\t\t\t\tif ( rawModel === undefined ) {\n\n\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Encountered a unused curve.', child );\n\t\t\t\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tconst node = {\n\n\t\t\t\t\t\t\t\t\t\tmodelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName( rawModel.attrName ) : '',\n\t\t\t\t\t\t\t\t\t\tID: rawModel.id,\n\t\t\t\t\t\t\t\t\t\tinitialPosition: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\tinitialRotation: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\tinitialScale: [ 1, 1, 1 ],\n\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tsceneGraph.traverse( function ( child ) {\n\n\t\t\t\t\t\t\t\t\t\tif ( child.ID === rawModel.id ) {\n\n\t\t\t\t\t\t\t\t\t\t\tnode.transform = child.matrix;\n\n\t\t\t\t\t\t\t\t\t\t\tif ( child.userData.transformData ) node.eulerOrder = child.userData.transformData.eulerOrder;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t\t\tif ( ! node.transform ) node.transform = new Matrix4();\n\n\t\t\t\t\t\t\t\t\t// if the animated model is pre rotated, we'll have to apply the pre rotations to every\n\t\t\t\t\t\t\t\t\t// animation value as well\n\t\t\t\t\t\t\t\t\tif ( 'PreRotation' in rawModel ) node.preRotation = rawModel.PreRotation.value;\n\t\t\t\t\t\t\t\t\tif ( 'PostRotation' in rawModel ) node.postRotation = rawModel.PostRotation.value;\n\n\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] ) layerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t} else if ( curveNode.curves.morph !== undefined ) {\n\n\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\tconst deformerID = connections.get( child.ID ).parents.filter( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\n\n\t\t\t\t\t\t\t\t} )[ 0 ].ID;\n\n\t\t\t\t\t\t\t\tconst morpherID = connections.get( deformerID ).parents[ 0 ].ID;\n\t\t\t\t\t\t\t\tconst geoID = connections.get( morpherID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t// assuming geometry is not used in more than one model\n\t\t\t\t\t\t\t\tconst modelID = connections.get( geoID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\tconst rawModel = fbxTree.Objects.Model[ modelID ];\n\n\t\t\t\t\t\t\t\tconst node = {\n\n\t\t\t\t\t\t\t\t\tmodelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName( rawModel.attrName ) : '',\n\t\t\t\t\t\t\t\t\tmorphName: fbxTree.Objects.Deformer[ deformerID ].attrName,\n\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlayerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tlayersMap.set( parseInt( nodeID ), layerCurveNodes );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn layersMap;\n\n\t}\n\n\t// parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n\t// hierarchy. Each Stack node will be used to create a AnimationClip\n\tparseAnimStacks( layersMap ) {\n\n\t\tconst rawStacks = fbxTree.Objects.AnimationStack;\n\n\t\t// connect the stacks (clips) up to the layers\n\t\tconst rawClips = {};\n\n\t\tfor ( const nodeID in rawStacks ) {\n\n\t\t\tconst children = connections.get( parseInt( nodeID ) ).children;\n\n\t\t\tif ( children.length > 1 ) {\n\n\t\t\t\t// it seems like stacks will always be associated with a single layer. But just in case there are files\n\t\t\t\t// where there are multiple layers per stack, we'll display a warning\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.' );\n\n\t\t\t}\n\n\t\t\tconst layer = layersMap.get( children[ 0 ].ID );\n\n\t\t\trawClips[ nodeID ] = {\n\n\t\t\t\tname: rawStacks[ nodeID ].attrName,\n\t\t\t\tlayer: layer,\n\n\t\t\t};\n\n\t\t}\n\n\t\treturn rawClips;\n\n\t}\n\n\taddClip( rawClip ) {\n\n\t\tlet tracks = [];\n\n\t\tconst scope = this;\n\t\trawClip.layer.forEach( function ( rawTracks ) {\n\n\t\t\ttracks = tracks.concat( scope.generateTracks( rawTracks ) );\n\n\t\t} );\n\n\t\treturn new AnimationClip( rawClip.name, - 1, tracks );\n\n\t}\n\n\tgenerateTracks( rawTracks ) {\n\n\t\tconst tracks = [];\n\n\t\tlet initialPosition = new Vector3();\n\t\tlet initialScale = new Vector3();\n\n\t\tif ( rawTracks.transform ) rawTracks.transform.decompose( initialPosition, new Quaternion(), initialScale );\n\n\t\tinitialPosition = initialPosition.toArray();\n\t\tinitialScale = initialScale.toArray();\n\n\t\tif ( rawTracks.T !== undefined && Object.keys( rawTracks.T.curves ).length > 0 ) {\n\n\t\t\tconst positionTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position' );\n\t\t\tif ( positionTrack !== undefined ) tracks.push( positionTrack );\n\n\t\t}\n\n\t\tif ( rawTracks.R !== undefined && Object.keys( rawTracks.R.curves ).length > 0 ) {\n\n\t\t\tconst rotationTrack = this.generateRotationTrack( rawTracks.modelName, rawTracks.R.curves, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder );\n\t\t\tif ( rotationTrack !== undefined ) tracks.push( rotationTrack );\n\n\t\t}\n\n\t\tif ( rawTracks.S !== undefined && Object.keys( rawTracks.S.curves ).length > 0 ) {\n\n\t\t\tconst scaleTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale' );\n\t\t\tif ( scaleTrack !== undefined ) tracks.push( scaleTrack );\n\n\t\t}\n\n\t\tif ( rawTracks.DeformPercent !== undefined ) {\n\n\t\t\tconst morphTrack = this.generateMorphTrack( rawTracks );\n\t\t\tif ( morphTrack !== undefined ) tracks.push( morphTrack );\n\n\t\t}\n\n\t\treturn tracks;\n\n\t}\n\n\tgenerateVectorTrack( modelName, curves, initialValue, type ) {\n\n\t\tconst times = this.getTimesForAllAxes( curves );\n\t\tconst values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\treturn new VectorKeyframeTrack( modelName + '.' + type, times, values );\n\n\t}\n\n\tgenerateRotationTrack( modelName, curves, preRotation, postRotation, eulerOrder ) {\n\n\t\tlet times;\n\t\tlet values;\n\n\t\tif ( curves.x !== undefined && curves.y !== undefined && curves.z !== undefined ) {\n\n\t\t\tconst result = this.interpolateRotations( curves.x, curves.y, curves.z, eulerOrder );\n\n\t\t\ttimes = result[ 0 ];\n\t\t\tvalues = result[ 1 ];\n\n\t\t}\n\n\t\tif ( preRotation !== undefined ) {\n\n\t\t\tpreRotation = preRotation.map( MathUtils.degToRad );\n\t\t\tpreRotation.push( eulerOrder );\n\n\t\t\tpreRotation = new Euler().fromArray( preRotation );\n\t\t\tpreRotation = new Quaternion().setFromEuler( preRotation );\n\n\t\t}\n\n\t\tif ( postRotation !== undefined ) {\n\n\t\t\tpostRotation = postRotation.map( MathUtils.degToRad );\n\t\t\tpostRotation.push( eulerOrder );\n\n\t\t\tpostRotation = new Euler().fromArray( postRotation );\n\t\t\tpostRotation = new Quaternion().setFromEuler( postRotation ).invert();\n\n\t\t}\n\n\t\tconst quaternion = new Quaternion();\n\t\tconst euler = new Euler();\n\n\t\tconst quaternionValues = [];\n\n\t\tif ( ! values || ! times ) return new QuaternionKeyframeTrack( modelName + '.quaternion', [ 0 ], [ 0 ] );\n\n\t\tfor ( let i = 0; i < values.length; i += 3 ) {\n\n\t\t\teuler.set( values[ i ], values[ i + 1 ], values[ i + 2 ], eulerOrder );\n\t\t\tquaternion.setFromEuler( euler );\n\n\t\t\tif ( preRotation !== undefined ) quaternion.premultiply( preRotation );\n\t\t\tif ( postRotation !== undefined ) quaternion.multiply( postRotation );\n\n\t\t\t// Check unroll\n\t\t\tif ( i > 2 ) {\n\n\t\t\t\tconst prevQuat = new Quaternion().fromArray(\n\t\t\t\t\tquaternionValues,\n\t\t\t\t\t( ( i - 3 ) / 3 ) * 4\n\t\t\t\t);\n\n\t\t\t\tif ( prevQuat.dot( quaternion ) < 0 ) {\n\n\t\t\t\t\tquaternion.set( - quaternion.x, - quaternion.y, - quaternion.z, - quaternion.w );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tquaternion.toArray( quaternionValues, ( i / 3 ) * 4 );\n\n\t\t}\n\n\t\treturn new QuaternionKeyframeTrack( modelName + '.quaternion', times, quaternionValues );\n\n\t}\n\n\tgenerateMorphTrack( rawTracks ) {\n\n\t\tconst curves = rawTracks.DeformPercent.curves.morph;\n\t\tconst values = curves.values.map( function ( val ) {\n\n\t\t\treturn val / 100;\n\n\t\t} );\n\n\t\tconst morphNum = sceneGraph.getObjectByName( rawTracks.modelName ).morphTargetDictionary[ rawTracks.morphName ];\n\n\t\treturn new NumberKeyframeTrack( rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values );\n\n\t}\n\n\t// For all animated objects, times are defined separately for each axis\n\t// Here we'll combine the times into one sorted array without duplicates\n\tgetTimesForAllAxes( curves ) {\n\n\t\tlet times = [];\n\n\t\t// first join together the times for each axis, if defined\n\t\tif ( curves.x !== undefined ) times = times.concat( curves.x.times );\n\t\tif ( curves.y !== undefined ) times = times.concat( curves.y.times );\n\t\tif ( curves.z !== undefined ) times = times.concat( curves.z.times );\n\n\t\t// then sort them\n\t\ttimes = times.sort( function ( a, b ) {\n\n\t\t\treturn a - b;\n\n\t\t} );\n\n\t\t// and remove duplicates\n\t\tif ( times.length > 1 ) {\n\n\t\t\tlet targetIndex = 1;\n\t\t\tlet lastValue = times[ 0 ];\n\t\t\tfor ( let i = 1; i < times.length; i ++ ) {\n\n\t\t\t\tconst currentValue = times[ i ];\n\t\t\t\tif ( currentValue !== lastValue ) {\n\n\t\t\t\t\ttimes[ targetIndex ] = currentValue;\n\t\t\t\t\tlastValue = currentValue;\n\t\t\t\t\ttargetIndex ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttimes = times.slice( 0, targetIndex );\n\n\t\t}\n\n\t\treturn times;\n\n\t}\n\n\tgetKeyframeTrackValues( times, curves, initialValue ) {\n\n\t\tconst prevValue = initialValue;\n\n\t\tconst values = [];\n\n\t\tlet xIndex = - 1;\n\t\tlet yIndex = - 1;\n\t\tlet zIndex = - 1;\n\n\t\ttimes.forEach( function ( time ) {\n\n\t\t\tif ( curves.x ) xIndex = curves.x.times.indexOf( time );\n\t\t\tif ( curves.y ) yIndex = curves.y.times.indexOf( time );\n\t\t\tif ( curves.z ) zIndex = curves.z.times.indexOf( time );\n\n\t\t\t// if there is an x value defined for this frame, use that\n\t\t\tif ( xIndex !== - 1 ) {\n\n\t\t\t\tconst xValue = curves.x.values[ xIndex ];\n\t\t\t\tvalues.push( xValue );\n\t\t\t\tprevValue[ 0 ] = xValue;\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise use the x value from the previous frame\n\t\t\t\tvalues.push( prevValue[ 0 ] );\n\n\t\t\t}\n\n\t\t\tif ( yIndex !== - 1 ) {\n\n\t\t\t\tconst yValue = curves.y.values[ yIndex ];\n\t\t\t\tvalues.push( yValue );\n\t\t\t\tprevValue[ 1 ] = yValue;\n\n\t\t\t} else {\n\n\t\t\t\tvalues.push( prevValue[ 1 ] );\n\n\t\t\t}\n\n\t\t\tif ( zIndex !== - 1 ) {\n\n\t\t\t\tconst zValue = curves.z.values[ zIndex ];\n\t\t\t\tvalues.push( zValue );\n\t\t\t\tprevValue[ 2 ] = zValue;\n\n\t\t\t} else {\n\n\t\t\t\tvalues.push( prevValue[ 2 ] );\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn values;\n\n\t}\n\n\t// Rotations are defined as Euler angles which can have values  of any size\n\t// These will be converted to quaternions which don't support values greater than\n\t// PI, so we'll interpolate large rotations\n\tinterpolateRotations( curvex, curvey, curvez, eulerOrder ) {\n\n\t\tconst times = [];\n\t\tconst values = [];\n\n\t\t// Add first frame\n\t\ttimes.push( curvex.times[ 0 ] );\n\t\tvalues.push( MathUtils.degToRad( curvex.values[ 0 ] ) );\n\t\tvalues.push( MathUtils.degToRad( curvey.values[ 0 ] ) );\n\t\tvalues.push( MathUtils.degToRad( curvez.values[ 0 ] ) );\n\n\t\tfor ( let i = 1; i < curvex.values.length; i ++ ) {\n\n\t\t\tconst initialValue = [\n\t\t\t\tcurvex.values[ i - 1 ],\n\t\t\t\tcurvey.values[ i - 1 ],\n\t\t\t\tcurvez.values[ i - 1 ],\n\t\t\t];\n\n\t\t\tif ( isNaN( initialValue[ 0 ] ) || isNaN( initialValue[ 1 ] ) || isNaN( initialValue[ 2 ] ) ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst initialValueRad = initialValue.map( MathUtils.degToRad );\n\n\t\t\tconst currentValue = [\n\t\t\t\tcurvex.values[ i ],\n\t\t\t\tcurvey.values[ i ],\n\t\t\t\tcurvez.values[ i ],\n\t\t\t];\n\n\t\t\tif ( isNaN( currentValue[ 0 ] ) || isNaN( currentValue[ 1 ] ) || isNaN( currentValue[ 2 ] ) ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst currentValueRad = currentValue.map( MathUtils.degToRad );\n\n\t\t\tconst valuesSpan = [\n\t\t\t\tcurrentValue[ 0 ] - initialValue[ 0 ],\n\t\t\t\tcurrentValue[ 1 ] - initialValue[ 1 ],\n\t\t\t\tcurrentValue[ 2 ] - initialValue[ 2 ],\n\t\t\t];\n\n\t\t\tconst absoluteSpan = [\n\t\t\t\tMath.abs( valuesSpan[ 0 ] ),\n\t\t\t\tMath.abs( valuesSpan[ 1 ] ),\n\t\t\t\tMath.abs( valuesSpan[ 2 ] ),\n\t\t\t];\n\n\t\t\tif ( absoluteSpan[ 0 ] >= 180 || absoluteSpan[ 1 ] >= 180 || absoluteSpan[ 2 ] >= 180 ) {\n\n\t\t\t\tconst maxAbsSpan = Math.max( ...absoluteSpan );\n\n\t\t\t\tconst numSubIntervals = maxAbsSpan / 180;\n\n\t\t\t\tconst E1 = new Euler( ...initialValueRad, eulerOrder );\n\t\t\t\tconst E2 = new Euler( ...currentValueRad, eulerOrder );\n\n\t\t\t\tconst Q1 = new Quaternion().setFromEuler( E1 );\n\t\t\t\tconst Q2 = new Quaternion().setFromEuler( E2 );\n\n\t\t\t\t// Check unroll\n\t\t\t\tif ( Q1.dot( Q2 ) ) {\n\n\t\t\t\t\tQ2.set( - Q2.x, - Q2.y, - Q2.z, - Q2.w );\n\n\t\t\t\t}\n\n\t\t\t\t// Interpolate\n\t\t\t\tconst initialTime = curvex.times[ i - 1 ];\n\t\t\t\tconst timeSpan = curvex.times[ i ] - initialTime;\n\n\t\t\t\tconst Q = new Quaternion();\n\t\t\t\tconst E = new Euler();\n\t\t\t\tfor ( let t = 0; t < 1; t += 1 / numSubIntervals ) {\n\n\t\t\t\t\tQ.copy( Q1.clone().slerp( Q2.clone(), t ) );\n\n\t\t\t\t\ttimes.push( initialTime + t * timeSpan );\n\t\t\t\t\tE.setFromQuaternion( Q, eulerOrder );\n\n\t\t\t\t\tvalues.push( E.x );\n\t\t\t\t\tvalues.push( E.y );\n\t\t\t\t\tvalues.push( E.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\ttimes.push( curvex.times[ i ] );\n\t\t\t\tvalues.push( MathUtils.degToRad( curvex.values[ i ] ) );\n\t\t\t\tvalues.push( MathUtils.degToRad( curvey.values[ i ] ) );\n\t\t\t\tvalues.push( MathUtils.degToRad( curvez.values[ i ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn [ times, values ];\n\n\t}\n\n}\n\n// parse an FBX file in ASCII format\nclass TextParser {\n\n\tgetPrevNode() {\n\n\t\treturn this.nodeStack[ this.currentIndent - 2 ];\n\n\t}\n\n\tgetCurrentNode() {\n\n\t\treturn this.nodeStack[ this.currentIndent - 1 ];\n\n\t}\n\n\tgetCurrentProp() {\n\n\t\treturn this.currentProp;\n\n\t}\n\n\tpushStack( node ) {\n\n\t\tthis.nodeStack.push( node );\n\t\tthis.currentIndent += 1;\n\n\t}\n\n\tpopStack() {\n\n\t\tthis.nodeStack.pop();\n\t\tthis.currentIndent -= 1;\n\n\t}\n\n\tsetCurrentProp( val, name ) {\n\n\t\tthis.currentProp = val;\n\t\tthis.currentPropName = name;\n\n\t}\n\n\tparse( text ) {\n\n\t\tthis.currentIndent = 0;\n\n\t\tthis.allNodes = new FBXTree();\n\t\tthis.nodeStack = [];\n\t\tthis.currentProp = [];\n\t\tthis.currentPropName = '';\n\n\t\tconst scope = this;\n\n\t\tconst split = text.split( /[\\r\\n]+/ );\n\n\t\tsplit.forEach( function ( line, i ) {\n\n\t\t\tconst matchComment = line.match( /^[\\s\\t]*;/ );\n\t\t\tconst matchEmpty = line.match( /^[\\s\\t]*$/ );\n\n\t\t\tif ( matchComment || matchEmpty ) return;\n\n\t\t\tconst matchBeginning = line.match( '^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '' );\n\t\t\tconst matchProperty = line.match( '^\\\\t{' + ( scope.currentIndent ) + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)' );\n\t\t\tconst matchEnd = line.match( '^\\\\t{' + ( scope.currentIndent - 1 ) + '}}' );\n\n\t\t\tif ( matchBeginning ) {\n\n\t\t\t\tscope.parseNodeBegin( line, matchBeginning );\n\n\t\t\t} else if ( matchProperty ) {\n\n\t\t\t\tscope.parseNodeProperty( line, matchProperty, split[ ++ i ] );\n\n\t\t\t} else if ( matchEnd ) {\n\n\t\t\t\tscope.popStack();\n\n\t\t\t} else if ( line.match( /^[^\\s\\t}]/ ) ) {\n\n\t\t\t\t// large arrays are split over multiple lines terminated with a ',' character\n\t\t\t\t// if this is encountered the line needs to be joined to the previous line\n\t\t\t\tscope.parseNodePropertyContinued( line );\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn this.allNodes;\n\n\t}\n\n\tparseNodeBegin( line, property ) {\n\n\t\tconst nodeName = property[ 1 ].trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\tconst nodeAttrs = property[ 2 ].split( ',' ).map( function ( attr ) {\n\n\t\t\treturn attr.trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\t} );\n\n\t\tconst node = { name: nodeName };\n\t\tconst attrs = this.parseNodeAttr( nodeAttrs );\n\n\t\tconst currentNode = this.getCurrentNode();\n\n\t\t// a top node\n\t\tif ( this.currentIndent === 0 ) {\n\n\t\t\tthis.allNodes.add( nodeName, node );\n\n\t\t} else { // a subnode\n\n\t\t\t// if the subnode already exists, append it\n\t\t\tif ( nodeName in currentNode ) {\n\n\t\t\t\t// special case Pose needs PoseNodes as an array\n\t\t\t\tif ( nodeName === 'PoseNode' ) {\n\n\t\t\t\t\tcurrentNode.PoseNode.push( node );\n\n\t\t\t\t} else if ( currentNode[ nodeName ].id !== undefined ) {\n\n\t\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\t\tcurrentNode[ nodeName ][ currentNode[ nodeName ].id ] = currentNode[ nodeName ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( attrs.id !== '' ) currentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t} else if ( typeof attrs.id === 'number' ) {\n\n\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\tcurrentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t} else if ( nodeName !== 'Properties70' ) {\n\n\t\t\t\tif ( nodeName === 'PoseNode' )\tcurrentNode[ nodeName ] = [ node ];\n\t\t\t\telse currentNode[ nodeName ] = node;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( typeof attrs.id === 'number' ) node.id = attrs.id;\n\t\tif ( attrs.name !== '' ) node.attrName = attrs.name;\n\t\tif ( attrs.type !== '' ) node.attrType = attrs.type;\n\n\t\tthis.pushStack( node );\n\n\t}\n\n\tparseNodeAttr( attrs ) {\n\n\t\tlet id = attrs[ 0 ];\n\n\t\tif ( attrs[ 0 ] !== '' ) {\n\n\t\t\tid = parseInt( attrs[ 0 ] );\n\n\t\t\tif ( isNaN( id ) ) {\n\n\t\t\t\tid = attrs[ 0 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet name = '', type = '';\n\n\t\tif ( attrs.length > 1 ) {\n\n\t\t\tname = attrs[ 1 ].replace( /^(\\w+)::/, '' );\n\t\t\ttype = attrs[ 2 ];\n\n\t\t}\n\n\t\treturn { id: id, name: name, type: type };\n\n\t}\n\n\tparseNodeProperty( line, property, contentLine ) {\n\n\t\tlet propName = property[ 1 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\t\tlet propValue = property[ 2 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\n\t\t// for special case: base64 image data follows \"Content: ,\" line\n\t\t//\tContent: ,\n\t\t//\t \"/9j/4RDaRXhpZgAATU0A...\"\n\t\tif ( propName === 'Content' && propValue === ',' ) {\n\n\t\t\tpropValue = contentLine.replace( /\"/g, '' ).replace( /,$/, '' ).trim();\n\n\t\t}\n\n\t\tconst currentNode = this.getCurrentNode();\n\t\tconst parentName = currentNode.name;\n\n\t\tif ( parentName === 'Properties70' ) {\n\n\t\t\tthis.parseNodeSpecialProperty( line, propName, propValue );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Connections\n\t\tif ( propName === 'C' ) {\n\n\t\t\tconst connProps = propValue.split( ',' ).slice( 1 );\n\t\t\tconst from = parseInt( connProps[ 0 ] );\n\t\t\tconst to = parseInt( connProps[ 1 ] );\n\n\t\t\tlet rest = propValue.split( ',' ).slice( 3 );\n\n\t\t\trest = rest.map( function ( elem ) {\n\n\t\t\t\treturn elem.trim().replace( /^\"/, '' );\n\n\t\t\t} );\n\n\t\t\tpropName = 'connections';\n\t\t\tpropValue = [ from, to ];\n\t\t\tappend( propValue, rest );\n\n\t\t\tif ( currentNode[ propName ] === undefined ) {\n\n\t\t\t\tcurrentNode[ propName ] = [];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Node\n\t\tif ( propName === 'Node' ) currentNode.id = propValue;\n\n\t\t// connections\n\t\tif ( propName in currentNode && Array.isArray( currentNode[ propName ] ) ) {\n\n\t\t\tcurrentNode[ propName ].push( propValue );\n\n\t\t} else {\n\n\t\t\tif ( propName !== 'a' ) currentNode[ propName ] = propValue;\n\t\t\telse currentNode.a = propValue;\n\n\t\t}\n\n\t\tthis.setCurrentProp( currentNode, propName );\n\n\t\t// convert string to array, unless it ends in ',' in which case more will be added to it\n\t\tif ( propName === 'a' && propValue.slice( - 1 ) !== ',' ) {\n\n\t\t\tcurrentNode.a = parseNumberArray( propValue );\n\n\t\t}\n\n\t}\n\n\tparseNodePropertyContinued( line ) {\n\n\t\tconst currentNode = this.getCurrentNode();\n\n\t\tcurrentNode.a += line;\n\n\t\t// if the line doesn't end in ',' we have reached the end of the property value\n\t\t// so convert the string to an array\n\t\tif ( line.slice( - 1 ) !== ',' ) {\n\n\t\t\tcurrentNode.a = parseNumberArray( currentNode.a );\n\n\t\t}\n\n\t}\n\n\t// parse \"Property70\"\n\tparseNodeSpecialProperty( line, propName, propValue ) {\n\n\t\t// split this\n\t\t// P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n\t\t// into array like below\n\t\t// [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n\t\tconst props = propValue.split( '\",' ).map( function ( prop ) {\n\n\t\t\treturn prop.trim().replace( /^\\\"/, '' ).replace( /\\s/, '_' );\n\n\t\t} );\n\n\t\tconst innerPropName = props[ 0 ];\n\t\tconst innerPropType1 = props[ 1 ];\n\t\tconst innerPropType2 = props[ 2 ];\n\t\tconst innerPropFlag = props[ 3 ];\n\t\tlet innerPropValue = props[ 4 ];\n\n\t\t// cast values where needed, otherwise leave as strings\n\t\tswitch ( innerPropType1 ) {\n\n\t\t\tcase 'int':\n\t\t\tcase 'enum':\n\t\t\tcase 'bool':\n\t\t\tcase 'ULongLong':\n\t\t\tcase 'double':\n\t\t\tcase 'Number':\n\t\t\tcase 'FieldOfView':\n\t\t\t\tinnerPropValue = parseFloat( innerPropValue );\n\t\t\t\tbreak;\n\n\t\t\tcase 'Color':\n\t\t\tcase 'ColorRGB':\n\t\t\tcase 'Vector3D':\n\t\t\tcase 'Lcl_Translation':\n\t\t\tcase 'Lcl_Rotation':\n\t\t\tcase 'Lcl_Scaling':\n\t\t\t\tinnerPropValue = parseNumberArray( innerPropValue );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\t// CAUTION: these props must append to parent's parent\n\t\tthis.getPrevNode()[ innerPropName ] = {\n\n\t\t\t'type': innerPropType1,\n\t\t\t'type2': innerPropType2,\n\t\t\t'flag': innerPropFlag,\n\t\t\t'value': innerPropValue\n\n\t\t};\n\n\t\tthis.setCurrentProp( this.getPrevNode(), innerPropName );\n\n\t}\n\n}\n\n// Parse an FBX file in Binary format\nclass BinaryParser {\n\n\tparse( buffer ) {\n\n\t\tconst reader = new BinaryReader( buffer );\n\t\treader.skip( 23 ); // skip magic 23 bytes\n\n\t\tconst version = reader.getUint32();\n\n\t\tif ( version < 6400 ) {\n\n\t\t\tthrow new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + version );\n\n\t\t}\n\n\t\tconst allNodes = new FBXTree();\n\n\t\twhile ( ! this.endOfContent( reader ) ) {\n\n\t\t\tconst node = this.parseNode( reader, version );\n\t\t\tif ( node !== null ) allNodes.add( node.name, node );\n\n\t\t}\n\n\t\treturn allNodes;\n\n\t}\n\n\t// Check if reader has reached the end of content.\n\tendOfContent( reader ) {\n\n\t\t// footer size: 160bytes + 16-byte alignment padding\n\t\t// - 16bytes: magic\n\t\t// - padding til 16-byte alignment (at least 1byte?)\n\t\t//\t(seems like some exporters embed fixed 15 or 16bytes?)\n\t\t// - 4bytes: magic\n\t\t// - 4bytes: version\n\t\t// - 120bytes: zero\n\t\t// - 16bytes: magic\n\t\tif ( reader.size() % 16 === 0 ) {\n\n\t\t\treturn ( ( reader.getOffset() + 160 + 16 ) & ~ 0xf ) >= reader.size();\n\n\t\t} else {\n\n\t\t\treturn reader.getOffset() + 160 + 16 >= reader.size();\n\n\t\t}\n\n\t}\n\n\t// recursively parse nodes until the end of the file is reached\n\tparseNode( reader, version ) {\n\n\t\tconst node = {};\n\n\t\t// The first three data sizes depends on version.\n\t\tconst endOffset = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\t\tconst numProperties = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\n\t\t( version >= 7500 ) ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n\t\tconst nameLen = reader.getUint8();\n\t\tconst name = reader.getString( nameLen );\n\n\t\t// Regards this node as NULL-record if endOffset is zero\n\t\tif ( endOffset === 0 ) return null;\n\n\t\tconst propertyList = [];\n\n\t\tfor ( let i = 0; i < numProperties; i ++ ) {\n\n\t\t\tpropertyList.push( this.parseProperty( reader ) );\n\n\t\t}\n\n\t\t// Regards the first three elements in propertyList as id, attrName, and attrType\n\t\tconst id = propertyList.length > 0 ? propertyList[ 0 ] : '';\n\t\tconst attrName = propertyList.length > 1 ? propertyList[ 1 ] : '';\n\t\tconst attrType = propertyList.length > 2 ? propertyList[ 2 ] : '';\n\n\t\t// check if this node represents just a single property\n\t\t// like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\t\tnode.singleProperty = ( numProperties === 1 && reader.getOffset() === endOffset ) ? true : false;\n\n\t\twhile ( endOffset > reader.getOffset() ) {\n\n\t\t\tconst subNode = this.parseNode( reader, version );\n\n\t\t\tif ( subNode !== null ) this.parseSubNode( name, node, subNode );\n\n\t\t}\n\n\t\tnode.propertyList = propertyList; // raw property list used by parent\n\n\t\tif ( typeof id === 'number' ) node.id = id;\n\t\tif ( attrName !== '' ) node.attrName = attrName;\n\t\tif ( attrType !== '' ) node.attrType = attrType;\n\t\tif ( name !== '' ) node.name = name;\n\n\t\treturn node;\n\n\t}\n\n\tparseSubNode( name, node, subNode ) {\n\n\t\t// special case: child node is single property\n\t\tif ( subNode.singleProperty === true ) {\n\n\t\t\tconst value = subNode.propertyList[ 0 ];\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t\tsubNode.a = value;\n\n\t\t\t} else {\n\n\t\t\t\tnode[ subNode.name ] = value;\n\n\t\t\t}\n\n\t\t} else if ( name === 'Connections' && subNode.name === 'C' ) {\n\n\t\t\tconst array = [];\n\n\t\t\tsubNode.propertyList.forEach( function ( property, i ) {\n\n\t\t\t\t// first Connection is FBX type (OO, OP, etc.). We'll discard these\n\t\t\t\tif ( i !== 0 ) array.push( property );\n\n\t\t\t} );\n\n\t\t\tif ( node.connections === undefined ) {\n\n\t\t\t\tnode.connections = [];\n\n\t\t\t}\n\n\t\t\tnode.connections.push( array );\n\n\t\t} else if ( subNode.name === 'Properties70' ) {\n\n\t\t\tconst keys = Object.keys( subNode );\n\n\t\t\tkeys.forEach( function ( key ) {\n\n\t\t\t\tnode[ key ] = subNode[ key ];\n\n\t\t\t} );\n\n\t\t} else if ( name === 'Properties70' && subNode.name === 'P' ) {\n\n\t\t\tlet innerPropName = subNode.propertyList[ 0 ];\n\t\t\tlet innerPropType1 = subNode.propertyList[ 1 ];\n\t\t\tconst innerPropType2 = subNode.propertyList[ 2 ];\n\t\t\tconst innerPropFlag = subNode.propertyList[ 3 ];\n\t\t\tlet innerPropValue;\n\n\t\t\tif ( innerPropName.indexOf( 'Lcl ' ) === 0 ) innerPropName = innerPropName.replace( 'Lcl ', 'Lcl_' );\n\t\t\tif ( innerPropType1.indexOf( 'Lcl ' ) === 0 ) innerPropType1 = innerPropType1.replace( 'Lcl ', 'Lcl_' );\n\n\t\t\tif ( innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf( 'Lcl_' ) === 0 ) {\n\n\t\t\t\tinnerPropValue = [\n\t\t\t\t\tsubNode.propertyList[ 4 ],\n\t\t\t\t\tsubNode.propertyList[ 5 ],\n\t\t\t\t\tsubNode.propertyList[ 6 ]\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\tinnerPropValue = subNode.propertyList[ 4 ];\n\n\t\t\t}\n\n\t\t\t// this will be copied to parent, see above\n\t\t\tnode[ innerPropName ] = {\n\n\t\t\t\t'type': innerPropType1,\n\t\t\t\t'type2': innerPropType2,\n\t\t\t\t'flag': innerPropFlag,\n\t\t\t\t'value': innerPropValue\n\n\t\t\t};\n\n\t\t} else if ( node[ subNode.name ] === undefined ) {\n\n\t\t\tif ( typeof subNode.id === 'number' ) {\n\n\t\t\t\tnode[ subNode.name ] = {};\n\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t} else {\n\n\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( subNode.name === 'PoseNode' ) {\n\n\t\t\t\tif ( ! Array.isArray( node[ subNode.name ] ) ) {\n\n\t\t\t\t\tnode[ subNode.name ] = [ node[ subNode.name ] ];\n\n\t\t\t\t}\n\n\t\t\t\tnode[ subNode.name ].push( subNode );\n\n\t\t\t} else if ( node[ subNode.name ][ subNode.id ] === undefined ) {\n\n\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tparseProperty( reader ) {\n\n\t\tconst type = reader.getString( 1 );\n\t\tlet length;\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 'C':\n\t\t\t\treturn reader.getBoolean();\n\n\t\t\tcase 'D':\n\t\t\t\treturn reader.getFloat64();\n\n\t\t\tcase 'F':\n\t\t\t\treturn reader.getFloat32();\n\n\t\t\tcase 'I':\n\t\t\t\treturn reader.getInt32();\n\n\t\t\tcase 'L':\n\t\t\t\treturn reader.getInt64();\n\n\t\t\tcase 'R':\n\t\t\t\tlength = reader.getUint32();\n\t\t\t\treturn reader.getArrayBuffer( length );\n\n\t\t\tcase 'S':\n\t\t\t\tlength = reader.getUint32();\n\t\t\t\treturn reader.getString( length );\n\n\t\t\tcase 'Y':\n\t\t\t\treturn reader.getInt16();\n\n\t\t\tcase 'b':\n\t\t\tcase 'c':\n\t\t\tcase 'd':\n\t\t\tcase 'f':\n\t\t\tcase 'i':\n\t\t\tcase 'l':\n\n\t\t\t\tconst arrayLength = reader.getUint32();\n\t\t\t\tconst encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\t\t\t\tconst compressedLength = reader.getUint32();\n\n\t\t\t\tif ( encoding === 0 ) {\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\treturn reader.getBooleanArray( arrayLength );\n\n\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\treturn reader.getFloat64Array( arrayLength );\n\n\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\treturn reader.getFloat32Array( arrayLength );\n\n\t\t\t\t\t\tcase 'i':\n\t\t\t\t\t\t\treturn reader.getInt32Array( arrayLength );\n\n\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\treturn reader.getInt64Array( arrayLength );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst data = fflate.unzlibSync( new Uint8Array( reader.getArrayBuffer( compressedLength ) ) );\n\t\t\t\tconst reader2 = new BinaryReader( data.buffer );\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\treturn reader2.getBooleanArray( arrayLength );\n\n\t\t\t\t\tcase 'd':\n\t\t\t\t\t\treturn reader2.getFloat64Array( arrayLength );\n\n\t\t\t\t\tcase 'f':\n\t\t\t\t\t\treturn reader2.getFloat32Array( arrayLength );\n\n\t\t\t\t\tcase 'i':\n\t\t\t\t\t\treturn reader2.getInt32Array( arrayLength );\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\treturn reader2.getInt64Array( arrayLength );\n\n\t\t\t\t}\n\n\t\t\t\tbreak; // cannot happen but is required by the DeepScan\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown property type ' + type );\n\n\t\t}\n\n\t}\n\n}\n\nclass BinaryReader {\n\n\tconstructor( buffer, littleEndian ) {\n\n\t\tthis.dv = new DataView( buffer );\n\t\tthis.offset = 0;\n\t\tthis.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;\n\t\tthis._textDecoder = new TextDecoder();\n\n\t}\n\n\tgetOffset() {\n\n\t\treturn this.offset;\n\n\t}\n\n\tsize() {\n\n\t\treturn this.dv.buffer.byteLength;\n\n\t}\n\n\tskip( length ) {\n\n\t\tthis.offset += length;\n\n\t}\n\n\t// seems like true/false representation depends on exporter.\n\t// true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n\t// then sees LSB.\n\tgetBoolean() {\n\n\t\treturn ( this.getUint8() & 1 ) === 1;\n\n\t}\n\n\tgetBooleanArray( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getBoolean() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetUint8() {\n\n\t\tconst value = this.dv.getUint8( this.offset );\n\t\tthis.offset += 1;\n\t\treturn value;\n\n\t}\n\n\tgetInt16() {\n\n\t\tconst value = this.dv.getInt16( this.offset, this.littleEndian );\n\t\tthis.offset += 2;\n\t\treturn value;\n\n\t}\n\n\tgetInt32() {\n\n\t\tconst value = this.dv.getInt32( this.offset, this.littleEndian );\n\t\tthis.offset += 4;\n\t\treturn value;\n\n\t}\n\n\tgetInt32Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getInt32() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetUint32() {\n\n\t\tconst value = this.dv.getUint32( this.offset, this.littleEndian );\n\t\tthis.offset += 4;\n\t\treturn value;\n\n\t}\n\n\t// JavaScript doesn't support 64-bit integer so calculate this here\n\t// 1 << 32 will return 1 so using multiply operation instead here.\n\t// There's a possibility that this method returns wrong value if the value\n\t// is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n\t// TODO: safely handle 64-bit integer\n\tgetInt64() {\n\n\t\tlet low, high;\n\n\t\tif ( this.littleEndian ) {\n\n\t\t\tlow = this.getUint32();\n\t\t\thigh = this.getUint32();\n\n\t\t} else {\n\n\t\t\thigh = this.getUint32();\n\t\t\tlow = this.getUint32();\n\n\t\t}\n\n\t\t// calculate negative value\n\t\tif ( high & 0x80000000 ) {\n\n\t\t\thigh = ~ high & 0xFFFFFFFF;\n\t\t\tlow = ~ low & 0xFFFFFFFF;\n\n\t\t\tif ( low === 0xFFFFFFFF ) high = ( high + 1 ) & 0xFFFFFFFF;\n\n\t\t\tlow = ( low + 1 ) & 0xFFFFFFFF;\n\n\t\t\treturn - ( high * 0x100000000 + low );\n\n\t\t}\n\n\t\treturn high * 0x100000000 + low;\n\n\t}\n\n\tgetInt64Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getInt64() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\t// Note: see getInt64() comment\n\tgetUint64() {\n\n\t\tlet low, high;\n\n\t\tif ( this.littleEndian ) {\n\n\t\t\tlow = this.getUint32();\n\t\t\thigh = this.getUint32();\n\n\t\t} else {\n\n\t\t\thigh = this.getUint32();\n\t\t\tlow = this.getUint32();\n\n\t\t}\n\n\t\treturn high * 0x100000000 + low;\n\n\t}\n\n\tgetFloat32() {\n\n\t\tconst value = this.dv.getFloat32( this.offset, this.littleEndian );\n\t\tthis.offset += 4;\n\t\treturn value;\n\n\t}\n\n\tgetFloat32Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getFloat32() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetFloat64() {\n\n\t\tconst value = this.dv.getFloat64( this.offset, this.littleEndian );\n\t\tthis.offset += 8;\n\t\treturn value;\n\n\t}\n\n\tgetFloat64Array( size ) {\n\n\t\tconst a = [];\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\ta.push( this.getFloat64() );\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgetArrayBuffer( size ) {\n\n\t\tconst value = this.dv.buffer.slice( this.offset, this.offset + size );\n\t\tthis.offset += size;\n\t\treturn value;\n\n\t}\n\n\tgetString( size ) {\n\n\t\tconst start = this.offset;\n\t\tlet a = new Uint8Array( this.dv.buffer, start, size );\n\n\t\tthis.skip( size );\n\n\t\tconst nullByte = a.indexOf( 0 );\n\t\tif ( nullByte >= 0 ) a = new Uint8Array( this.dv.buffer, start, nullByte );\n\n\t\treturn this._textDecoder.decode( a );\n\n\t}\n\n}\n\n// FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n// and BinaryParser( FBX Binary format)\nclass FBXTree {\n\n\tadd( key, val ) {\n\n\t\tthis[ key ] = val;\n\n\t}\n\n}\n\n// ************** UTILITY FUNCTIONS **************\n\nfunction isFbxFormatBinary( buffer ) {\n\n\tconst CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\n\n\treturn buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString( buffer, 0, CORRECT.length );\n\n}\n\nfunction isFbxFormatASCII( text ) {\n\n\tconst CORRECT = [ 'K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\' ];\n\n\tlet cursor = 0;\n\n\tfunction read( offset ) {\n\n\t\tconst result = text[ offset - 1 ];\n\t\ttext = text.slice( cursor + offset );\n\t\tcursor ++;\n\t\treturn result;\n\n\t}\n\n\tfor ( let i = 0; i < CORRECT.length; ++ i ) {\n\n\t\tconst num = read( 1 );\n\t\tif ( num === CORRECT[ i ] ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nfunction getFbxVersion( text ) {\n\n\tconst versionRegExp = /FBXVersion: (\\d+)/;\n\tconst match = text.match( versionRegExp );\n\n\tif ( match ) {\n\n\t\tconst version = parseInt( match[ 1 ] );\n\t\treturn version;\n\n\t}\n\n\tthrow new Error( 'THREE.FBXLoader: Cannot find the version number for the file given.' );\n\n}\n\n// Converts FBX ticks into real time seconds.\nfunction convertFBXTimeToSeconds( time ) {\n\n\treturn time / 46186158000;\n\n}\n\nconst dataArray = [];\n\n// extracts the data from the correct position in the FBX array based on indexing type\nfunction getData( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {\n\n\tlet index;\n\n\tswitch ( infoObject.mappingType ) {\n\n\t\tcase 'ByPolygonVertex' :\n\t\t\tindex = polygonVertexIndex;\n\t\t\tbreak;\n\t\tcase 'ByPolygon' :\n\t\t\tindex = polygonIndex;\n\t\t\tbreak;\n\t\tcase 'ByVertice' :\n\t\t\tindex = vertexIndex;\n\t\t\tbreak;\n\t\tcase 'AllSame' :\n\t\t\tindex = infoObject.indices[ 0 ];\n\t\t\tbreak;\n\t\tdefault :\n\t\t\tconsole.warn( 'THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType );\n\n\t}\n\n\tif ( infoObject.referenceType === 'IndexToDirect' ) index = infoObject.indices[ index ];\n\n\tconst from = index * infoObject.dataSize;\n\tconst to = from + infoObject.dataSize;\n\n\treturn slice( dataArray, infoObject.buffer, from, to );\n\n}\n\nconst tempEuler = new Euler();\nconst tempVec = new Vector3();\n\n// generate transformation from FBX transform data\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\nfunction generateTransform( transformData ) {\n\n\tconst lTranslationM = new Matrix4();\n\tconst lPreRotationM = new Matrix4();\n\tconst lRotationM = new Matrix4();\n\tconst lPostRotationM = new Matrix4();\n\n\tconst lScalingM = new Matrix4();\n\tconst lScalingPivotM = new Matrix4();\n\tconst lScalingOffsetM = new Matrix4();\n\tconst lRotationOffsetM = new Matrix4();\n\tconst lRotationPivotM = new Matrix4();\n\n\tconst lParentGX = new Matrix4();\n\tconst lParentLX = new Matrix4();\n\tconst lGlobalT = new Matrix4();\n\n\tconst inheritType = ( transformData.inheritType ) ? transformData.inheritType : 0;\n\n\tif ( transformData.translation ) lTranslationM.setPosition( tempVec.fromArray( transformData.translation ) );\n\n\tif ( transformData.preRotation ) {\n\n\t\tconst array = transformData.preRotation.map( MathUtils.degToRad );\n\t\tarray.push( transformData.eulerOrder || Euler.DEFAULT_ORDER );\n\t\tlPreRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t}\n\n\tif ( transformData.rotation ) {\n\n\t\tconst array = transformData.rotation.map( MathUtils.degToRad );\n\t\tarray.push( transformData.eulerOrder || Euler.DEFAULT_ORDER );\n\t\tlRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t}\n\n\tif ( transformData.postRotation ) {\n\n\t\tconst array = transformData.postRotation.map( MathUtils.degToRad );\n\t\tarray.push( transformData.eulerOrder || Euler.DEFAULT_ORDER );\n\t\tlPostRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\t\tlPostRotationM.invert();\n\n\t}\n\n\tif ( transformData.scale ) lScalingM.scale( tempVec.fromArray( transformData.scale ) );\n\n\t// Pivots and offsets\n\tif ( transformData.scalingOffset ) lScalingOffsetM.setPosition( tempVec.fromArray( transformData.scalingOffset ) );\n\tif ( transformData.scalingPivot ) lScalingPivotM.setPosition( tempVec.fromArray( transformData.scalingPivot ) );\n\tif ( transformData.rotationOffset ) lRotationOffsetM.setPosition( tempVec.fromArray( transformData.rotationOffset ) );\n\tif ( transformData.rotationPivot ) lRotationPivotM.setPosition( tempVec.fromArray( transformData.rotationPivot ) );\n\n\t// parent transform\n\tif ( transformData.parentMatrixWorld ) {\n\n\t\tlParentLX.copy( transformData.parentMatrix );\n\t\tlParentGX.copy( transformData.parentMatrixWorld );\n\n\t}\n\n\tconst lLRM = lPreRotationM.clone().multiply( lRotationM ).multiply( lPostRotationM );\n\t// Global Rotation\n\tconst lParentGRM = new Matrix4();\n\tlParentGRM.extractRotation( lParentGX );\n\n\t// Global Shear*Scaling\n\tconst lParentTM = new Matrix4();\n\tlParentTM.copyPosition( lParentGX );\n\n\tconst lParentGRSM = lParentTM.clone().invert().multiply( lParentGX );\n\tconst lParentGSM = lParentGRM.clone().invert().multiply( lParentGRSM );\n\tconst lLSM = lScalingM;\n\n\tconst lGlobalRS = new Matrix4();\n\n\tif ( inheritType === 0 ) {\n\n\t\tlGlobalRS.copy( lParentGRM ).multiply( lLRM ).multiply( lParentGSM ).multiply( lLSM );\n\n\t} else if ( inheritType === 1 ) {\n\n\t\tlGlobalRS.copy( lParentGRM ).multiply( lParentGSM ).multiply( lLRM ).multiply( lLSM );\n\n\t} else {\n\n\t\tconst lParentLSM = new Matrix4().scale( new Vector3().setFromMatrixScale( lParentLX ) );\n\t\tconst lParentLSM_inv = lParentLSM.clone().invert();\n\t\tconst lParentGSM_noLocal = lParentGSM.clone().multiply( lParentLSM_inv );\n\n\t\tlGlobalRS.copy( lParentGRM ).multiply( lLRM ).multiply( lParentGSM_noLocal ).multiply( lLSM );\n\n\t}\n\n\tconst lRotationPivotM_inv = lRotationPivotM.clone().invert();\n\tconst lScalingPivotM_inv = lScalingPivotM.clone().invert();\n\t// Calculate the local transform matrix\n\tlet lTransform = lTranslationM.clone().multiply( lRotationOffsetM ).multiply( lRotationPivotM ).multiply( lPreRotationM ).multiply( lRotationM ).multiply( lPostRotationM ).multiply( lRotationPivotM_inv ).multiply( lScalingOffsetM ).multiply( lScalingPivotM ).multiply( lScalingM ).multiply( lScalingPivotM_inv );\n\n\tconst lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition( lTransform );\n\n\tconst lGlobalTranslation = lParentGX.clone().multiply( lLocalTWithAllPivotAndOffsetInfo );\n\tlGlobalT.copyPosition( lGlobalTranslation );\n\n\tlTransform = lGlobalT.clone().multiply( lGlobalRS );\n\n\t// from global to local\n\tlTransform.premultiply( lParentGX.invert() );\n\n\treturn lTransform;\n\n}\n\n// Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\nfunction getEulerOrder( order ) {\n\n\torder = order || 0;\n\n\tconst enums = [\n\t\t'ZYX', // -> XYZ extrinsic\n\t\t'YZX', // -> XZY extrinsic\n\t\t'XZY', // -> YZX extrinsic\n\t\t'ZXY', // -> YXZ extrinsic\n\t\t'YXZ', // -> ZXY extrinsic\n\t\t'XYZ', // -> ZYX extrinsic\n\t\t//'SphericXYZ', // not possible to support\n\t];\n\n\tif ( order === 6 ) {\n\n\t\tconsole.warn( 'THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.' );\n\t\treturn enums[ 0 ];\n\n\t}\n\n\treturn enums[ order ];\n\n}\n\n// Parses comma separated list of numbers and returns them an array.\n// Used internally by the TextParser\nfunction parseNumberArray( value ) {\n\n\tconst array = value.split( ',' ).map( function ( val ) {\n\n\t\treturn parseFloat( val );\n\n\t} );\n\n\treturn array;\n\n}\n\nfunction convertArrayBufferToString( buffer, from, to ) {\n\n\tif ( from === undefined ) from = 0;\n\tif ( to === undefined ) to = buffer.byteLength;\n\n\treturn new TextDecoder().decode( new Uint8Array( buffer, from, to ) );\n\n}\n\nfunction append( a, b ) {\n\n\tfor ( let i = 0, j = a.length, l = b.length; i < l; i ++, j ++ ) {\n\n\t\ta[ j ] = b[ i ];\n\n\t}\n\n}\n\nfunction slice( a, b, from, to ) {\n\n\tfor ( let i = from, j = 0; i < to; i ++, j ++ ) {\n\n\t\ta[ j ] = b[ i ];\n\n\t}\n\n\treturn a;\n\n}\n\n\nexport { FBXLoader };\n"],"mappings":"AAAA,SACCA,YAAY,EACZC,aAAa,EACbC,IAAI,EACJC,cAAc,EACdC,mBAAmB,EACnBC,KAAK,EACLC,gBAAgB,EAChBC,gCAAgC,EAChCC,KAAK,EACLC,UAAU,EACVC,sBAAsB,EACtBC,KAAK,EACLC,IAAI,EACJC,iBAAiB,EACjBC,MAAM,EACNC,WAAW,EACXC,SAAS,EACTC,OAAO,EACPC,OAAO,EACPC,IAAI,EACJC,mBAAmB,EACnBC,iBAAiB,EACjBC,mBAAmB,EACnBC,QAAQ,EACRC,kBAAkB,EAClBC,iBAAiB,EACjBC,UAAU,EACVC,eAAe,EACfC,UAAU,EACVC,uBAAuB,EACvBC,cAAc,EACdC,QAAQ,EACRC,WAAW,EACXC,SAAS,EACTC,OAAO,EACPC,aAAa,EACbC,qBAAqB,EACrBC,OAAO,EACPC,OAAO,EACPC,OAAO,EACPC,mBAAmB,EACnBC,cAAc,EACdC,UAAU,QACJ,OAAO;AACd,OAAO,KAAKC,MAAM,MAAM,0BAA0B;AAClD,SAASC,UAAU,QAAQ,yBAAyB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,IAAIC,OAAO;AACX,IAAIC,WAAW;AACf,IAAIC,UAAU;AAEd,MAAMC,SAAS,SAASlC,MAAM,CAAC;EAE9BmC,WAAWA,CAAEC,OAAO,EAAG;IAEtB,KAAK,CAAEA,OAAQ,CAAC;EAEjB;EAEAC,IAAIA,CAAEC,GAAG,EAAEC,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAG;IAExC,MAAMC,KAAK,GAAG,IAAI;IAElB,MAAMC,IAAI,GAAKD,KAAK,CAACC,IAAI,KAAK,EAAE,GAAK1C,WAAW,CAAC2C,cAAc,CAAEN,GAAI,CAAC,GAAGI,KAAK,CAACC,IAAI;IAEnF,MAAME,MAAM,GAAG,IAAIlD,UAAU,CAAE,IAAI,CAACyC,OAAQ,CAAC;IAC7CS,MAAM,CAACC,OAAO,CAAEJ,KAAK,CAACC,IAAK,CAAC;IAC5BE,MAAM,CAACE,eAAe,CAAE,aAAc,CAAC;IACvCF,MAAM,CAACG,gBAAgB,CAAEN,KAAK,CAACO,aAAc,CAAC;IAC9CJ,MAAM,CAACK,kBAAkB,CAAER,KAAK,CAACS,eAAgB,CAAC;IAElDN,MAAM,CAACR,IAAI,CAAEC,GAAG,EAAE,UAAWc,MAAM,EAAG;MAErC,IAAI;QAEHb,MAAM,CAAEG,KAAK,CAACW,KAAK,CAAED,MAAM,EAAET,IAAK,CAAE,CAAC;MAEtC,CAAC,CAAC,OAAQW,CAAC,EAAG;QAEb,IAAKb,OAAO,EAAG;UAEdA,OAAO,CAAEa,CAAE,CAAC;QAEb,CAAC,MAAM;UAENC,OAAO,CAACC,KAAK,CAAEF,CAAE,CAAC;QAEnB;QAEAZ,KAAK,CAACN,OAAO,CAACqB,SAAS,CAAEnB,GAAI,CAAC;MAE/B;IAED,CAAC,EAAEE,UAAU,EAAEC,OAAQ,CAAC;EAEzB;EAEAY,KAAKA,CAAEK,SAAS,EAAEf,IAAI,EAAG;IAExB,IAAKgB,iBAAiB,CAAED,SAAU,CAAC,EAAG;MAErC3B,OAAO,GAAG,IAAI6B,YAAY,CAAC,CAAC,CAACP,KAAK,CAAEK,SAAU,CAAC;IAEhD,CAAC,MAAM;MAEN,MAAMG,OAAO,GAAGC,0BAA0B,CAAEJ,SAAU,CAAC;MAEvD,IAAK,CAAEK,gBAAgB,CAAEF,OAAQ,CAAC,EAAG;QAEpC,MAAM,IAAIG,KAAK,CAAE,kCAAmC,CAAC;MAEtD;MAEA,IAAKC,aAAa,CAAEJ,OAAQ,CAAC,GAAG,IAAI,EAAG;QAEtC,MAAM,IAAIG,KAAK,CAAE,2DAA2D,GAAGC,aAAa,CAAEJ,OAAQ,CAAE,CAAC;MAE1G;MAEA9B,OAAO,GAAG,IAAImC,UAAU,CAAC,CAAC,CAACb,KAAK,CAAEQ,OAAQ,CAAC;IAE5C;;IAEA;;IAEA,MAAMM,aAAa,GAAG,IAAI9C,aAAa,CAAE,IAAI,CAACe,OAAQ,CAAC,CAACU,OAAO,CAAE,IAAI,CAACsB,YAAY,IAAIzB,IAAK,CAAC,CAAC0B,cAAc,CAAE,IAAI,CAACC,WAAY,CAAC;IAE/H,OAAO,IAAIC,aAAa,CAAEJ,aAAa,EAAE,IAAI,CAAC/B,OAAQ,CAAC,CAACiB,KAAK,CAAEtB,OAAQ,CAAC;EAEzE;AAED;;AAEA;AACA,MAAMwC,aAAa,CAAC;EAEnBpC,WAAWA,CAAEgC,aAAa,EAAE/B,OAAO,EAAG;IAErC,IAAI,CAAC+B,aAAa,GAAGA,aAAa;IAClC,IAAI,CAAC/B,OAAO,GAAGA,OAAO;EAEvB;EAEAiB,KAAKA,CAAA,EAAG;IAEPrB,WAAW,GAAG,IAAI,CAACwC,gBAAgB,CAAC,CAAC;IAErC,MAAMC,MAAM,GAAG,IAAI,CAACC,WAAW,CAAC,CAAC;IACjC,MAAMC,QAAQ,GAAG,IAAI,CAACC,aAAa,CAAEH,MAAO,CAAC;IAC7C,MAAMI,SAAS,GAAG,IAAI,CAACC,cAAc,CAAEH,QAAS,CAAC;IACjD,MAAMI,SAAS,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;IACvC,MAAMC,WAAW,GAAG,IAAIC,cAAc,CAAC,CAAC,CAAC7B,KAAK,CAAE0B,SAAU,CAAC;IAE3D,IAAI,CAACI,UAAU,CAAEJ,SAAS,EAAEE,WAAW,EAAEJ,SAAU,CAAC;IAEpD,OAAO5C,UAAU;EAElB;;EAEA;EACA;EACAuC,gBAAgBA,CAAA,EAAG;IAElB,MAAMY,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;IAE/B,IAAK,aAAa,IAAItD,OAAO,EAAG;MAE/B,MAAMuD,cAAc,GAAGvD,OAAO,CAACwD,WAAW,CAACvD,WAAW;MAEtDsD,cAAc,CAACE,OAAO,CAAE,UAAWC,aAAa,EAAG;QAElD,MAAMC,MAAM,GAAGD,aAAa,CAAE,CAAC,CAAE;QACjC,MAAME,IAAI,GAAGF,aAAa,CAAE,CAAC,CAAE;QAC/B,MAAMG,YAAY,GAAGH,aAAa,CAAE,CAAC,CAAE;QAEvC,IAAK,CAAEL,aAAa,CAACS,GAAG,CAAEH,MAAO,CAAC,EAAG;UAEpCN,aAAa,CAACU,GAAG,CAAEJ,MAAM,EAAE;YAC1BK,OAAO,EAAE,EAAE;YACXC,QAAQ,EAAE;UACX,CAAE,CAAC;QAEJ;QAEA,MAAMC,kBAAkB,GAAG;UAAEC,EAAE,EAAEP,IAAI;UAAEC,YAAY,EAAEA;QAAa,CAAC;QACnER,aAAa,CAACe,GAAG,CAAET,MAAO,CAAC,CAACK,OAAO,CAACK,IAAI,CAAEH,kBAAmB,CAAC;QAE9D,IAAK,CAAEb,aAAa,CAACS,GAAG,CAAEF,IAAK,CAAC,EAAG;UAElCP,aAAa,CAACU,GAAG,CAAEH,IAAI,EAAE;YACxBI,OAAO,EAAE,EAAE;YACXC,QAAQ,EAAE;UACX,CAAE,CAAC;QAEJ;QAEA,MAAMK,iBAAiB,GAAG;UAAEH,EAAE,EAAER,MAAM;UAAEE,YAAY,EAAEA;QAAa,CAAC;QACpER,aAAa,CAACe,GAAG,CAAER,IAAK,CAAC,CAACK,QAAQ,CAACI,IAAI,CAAEC,iBAAkB,CAAC;MAE7D,CAAE,CAAC;IAEJ;IAEA,OAAOjB,aAAa;EAErB;;EAEA;EACA;EACA;EACAV,WAAWA,CAAA,EAAG;IAEb,MAAMD,MAAM,GAAG,CAAC,CAAC;IACjB,MAAM6B,KAAK,GAAG,CAAC,CAAC;IAEhB,IAAK,OAAO,IAAIvE,OAAO,CAACwE,OAAO,EAAG;MAEjC,MAAMC,UAAU,GAAGzE,OAAO,CAACwE,OAAO,CAACE,KAAK;MAExC,KAAM,MAAMC,MAAM,IAAIF,UAAU,EAAG;QAElC,MAAMG,SAAS,GAAGH,UAAU,CAAEE,MAAM,CAAE;QAEtC,MAAME,EAAE,GAAGC,QAAQ,CAAEH,MAAO,CAAC;QAE7BjC,MAAM,CAAEmC,EAAE,CAAE,GAAGD,SAAS,CAACG,gBAAgB,IAAIH,SAAS,CAACI,QAAQ;;QAE/D;QACA,IAAK,SAAS,IAAIJ,SAAS,EAAG;UAE7B,MAAMK,kBAAkB,GAAKL,SAAS,CAACM,OAAO,YAAYC,WAAW,IAAQP,SAAS,CAACM,OAAO,CAACE,UAAU,GAAG,CAAG;UAC/G,MAAMC,aAAa,GAAK,OAAOT,SAAS,CAACM,OAAO,KAAK,QAAQ,IAAQN,SAAS,CAACM,OAAO,KAAK,EAAI;UAE/F,IAAKD,kBAAkB,IAAII,aAAa,EAAG;YAE1C,MAAMC,KAAK,GAAG,IAAI,CAACC,UAAU,CAAEd,UAAU,CAAEE,MAAM,CAAG,CAAC;YAErDJ,KAAK,CAAEK,SAAS,CAACG,gBAAgB,IAAIH,SAAS,CAACI,QAAQ,CAAE,GAAGM,KAAK;UAElE;QAED;MAED;IAED;IAEA,KAAM,MAAMT,EAAE,IAAInC,MAAM,EAAG;MAE1B,MAAM8C,QAAQ,GAAG9C,MAAM,CAAEmC,EAAE,CAAE;MAE7B,IAAKN,KAAK,CAAEiB,QAAQ,CAAE,KAAKC,SAAS,EAAG/C,MAAM,CAAEmC,EAAE,CAAE,GAAGN,KAAK,CAAEiB,QAAQ,CAAE,CAAC,KACnE9C,MAAM,CAAEmC,EAAE,CAAE,GAAGnC,MAAM,CAAEmC,EAAE,CAAE,CAACa,KAAK,CAAE,IAAK,CAAC,CAACC,GAAG,CAAC,CAAC;IAErD;IAEA,OAAOjD,MAAM;EAEd;;EAEA;EACA6C,UAAUA,CAAEX,SAAS,EAAG;IAEvB,MAAMgB,OAAO,GAAGhB,SAAS,CAACM,OAAO;IACjC,MAAMW,QAAQ,GAAGjB,SAAS,CAACG,gBAAgB,IAAIH,SAAS,CAACI,QAAQ;IACjE,MAAMc,SAAS,GAAGD,QAAQ,CAACE,KAAK,CAAEF,QAAQ,CAACG,WAAW,CAAE,GAAI,CAAC,GAAG,CAAE,CAAC,CAACC,WAAW,CAAC,CAAC;IAEjF,IAAIC,IAAI;IAER,QAASJ,SAAS;MAEjB,KAAK,KAAK;QAETI,IAAI,GAAG,WAAW;QAClB;MAED,KAAK,KAAK;MACV,KAAK,MAAM;QAEVA,IAAI,GAAG,YAAY;QACnB;MAED,KAAK,KAAK;QAETA,IAAI,GAAG,WAAW;QAClB;MAED,KAAK,KAAK;QAETA,IAAI,GAAG,YAAY;QACnB;MAED,KAAK,KAAK;QAET,IAAK,IAAI,CAAC7F,OAAO,CAAC8F,UAAU,CAAE,MAAO,CAAC,KAAK,IAAI,EAAG;UAEjD3E,OAAO,CAAC4E,IAAI,CAAE,4CAA4C,EAAEP,QAAS,CAAC;QAEvE;QAEAK,IAAI,GAAG,WAAW;QAClB;MAED;QAEC1E,OAAO,CAAC4E,IAAI,CAAE,yBAAyB,GAAGN,SAAS,GAAG,qBAAsB,CAAC;QAC7E;IAEF;IAEA,IAAK,OAAOF,OAAO,KAAK,QAAQ,EAAG;MAAE;;MAEpC,OAAO,OAAO,GAAGM,IAAI,GAAG,UAAU,GAAGN,OAAO;IAE7C,CAAC,MAAM;MAAE;;MAER,MAAMS,KAAK,GAAG,IAAIC,UAAU,CAAEV,OAAQ,CAAC;MACvC,OAAOW,MAAM,CAACC,GAAG,CAACC,eAAe,CAAE,IAAIC,IAAI,CAAE,CAAEL,KAAK,CAAE,EAAE;QAAEH,IAAI,EAAEA;MAAK,CAAE,CAAE,CAAC;IAE3E;EAED;;EAEA;EACA;EACA;EACArD,aAAaA,CAAEH,MAAM,EAAG;IAEvB,MAAMiE,UAAU,GAAG,IAAIrD,GAAG,CAAC,CAAC;IAE5B,IAAK,SAAS,IAAItD,OAAO,CAACwE,OAAO,EAAG;MAEnC,MAAMoC,YAAY,GAAG5G,OAAO,CAACwE,OAAO,CAACnF,OAAO;MAC5C,KAAM,MAAMsF,MAAM,IAAIiC,YAAY,EAAG;QAEpC,MAAMC,OAAO,GAAG,IAAI,CAACC,YAAY,CAAEF,YAAY,CAAEjC,MAAM,CAAE,EAAEjC,MAAO,CAAC;QACnEiE,UAAU,CAAC5C,GAAG,CAAEe,QAAQ,CAAEH,MAAO,CAAC,EAAEkC,OAAQ,CAAC;MAE9C;IAED;IAEA,OAAOF,UAAU;EAElB;;EAEA;EACAG,YAAYA,CAAEC,WAAW,EAAErE,MAAM,EAAG;IAEnC,MAAMmE,OAAO,GAAG,IAAI,CAACG,WAAW,CAAED,WAAW,EAAErE,MAAO,CAAC;IAEvDmE,OAAO,CAAC1C,EAAE,GAAG4C,WAAW,CAAClC,EAAE;IAE3BgC,OAAO,CAACI,IAAI,GAAGF,WAAW,CAACG,QAAQ;IAEnC,MAAMC,SAAS,GAAGJ,WAAW,CAACK,SAAS;IACvC,MAAMC,SAAS,GAAGN,WAAW,CAACO,SAAS;IAEvC,MAAMC,MAAM,GAAGJ,SAAS,KAAK1B,SAAS,GAAG0B,SAAS,CAACK,KAAK,GAAG,CAAC;IAC5D,MAAMC,MAAM,GAAGJ,SAAS,KAAK5B,SAAS,GAAG4B,SAAS,CAACG,KAAK,GAAG,CAAC;;IAE5D;IACA;;IAEAX,OAAO,CAACa,KAAK,GAAGH,MAAM,KAAK,CAAC,GAAGtI,cAAc,GAAG1B,mBAAmB;IACnEsJ,OAAO,CAACc,KAAK,GAAGF,MAAM,KAAK,CAAC,GAAGxI,cAAc,GAAG1B,mBAAmB;IAEnE,IAAK,SAAS,IAAIwJ,WAAW,EAAG;MAE/B,MAAMa,MAAM,GAAGb,WAAW,CAACc,OAAO,CAACL,KAAK;MAExCX,OAAO,CAACiB,MAAM,CAACC,CAAC,GAAGH,MAAM,CAAE,CAAC,CAAE;MAC9Bf,OAAO,CAACiB,MAAM,CAACE,CAAC,GAAGJ,MAAM,CAAE,CAAC,CAAE;IAE/B;IAEA,IAAK,aAAa,IAAIb,WAAW,EAAG;MAEnC,MAAMa,MAAM,GAAGb,WAAW,CAACkB,WAAW,CAACT,KAAK;MAE5CX,OAAO,CAACqB,MAAM,CAACH,CAAC,GAAGH,MAAM,CAAE,CAAC,CAAE;MAC9Bf,OAAO,CAACqB,MAAM,CAACF,CAAC,GAAGJ,MAAM,CAAE,CAAC,CAAE;IAE/B;IAEA,OAAOf,OAAO;EAEf;;EAEA;EACAG,WAAWA,CAAED,WAAW,EAAErE,MAAM,EAAG;IAElC,IAAImD,QAAQ;IAEZ,MAAMsC,WAAW,GAAG,IAAI,CAAC/F,aAAa,CAACxB,IAAI;IAE3C,MAAMqD,QAAQ,GAAGhE,WAAW,CAACmE,GAAG,CAAE2C,WAAW,CAAClC,EAAG,CAAC,CAACZ,QAAQ;IAE3D,IAAKA,QAAQ,KAAKwB,SAAS,IAAIxB,QAAQ,CAACmE,MAAM,GAAG,CAAC,IAAI1F,MAAM,CAAEuB,QAAQ,CAAE,CAAC,CAAE,CAACE,EAAE,CAAE,KAAKsB,SAAS,EAAG;MAEhGI,QAAQ,GAAGnD,MAAM,CAAEuB,QAAQ,CAAE,CAAC,CAAE,CAACE,EAAE,CAAE;MAErC,IAAK0B,QAAQ,CAACwC,OAAO,CAAE,OAAQ,CAAC,KAAK,CAAC,IAAIxC,QAAQ,CAACwC,OAAO,CAAE,OAAQ,CAAC,KAAK,CAAC,EAAG;QAE7E,IAAI,CAACjG,aAAa,CAACrB,OAAO,CAAE0E,SAAU,CAAC;MAExC;IAED;IAEA,IAAIoB,OAAO;IAEX,MAAMf,SAAS,GAAGiB,WAAW,CAACuB,QAAQ,CAACvC,KAAK,CAAE,CAAE,CAAE,CAAC,CAACE,WAAW,CAAC,CAAC;IAEjE,IAAKH,SAAS,KAAK,KAAK,EAAG;MAE1B,MAAMhF,MAAM,GAAG,IAAI,CAACT,OAAO,CAAC8F,UAAU,CAAE,MAAO,CAAC;MAEhD,IAAKrF,MAAM,KAAK,IAAI,EAAG;QAEtBU,OAAO,CAAC4E,IAAI,CAAE,mEAAmE,EAAEW,WAAW,CAAChC,gBAAiB,CAAC;QACjH8B,OAAO,GAAG,IAAIxH,OAAO,CAAC,CAAC;MAExB,CAAC,MAAM;QAENyB,MAAM,CAACC,OAAO,CAAE,IAAI,CAACqB,aAAa,CAACxB,IAAK,CAAC;QACzCiG,OAAO,GAAG/F,MAAM,CAACR,IAAI,CAAEuF,QAAS,CAAC;MAElC;IAED,CAAC,MAAM,IAAKC,SAAS,KAAK,KAAK,EAAG;MAEjC,MAAMhF,MAAM,GAAG,IAAI,CAACT,OAAO,CAAC8F,UAAU,CAAE,MAAO,CAAC;MAEhD,IAAKrF,MAAM,KAAK,IAAI,EAAG;QAEtBU,OAAO,CAAC4E,IAAI,CAAE,mEAAmE,EAAEW,WAAW,CAAChC,gBAAiB,CAAC;QACjH8B,OAAO,GAAG,IAAIxH,OAAO,CAAC,CAAC;MAExB,CAAC,MAAM;QAENyB,MAAM,CAACC,OAAO,CAAE,IAAI,CAACqB,aAAa,CAACxB,IAAK,CAAC;QACzCiG,OAAO,GAAG/F,MAAM,CAACR,IAAI,CAAEuF,QAAS,CAAC;MAElC;IAED,CAAC,MAAM,IAAKC,SAAS,KAAK,KAAK,EAAG;MAEjCtE,OAAO,CAAC4E,IAAI,CAAE,6EAA6E,EAAEW,WAAW,CAAChC,gBAAiB,CAAC;MAC3H8B,OAAO,GAAG,IAAIxH,OAAO,CAAC,CAAC;IAExB,CAAC,MAAM;MAENwH,OAAO,GAAG,IAAI,CAACzE,aAAa,CAAC9B,IAAI,CAAEuF,QAAS,CAAC;IAE9C;IAEA,IAAI,CAACzD,aAAa,CAACrB,OAAO,CAAEoH,WAAY,CAAC;IAEzC,OAAOtB,OAAO;EAEf;;EAEA;EACA9D,cAAcA,CAAE4D,UAAU,EAAG;IAE5B,MAAM4B,WAAW,GAAG,IAAIjF,GAAG,CAAC,CAAC;IAE7B,IAAK,UAAU,IAAItD,OAAO,CAACwE,OAAO,EAAG;MAEpC,MAAMgE,aAAa,GAAGxI,OAAO,CAACwE,OAAO,CAACiE,QAAQ;MAE9C,KAAM,MAAM9D,MAAM,IAAI6D,aAAa,EAAG;QAErC,MAAME,QAAQ,GAAG,IAAI,CAACC,aAAa,CAAEH,aAAa,CAAE7D,MAAM,CAAE,EAAEgC,UAAW,CAAC;QAE1E,IAAK+B,QAAQ,KAAK,IAAI,EAAGH,WAAW,CAACxE,GAAG,CAAEe,QAAQ,CAAEH,MAAO,CAAC,EAAE+D,QAAS,CAAC;MAEzE;IAED;IAEA,OAAOH,WAAW;EAEnB;;EAEA;EACA;EACA;EACAI,aAAaA,CAAEC,YAAY,EAAEjC,UAAU,EAAG;IAEzC,MAAMxC,EAAE,GAAGyE,YAAY,CAAC/D,EAAE;IAC1B,MAAMoC,IAAI,GAAG2B,YAAY,CAAC1B,QAAQ;IAClC,IAAIhB,IAAI,GAAG0C,YAAY,CAACC,YAAY;;IAEpC;IACA,IAAK,OAAO3C,IAAI,KAAK,QAAQ,EAAG;MAE/BA,IAAI,GAAGA,IAAI,CAACsB,KAAK;IAElB;;IAEA;IACA,IAAK,CAAEvH,WAAW,CAAC6D,GAAG,CAAEK,EAAG,CAAC,EAAG,OAAO,IAAI;IAE1C,MAAM2E,UAAU,GAAG,IAAI,CAACC,eAAe,CAAEH,YAAY,EAAEjC,UAAU,EAAExC,EAAG,CAAC;IAEvE,IAAIuE,QAAQ;IAEZ,QAASxC,IAAI,CAACD,WAAW,CAAC,CAAC;MAE1B,KAAK,OAAO;QACXyC,QAAQ,GAAG,IAAIlK,iBAAiB,CAAC,CAAC;QAClC;MACD,KAAK,SAAS;QACbkK,QAAQ,GAAG,IAAInK,mBAAmB,CAAC,CAAC;QACpC;MACD;QACCiD,OAAO,CAAC4E,IAAI,CAAE,+EAA+E,EAAEF,IAAK,CAAC;QACrGwC,QAAQ,GAAG,IAAIlK,iBAAiB,CAAC,CAAC;QAClC;IAEF;IAEAkK,QAAQ,CAACM,SAAS,CAAEF,UAAW,CAAC;IAChCJ,QAAQ,CAACzB,IAAI,GAAGA,IAAI;IAEpB,OAAOyB,QAAQ;EAEhB;;EAEA;EACA;EACAK,eAAeA,CAAEH,YAAY,EAAEjC,UAAU,EAAExC,EAAE,EAAG;IAE/C,MAAM2E,UAAU,GAAG,CAAC,CAAC;IAErB,IAAKF,YAAY,CAACK,UAAU,EAAG;MAE9BH,UAAU,CAACI,SAAS,GAAGN,YAAY,CAACK,UAAU,CAACzB,KAAK;IAErD;IAEA,IAAKoB,YAAY,CAACO,OAAO,EAAG;MAE3BL,UAAU,CAACM,KAAK,GAAG,IAAI5L,KAAK,CAAC,CAAC,CAAC6L,SAAS,CAAET,YAAY,CAACO,OAAO,CAAC3B,KAAM,CAAC,CAAC8B,mBAAmB,CAAC,CAAC;IAE7F,CAAC,MAAM,IAAKV,YAAY,CAACW,YAAY,KAAMX,YAAY,CAACW,YAAY,CAACrD,IAAI,KAAK,OAAO,IAAI0C,YAAY,CAACW,YAAY,CAACrD,IAAI,KAAK,UAAU,CAAE,EAAG;MAE1I;MACA4C,UAAU,CAACM,KAAK,GAAG,IAAI5L,KAAK,CAAC,CAAC,CAAC6L,SAAS,CAAET,YAAY,CAACW,YAAY,CAAC/B,KAAM,CAAC,CAAC8B,mBAAmB,CAAC,CAAC;IAElG;IAEA,IAAKV,YAAY,CAACY,kBAAkB,EAAG;MAEtCV,UAAU,CAACW,iBAAiB,GAAGb,YAAY,CAACY,kBAAkB,CAAChC,KAAK;IAErE;IAEA,IAAKoB,YAAY,CAACc,QAAQ,EAAG;MAE5BZ,UAAU,CAACa,QAAQ,GAAG,IAAInM,KAAK,CAAC,CAAC,CAAC6L,SAAS,CAAET,YAAY,CAACc,QAAQ,CAAClC,KAAM,CAAC,CAAC8B,mBAAmB,CAAC,CAAC;IAEjG,CAAC,MAAM,IAAKV,YAAY,CAACgB,aAAa,KAAMhB,YAAY,CAACgB,aAAa,CAAC1D,IAAI,KAAK,OAAO,IAAI0C,YAAY,CAACgB,aAAa,CAAC1D,IAAI,KAAK,UAAU,CAAE,EAAG;MAE7I;MACA4C,UAAU,CAACa,QAAQ,GAAG,IAAInM,KAAK,CAAC,CAAC,CAAC6L,SAAS,CAAET,YAAY,CAACgB,aAAa,CAACpC,KAAM,CAAC,CAAC8B,mBAAmB,CAAC,CAAC;IAEtG;IAEA,IAAKV,YAAY,CAACiB,cAAc,EAAG;MAElCf,UAAU,CAACgB,iBAAiB,GAAGC,UAAU,CAAEnB,YAAY,CAACiB,cAAc,CAACrC,KAAM,CAAC;IAE/E;IAEA,IAAKoB,YAAY,CAACoB,OAAO,EAAG;MAE3BlB,UAAU,CAACmB,OAAO,GAAGF,UAAU,CAAEnB,YAAY,CAACoB,OAAO,CAACxC,KAAM,CAAC;IAE9D;IAEA,IAAKsB,UAAU,CAACmB,OAAO,GAAG,GAAG,EAAG;MAE/BnB,UAAU,CAACoB,WAAW,GAAG,IAAI;IAE9B;IAEA,IAAKtB,YAAY,CAACuB,gBAAgB,EAAG;MAEpCrB,UAAU,CAACsB,YAAY,GAAGxB,YAAY,CAACuB,gBAAgB,CAAC3C,KAAK;IAE9D;IAEA,IAAKoB,YAAY,CAACyB,SAAS,EAAG;MAE7BvB,UAAU,CAACwB,SAAS,GAAG1B,YAAY,CAACyB,SAAS,CAAC7C,KAAK;IAEpD;IAEA,IAAKoB,YAAY,CAAC2B,QAAQ,EAAG;MAE5BzB,UAAU,CAAC0B,QAAQ,GAAG,IAAIhN,KAAK,CAAC,CAAC,CAAC6L,SAAS,CAAET,YAAY,CAAC2B,QAAQ,CAAC/C,KAAM,CAAC,CAAC8B,mBAAmB,CAAC,CAAC;IAEjG,CAAC,MAAM,IAAKV,YAAY,CAAC6B,aAAa,IAAI7B,YAAY,CAAC6B,aAAa,CAACvE,IAAI,KAAK,OAAO,EAAG;MAEvF;MACA4C,UAAU,CAAC0B,QAAQ,GAAG,IAAIhN,KAAK,CAAC,CAAC,CAAC6L,SAAS,CAAET,YAAY,CAAC6B,aAAa,CAACjD,KAAM,CAAC,CAAC8B,mBAAmB,CAAC,CAAC;IAEtG;IAEA,MAAM3I,KAAK,GAAG,IAAI;IAClBV,WAAW,CAACmE,GAAG,CAAED,EAAG,CAAC,CAACF,QAAQ,CAACR,OAAO,CAAE,UAAWiH,KAAK,EAAG;MAE1D,MAAMxE,IAAI,GAAGwE,KAAK,CAAC7G,YAAY;MAE/B,QAASqC,IAAI;QAEZ,KAAK,MAAM;UACV4C,UAAU,CAAC6B,OAAO,GAAGhK,KAAK,CAACiK,UAAU,CAAEjE,UAAU,EAAE+D,KAAK,CAACvG,EAAG,CAAC;UAC7D;QAED,KAAK,iBAAiB;UACrB2E,UAAU,CAAC+B,KAAK,GAAGlK,KAAK,CAACiK,UAAU,CAAEjE,UAAU,EAAE+D,KAAK,CAACvG,EAAG,CAAC;UAC3D;QAED,KAAK,cAAc;QACnB,KAAK,oBAAoB;UACxB2E,UAAU,CAACgC,GAAG,GAAGnK,KAAK,CAACiK,UAAU,CAAEjE,UAAU,EAAE+D,KAAK,CAACvG,EAAG,CAAC;UACzD,IAAK2E,UAAU,CAACgC,GAAG,KAAKrF,SAAS,EAAG;YAEnCqD,UAAU,CAACgC,GAAG,CAACC,UAAU,GAAGnL,cAAc;UAE3C;UAEA;QAED,KAAK,mBAAmB;UACvBkJ,UAAU,CAACkC,eAAe,GAAGrK,KAAK,CAACiK,UAAU,CAAEjE,UAAU,EAAE+D,KAAK,CAACvG,EAAG,CAAC;UACrE;QAED,KAAK,eAAe;UACnB2E,UAAU,CAACmC,WAAW,GAAGtK,KAAK,CAACiK,UAAU,CAAEjE,UAAU,EAAE+D,KAAK,CAACvG,EAAG,CAAC;UACjE,IAAK2E,UAAU,CAACmC,WAAW,KAAKxF,SAAS,EAAG;YAE3CqD,UAAU,CAACmC,WAAW,CAACF,UAAU,GAAGnL,cAAc;UAEnD;UAEA;QAED,KAAK,WAAW;QAChB,KAAK,qBAAqB;UACzBkJ,UAAU,CAACoC,SAAS,GAAGvK,KAAK,CAACiK,UAAU,CAAEjE,UAAU,EAAE+D,KAAK,CAACvG,EAAG,CAAC;UAC/D;QAED,KAAK,iBAAiB;UACrB2E,UAAU,CAACqC,MAAM,GAAGxK,KAAK,CAACiK,UAAU,CAAEjE,UAAU,EAAE+D,KAAK,CAACvG,EAAG,CAAC;UAC5D,IAAK2E,UAAU,CAACqC,MAAM,KAAK1F,SAAS,EAAG;YAEtCqD,UAAU,CAACqC,MAAM,CAACC,OAAO,GAAG1N,gCAAgC;YAC5DoL,UAAU,CAACqC,MAAM,CAACJ,UAAU,GAAGnL,cAAc;UAE9C;UAEA;QAED,KAAK,eAAe;UACnBkJ,UAAU,CAACuC,WAAW,GAAG1K,KAAK,CAACiK,UAAU,CAAEjE,UAAU,EAAE+D,KAAK,CAACvG,EAAG,CAAC;UACjE,IAAK2E,UAAU,CAACuC,WAAW,KAAK5F,SAAS,EAAG;YAE3CqD,UAAU,CAACuC,WAAW,CAACN,UAAU,GAAGnL,cAAc;UAEnD;UAEA;QAED,KAAK,kBAAkB;QACvB,KAAK,oBAAoB;UACxBkJ,UAAU,CAACwC,QAAQ,GAAG3K,KAAK,CAACiK,UAAU,CAAEjE,UAAU,EAAE+D,KAAK,CAACvG,EAAG,CAAC;UAC9D2E,UAAU,CAACoB,WAAW,GAAG,IAAI;UAC7B;QAED,KAAK,cAAc;QACnB,KAAK,mBAAmB,CAAC,CAAC;QAC1B,KAAK,gBAAgB,CAAC,CAAC;QACvB,KAAK,yBAAyB,CAAC,CAAC;QAChC;UACC1I,OAAO,CAAC4E,IAAI,CAAE,yEAAyE,EAAEF,IAAK,CAAC;UAC/F;MAEF;IAED,CAAE,CAAC;IAEH,OAAO4C,UAAU;EAElB;;EAEA;EACA8B,UAAUA,CAAEjE,UAAU,EAAE9B,EAAE,EAAG;IAE5B;IACA,IAAK,gBAAgB,IAAI7E,OAAO,CAACwE,OAAO,IAAIK,EAAE,IAAI7E,OAAO,CAACwE,OAAO,CAAC+G,cAAc,EAAG;MAElF/J,OAAO,CAAC4E,IAAI,CAAE,kGAAmG,CAAC;MAClHvB,EAAE,GAAG5E,WAAW,CAACmE,GAAG,CAAES,EAAG,CAAC,CAACZ,QAAQ,CAAE,CAAC,CAAE,CAACE,EAAE;IAE5C;IAEA,OAAOwC,UAAU,CAACvC,GAAG,CAAES,EAAG,CAAC;EAE5B;;EAEA;EACA;EACA;EACA5B,cAAcA,CAAA,EAAG;IAEhB,MAAMuI,SAAS,GAAG,CAAC,CAAC;IACpB,MAAMC,YAAY,GAAG,CAAC,CAAC;IAEvB,IAAK,UAAU,IAAIzL,OAAO,CAACwE,OAAO,EAAG;MAEpC,MAAMkH,aAAa,GAAG1L,OAAO,CAACwE,OAAO,CAACmH,QAAQ;MAE9C,KAAM,MAAMhH,MAAM,IAAI+G,aAAa,EAAG;QAErC,MAAME,YAAY,GAAGF,aAAa,CAAE/G,MAAM,CAAE;QAE5C,MAAMkH,aAAa,GAAG5L,WAAW,CAACmE,GAAG,CAAEU,QAAQ,CAAEH,MAAO,CAAE,CAAC;QAE3D,IAAKiH,YAAY,CAACE,QAAQ,KAAK,MAAM,EAAG;UAEvC,MAAMC,QAAQ,GAAG,IAAI,CAACC,aAAa,CAAEH,aAAa,EAAEH,aAAc,CAAC;UACnEK,QAAQ,CAAC5H,EAAE,GAAGQ,MAAM;UAEpB,IAAKkH,aAAa,CAAC7H,OAAO,CAACoE,MAAM,GAAG,CAAC,EAAG5G,OAAO,CAAC4E,IAAI,CAAE,gFAAiF,CAAC;UACxI2F,QAAQ,CAACE,UAAU,GAAGJ,aAAa,CAAC7H,OAAO,CAAE,CAAC,CAAE,CAACG,EAAE;UAEnDqH,SAAS,CAAE7G,MAAM,CAAE,GAAGoH,QAAQ;QAE/B,CAAC,MAAM,IAAKH,YAAY,CAACE,QAAQ,KAAK,YAAY,EAAG;UAEpD,MAAMI,WAAW,GAAG;YACnBrH,EAAE,EAAEF;UACL,CAAC;UAEDuH,WAAW,CAACC,UAAU,GAAG,IAAI,CAACC,iBAAiB,CAAEP,aAAa,EAAEH,aAAc,CAAC;UAC/EQ,WAAW,CAACrH,EAAE,GAAGF,MAAM;UAEvB,IAAKkH,aAAa,CAAC7H,OAAO,CAACoE,MAAM,GAAG,CAAC,EAAG5G,OAAO,CAAC4E,IAAI,CAAE,oFAAqF,CAAC;UAE5IqF,YAAY,CAAE9G,MAAM,CAAE,GAAGuH,WAAW;QAErC;MAED;IAED;IAEA,OAAO;MAENV,SAAS,EAAEA,SAAS;MACpBC,YAAY,EAAEA;IAEf,CAAC;EAEF;;EAEA;EACA;EACA;EACAO,aAAaA,CAAEH,aAAa,EAAEQ,aAAa,EAAG;IAE7C,MAAMC,QAAQ,GAAG,EAAE;IAEnBT,aAAa,CAAC5H,QAAQ,CAACR,OAAO,CAAE,UAAWiH,KAAK,EAAG;MAElD,MAAM6B,QAAQ,GAAGF,aAAa,CAAE3B,KAAK,CAACvG,EAAE,CAAE;MAE1C,IAAKoI,QAAQ,CAACT,QAAQ,KAAK,SAAS,EAAG;MAEvC,MAAMU,OAAO,GAAG;QAEfrI,EAAE,EAAEuG,KAAK,CAACvG,EAAE;QACZsI,OAAO,EAAE,EAAE;QACXC,OAAO,EAAE,EAAE;QACXC,aAAa,EAAE,IAAItO,OAAO,CAAC,CAAC,CAACgL,SAAS,CAAEkD,QAAQ,CAACK,aAAa,CAACC,CAAE;QACjE;QACA;MAED,CAAC;MAED,IAAK,SAAS,IAAIN,QAAQ,EAAG;QAE5BC,OAAO,CAACC,OAAO,GAAGF,QAAQ,CAACO,OAAO,CAACD,CAAC;QACpCL,OAAO,CAACE,OAAO,GAAGH,QAAQ,CAACQ,OAAO,CAACF,CAAC;MAErC;MAEAP,QAAQ,CAACjI,IAAI,CAAEmI,OAAQ,CAAC;IAEzB,CAAE,CAAC;IAEH,OAAO;MAENF,QAAQ,EAAEA,QAAQ;MAClBU,KAAK,EAAE;IAER,CAAC;EAEF;;EAEA;EACAZ,iBAAiBA,CAAEP,aAAa,EAAEQ,aAAa,EAAG;IAEjD,MAAMY,eAAe,GAAG,EAAE;IAE1B,KAAM,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGrB,aAAa,CAAC5H,QAAQ,CAACmE,MAAM,EAAE8E,CAAC,EAAG,EAAG;MAE1D,MAAMxC,KAAK,GAAGmB,aAAa,CAAC5H,QAAQ,CAAEiJ,CAAC,CAAE;MAEzC,MAAMC,eAAe,GAAGd,aAAa,CAAE3B,KAAK,CAACvG,EAAE,CAAE;MAEjD,MAAMiJ,cAAc,GAAG;QAEtBnG,IAAI,EAAEkG,eAAe,CAACjG,QAAQ;QAC9BmG,aAAa,EAAEF,eAAe,CAACG,aAAa;QAC5CzI,EAAE,EAAEsI,eAAe,CAACtI,EAAE;QACtB0I,WAAW,EAAEJ,eAAe,CAACK,WAAW,CAACX;MAE1C,CAAC;MAED,IAAKM,eAAe,CAACrB,QAAQ,KAAK,mBAAmB,EAAG;MAExDsB,cAAc,CAACK,KAAK,GAAGxN,WAAW,CAACmE,GAAG,CAAEU,QAAQ,CAAE4F,KAAK,CAACvG,EAAG,CAAE,CAAC,CAACF,QAAQ,CAACyJ,MAAM,CAAE,UAAWhD,KAAK,EAAG;QAElG,OAAOA,KAAK,CAAC7G,YAAY,KAAK4B,SAAS;MAExC,CAAE,CAAC,CAAE,CAAC,CAAE,CAACtB,EAAE;MAEX8I,eAAe,CAAC5I,IAAI,CAAE+I,cAAe,CAAC;IAEvC;IAEA,OAAOH,eAAe;EAEvB;;EAEA;EACA7J,UAAUA,CAAEJ,SAAS,EAAEE,WAAW,EAAEqF,WAAW,EAAG;IAEjDrI,UAAU,GAAG,IAAIpC,KAAK,CAAC,CAAC;IAExB,MAAM6P,QAAQ,GAAG,IAAI,CAACC,WAAW,CAAE5K,SAAS,CAACwI,SAAS,EAAEtI,WAAW,EAAEqF,WAAY,CAAC;IAElF,MAAMsF,UAAU,GAAG7N,OAAO,CAACwE,OAAO,CAACsJ,KAAK;IAExC,MAAMnN,KAAK,GAAG,IAAI;IAClBgN,QAAQ,CAAClK,OAAO,CAAE,UAAWsK,KAAK,EAAG;MAEpC,MAAMC,SAAS,GAAGH,UAAU,CAAEE,KAAK,CAAC5J,EAAE,CAAE;MACxCxD,KAAK,CAACsN,mBAAmB,CAAEF,KAAK,EAAEC,SAAU,CAAC;MAE7C,MAAME,iBAAiB,GAAGjO,WAAW,CAACmE,GAAG,CAAE2J,KAAK,CAAC5J,EAAG,CAAC,CAACH,OAAO;MAE7DkK,iBAAiB,CAACzK,OAAO,CAAE,UAAW0K,UAAU,EAAG;QAElD,MAAMC,MAAM,GAAGT,QAAQ,CAACvJ,GAAG,CAAE+J,UAAU,CAAChK,EAAG,CAAC;QAC5C,IAAKiK,MAAM,KAAK3I,SAAS,EAAG2I,MAAM,CAACC,GAAG,CAAEN,KAAM,CAAC;MAEhD,CAAE,CAAC;MAEH,IAAKA,KAAK,CAACK,MAAM,KAAK,IAAI,EAAG;QAE5BlO,UAAU,CAACmO,GAAG,CAAEN,KAAM,CAAC;MAExB;IAGD,CAAE,CAAC;IAEH,IAAI,CAACO,YAAY,CAAEtL,SAAS,CAACwI,SAAS,EAAEtI,WAAW,EAAEyK,QAAS,CAAC;IAE/D,IAAI,CAACY,sBAAsB,CAAC,CAAC;IAE7BrO,UAAU,CAACsO,QAAQ,CAAE,UAAWC,IAAI,EAAG;MAEtC,IAAKA,IAAI,CAACC,QAAQ,CAACC,aAAa,EAAG;QAElC,IAAKF,IAAI,CAACL,MAAM,EAAG;UAElBK,IAAI,CAACC,QAAQ,CAACC,aAAa,CAACC,YAAY,GAAGH,IAAI,CAACL,MAAM,CAACS,MAAM;UAC7DJ,IAAI,CAACC,QAAQ,CAACC,aAAa,CAACG,iBAAiB,GAAGL,IAAI,CAACL,MAAM,CAACW,WAAW;QAExE;QAEA,MAAMC,SAAS,GAAGC,iBAAiB,CAAER,IAAI,CAACC,QAAQ,CAACC,aAAc,CAAC;QAElEF,IAAI,CAACS,YAAY,CAAEF,SAAU,CAAC;QAC9BP,IAAI,CAACU,iBAAiB,CAAC,CAAC;MAEzB;IAED,CAAE,CAAC;IAEH,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC,CAAC/N,KAAK,CAAC,CAAC;;IAEhD;IACA,IAAKpB,UAAU,CAAC+D,QAAQ,CAACmE,MAAM,KAAK,CAAC,IAAIlI,UAAU,CAAC+D,QAAQ,CAAE,CAAC,CAAE,CAACqL,OAAO,EAAG;MAE3EpP,UAAU,CAAC+D,QAAQ,CAAE,CAAC,CAAE,CAACmL,UAAU,GAAGA,UAAU;MAChDlP,UAAU,GAAGA,UAAU,CAAC+D,QAAQ,CAAE,CAAC,CAAE;IAEtC;IAEA/D,UAAU,CAACkP,UAAU,GAAGA,UAAU;EAEnC;;EAEA;EACAxB,WAAWA,CAAEpC,SAAS,EAAEtI,WAAW,EAAEqF,WAAW,EAAG;IAElD,MAAMoF,QAAQ,GAAG,IAAIrK,GAAG,CAAC,CAAC;IAC1B,MAAMuK,UAAU,GAAG7N,OAAO,CAACwE,OAAO,CAACsJ,KAAK;IAExC,KAAM,MAAMnJ,MAAM,IAAIkJ,UAAU,EAAG;MAElC,MAAMhJ,EAAE,GAAGC,QAAQ,CAAEH,MAAO,CAAC;MAC7B,MAAM8J,IAAI,GAAGZ,UAAU,CAAElJ,MAAM,CAAE;MACjC,MAAMkH,aAAa,GAAG5L,WAAW,CAACmE,GAAG,CAAES,EAAG,CAAC;MAE3C,IAAIkJ,KAAK,GAAG,IAAI,CAACwB,aAAa,CAAE1D,aAAa,EAAEL,SAAS,EAAE3G,EAAE,EAAE4J,IAAI,CAACvH,QAAS,CAAC;MAE7E,IAAK,CAAE6G,KAAK,EAAG;QAEd,QAASU,IAAI,CAAC3C,QAAQ;UAErB,KAAK,QAAQ;YACZiC,KAAK,GAAG,IAAI,CAACyB,YAAY,CAAE3D,aAAc,CAAC;YAC1C;UACD,KAAK,OAAO;YACXkC,KAAK,GAAG,IAAI,CAAC0B,WAAW,CAAE5D,aAAc,CAAC;YACzC;UACD,KAAK,MAAM;YACVkC,KAAK,GAAG,IAAI,CAAC2B,UAAU,CAAE7D,aAAa,EAAE3I,WAAW,EAAEqF,WAAY,CAAC;YAClE;UACD,KAAK,YAAY;YAChBwF,KAAK,GAAG,IAAI,CAAC4B,WAAW,CAAE9D,aAAa,EAAE3I,WAAY,CAAC;YACtD;UACD,KAAK,UAAU;UACf,KAAK,MAAM;YACV6K,KAAK,GAAG,IAAI1Q,IAAI,CAAC,CAAC;YAClB;UACD,KAAK,MAAM;UACX;YACC0Q,KAAK,GAAG,IAAIjQ,KAAK,CAAC,CAAC;YACnB;QAEF;QAEAiQ,KAAK,CAAC9G,IAAI,GAAGwH,IAAI,CAACvH,QAAQ,GAAGpI,eAAe,CAAC8Q,gBAAgB,CAAEnB,IAAI,CAACvH,QAAS,CAAC,GAAG,EAAE;QACnF6G,KAAK,CAACW,QAAQ,CAACmB,YAAY,GAAGpB,IAAI,CAACvH,QAAQ;QAE3C6G,KAAK,CAAC5J,EAAE,GAAGU,EAAE;MAEd;MAEA,IAAI,CAACiL,gBAAgB,CAAE/B,KAAK,EAAEU,IAAK,CAAC;MACpCd,QAAQ,CAAC5J,GAAG,CAAEc,EAAE,EAAEkJ,KAAM,CAAC;IAE1B;IAEA,OAAOJ,QAAQ;EAEhB;EAEA4B,aAAaA,CAAE1D,aAAa,EAAEL,SAAS,EAAE3G,EAAE,EAAEoC,IAAI,EAAG;IAEnD,IAAI8I,IAAI,GAAG,IAAI;IAEflE,aAAa,CAAC7H,OAAO,CAACP,OAAO,CAAE,UAAW2K,MAAM,EAAG;MAElD,KAAM,MAAMjK,EAAE,IAAIqH,SAAS,EAAG;QAE7B,MAAMO,QAAQ,GAAGP,SAAS,CAAErH,EAAE,CAAE;QAEhC4H,QAAQ,CAACO,QAAQ,CAAC7I,OAAO,CAAE,UAAW+I,OAAO,EAAEU,CAAC,EAAG;UAElD,IAAKV,OAAO,CAACrI,EAAE,KAAKiK,MAAM,CAACjK,EAAE,EAAG;YAE/B,MAAM6L,OAAO,GAAGD,IAAI;YACpBA,IAAI,GAAG,IAAI1S,IAAI,CAAC,CAAC;YAEjB0S,IAAI,CAAChB,WAAW,CAACkB,IAAI,CAAEzD,OAAO,CAACG,aAAc,CAAC;;YAE9C;;YAEAoD,IAAI,CAAC9I,IAAI,GAAGA,IAAI,GAAGnI,eAAe,CAAC8Q,gBAAgB,CAAE3I,IAAK,CAAC,GAAG,EAAE;YAChE8I,IAAI,CAACrB,QAAQ,CAACmB,YAAY,GAAG5I,IAAI;YACjC8I,IAAI,CAAC5L,EAAE,GAAGU,EAAE;YAEZkH,QAAQ,CAACiB,KAAK,CAAEE,CAAC,CAAE,GAAG6C,IAAI;;YAE1B;YACA;YACA,IAAKC,OAAO,KAAK,IAAI,EAAG;cAEvBD,IAAI,CAAC1B,GAAG,CAAE2B,OAAQ,CAAC;YAEpB;UAED;QAED,CAAE,CAAC;MAEJ;IAED,CAAE,CAAC;IAEH,OAAOD,IAAI;EAEZ;;EAEA;EACAP,YAAYA,CAAE3D,aAAa,EAAG;IAE7B,IAAIkC,KAAK;IACT,IAAImC,eAAe;IAEnBrE,aAAa,CAAC5H,QAAQ,CAACR,OAAO,CAAE,UAAWiH,KAAK,EAAG;MAElD,MAAMyF,IAAI,GAAGnQ,OAAO,CAACwE,OAAO,CAAC4L,aAAa,CAAE1F,KAAK,CAACvG,EAAE,CAAE;MAEtD,IAAKgM,IAAI,KAAK1K,SAAS,EAAG;QAEzByK,eAAe,GAAGC,IAAI;MAEvB;IAED,CAAE,CAAC;IAEH,IAAKD,eAAe,KAAKzK,SAAS,EAAG;MAEpCsI,KAAK,GAAG,IAAIrP,QAAQ,CAAC,CAAC;IAEvB,CAAC,MAAM;MAEN,IAAIwH,IAAI,GAAG,CAAC;MACZ,IAAKgK,eAAe,CAACG,oBAAoB,KAAK5K,SAAS,IAAIyK,eAAe,CAACG,oBAAoB,CAAC7I,KAAK,KAAK,CAAC,EAAG;QAE7GtB,IAAI,GAAG,CAAC;MAET;MAEA,IAAIoK,iBAAiB,GAAG,CAAC;MACzB,IAAKJ,eAAe,CAACK,SAAS,KAAK9K,SAAS,EAAG;QAE9C6K,iBAAiB,GAAGJ,eAAe,CAACK,SAAS,CAAC/I,KAAK,GAAG,IAAI;MAE3D;MAEA,IAAIgJ,gBAAgB,GAAG,IAAI;MAC3B,IAAKN,eAAe,CAACO,QAAQ,KAAKhL,SAAS,EAAG;QAE7C+K,gBAAgB,GAAGN,eAAe,CAACO,QAAQ,CAACjJ,KAAK,GAAG,IAAI;MAEzD;MAGA,IAAIkJ,KAAK,GAAGnK,MAAM,CAACoK,UAAU;MAC7B,IAAIC,MAAM,GAAGrK,MAAM,CAACsK,WAAW;MAE/B,IAAKX,eAAe,CAACY,WAAW,KAAKrL,SAAS,IAAIyK,eAAe,CAACa,YAAY,KAAKtL,SAAS,EAAG;QAE9FiL,KAAK,GAAGR,eAAe,CAACY,WAAW,CAACtJ,KAAK;QACzCoJ,MAAM,GAAGV,eAAe,CAACa,YAAY,CAACvJ,KAAK;MAE5C;MAEA,MAAMwJ,MAAM,GAAGN,KAAK,GAAGE,MAAM;MAE7B,IAAIK,GAAG,GAAG,EAAE;MACZ,IAAKf,eAAe,CAACgB,WAAW,KAAKzL,SAAS,EAAG;QAEhDwL,GAAG,GAAGf,eAAe,CAACgB,WAAW,CAAC1J,KAAK;MAExC;MAEA,MAAM2J,WAAW,GAAGjB,eAAe,CAACkB,WAAW,GAAGlB,eAAe,CAACkB,WAAW,CAAC5J,KAAK,GAAG,IAAI;MAE1F,QAAStB,IAAI;QAEZ,KAAK,CAAC;UAAE;UACP6H,KAAK,GAAG,IAAInP,iBAAiB,CAAEqS,GAAG,EAAED,MAAM,EAAEV,iBAAiB,EAAEE,gBAAiB,CAAC;UACjF,IAAKW,WAAW,KAAK,IAAI,EAAGpD,KAAK,CAACsD,cAAc,CAAEF,WAAY,CAAC;UAC/D;QAED,KAAK,CAAC;UAAE;UACPpD,KAAK,GAAG,IAAIpP,kBAAkB,CAAE,CAAE+R,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,CAAC,EAAEE,MAAM,GAAG,CAAC,EAAE,CAAEA,MAAM,GAAG,CAAC,EAAEN,iBAAiB,EAAEE,gBAAiB,CAAC;UACvH;QAED;UACChP,OAAO,CAAC4E,IAAI,CAAE,uCAAuC,GAAGF,IAAI,GAAG,GAAI,CAAC;UACpE6H,KAAK,GAAG,IAAIrP,QAAQ,CAAC,CAAC;UACtB;MAEF;IAED;IAEA,OAAOqP,KAAK;EAEb;;EAEA;EACA0B,WAAWA,CAAE5D,aAAa,EAAG;IAE5B,IAAIkC,KAAK;IACT,IAAIuD,cAAc;IAElBzF,aAAa,CAAC5H,QAAQ,CAACR,OAAO,CAAE,UAAWiH,KAAK,EAAG;MAElD,MAAMyF,IAAI,GAAGnQ,OAAO,CAACwE,OAAO,CAAC4L,aAAa,CAAE1F,KAAK,CAACvG,EAAE,CAAE;MAEtD,IAAKgM,IAAI,KAAK1K,SAAS,EAAG;QAEzB6L,cAAc,GAAGnB,IAAI;MAEtB;IAED,CAAE,CAAC;IAEH,IAAKmB,cAAc,KAAK7L,SAAS,EAAG;MAEnCsI,KAAK,GAAG,IAAIrP,QAAQ,CAAC,CAAC;IAEvB,CAAC,MAAM;MAEN,IAAIwH,IAAI;;MAER;MACA,IAAKoL,cAAc,CAACC,SAAS,KAAK9L,SAAS,EAAG;QAE7CS,IAAI,GAAG,CAAC;MAET,CAAC,MAAM;QAENA,IAAI,GAAGoL,cAAc,CAACC,SAAS,CAAC/J,KAAK;MAEtC;MAEA,IAAI4B,KAAK,GAAG,QAAQ;MAEpB,IAAKkI,cAAc,CAAC9T,KAAK,KAAKiI,SAAS,EAAG;QAEzC2D,KAAK,GAAG,IAAI5L,KAAK,CAAC,CAAC,CAAC6L,SAAS,CAAEiI,cAAc,CAAC9T,KAAK,CAACgK,KAAM,CAAC,CAAC8B,mBAAmB,CAAC,CAAC;MAElF;MAEA,IAAIkI,SAAS,GAAKF,cAAc,CAACG,SAAS,KAAKhM,SAAS,GAAK,CAAC,GAAG6L,cAAc,CAACG,SAAS,CAACjK,KAAK,GAAG,GAAG;;MAErG;MACA,IAAK8J,cAAc,CAACI,iBAAiB,KAAKjM,SAAS,IAAI6L,cAAc,CAACI,iBAAiB,CAAClK,KAAK,KAAK,CAAC,EAAG;QAErGgK,SAAS,GAAG,CAAC;MAEd;MAEA,IAAIG,QAAQ,GAAG,CAAC;MAChB,IAAKL,cAAc,CAACM,iBAAiB,KAAKnM,SAAS,EAAG;QAErD,IAAK6L,cAAc,CAACO,oBAAoB,KAAKpM,SAAS,IAAI6L,cAAc,CAACO,oBAAoB,CAACrK,KAAK,KAAK,CAAC,EAAG;UAE3GmK,QAAQ,GAAG,CAAC;QAEb,CAAC,MAAM;UAENA,QAAQ,GAAGL,cAAc,CAACM,iBAAiB,CAACpK,KAAK;QAElD;MAED;;MAEA;MACA,MAAMsK,KAAK,GAAG,CAAC;MAEf,QAAS5L,IAAI;QAEZ,KAAK,CAAC;UAAE;UACP6H,KAAK,GAAG,IAAIlP,UAAU,CAAEuK,KAAK,EAAEoI,SAAS,EAAEG,QAAQ,EAAEG,KAAM,CAAC;UAC3D;QAED,KAAK,CAAC;UAAE;UACP/D,KAAK,GAAG,IAAItQ,gBAAgB,CAAE2L,KAAK,EAAEoI,SAAU,CAAC;UAChD;QAED,KAAK,CAAC;UAAE;UACP,IAAIO,KAAK,GAAGC,IAAI,CAACC,EAAE,GAAG,CAAC;UAEvB,IAAKX,cAAc,CAACY,UAAU,KAAKzM,SAAS,EAAG;YAE9CsM,KAAK,GAAG5T,SAAS,CAACgU,QAAQ,CAAEb,cAAc,CAACY,UAAU,CAAC1K,KAAM,CAAC;UAE9D;UAEA,IAAI4K,QAAQ,GAAG,CAAC;UAChB,IAAKd,cAAc,CAACe,UAAU,KAAK5M,SAAS,EAAG;YAE9C;YACA;YACA;YACA2M,QAAQ,GAAGjU,SAAS,CAACgU,QAAQ,CAAEb,cAAc,CAACe,UAAU,CAAC7K,KAAM,CAAC;YAChE4K,QAAQ,GAAGJ,IAAI,CAACM,GAAG,CAAEF,QAAQ,EAAE,CAAE,CAAC;UAEnC;UAEArE,KAAK,GAAG,IAAI3O,SAAS,CAAEgK,KAAK,EAAEoI,SAAS,EAAEG,QAAQ,EAAEI,KAAK,EAAEK,QAAQ,EAAEN,KAAM,CAAC;UAC3E;QAED;UACCtQ,OAAO,CAAC4E,IAAI,CAAE,sCAAsC,GAAGkL,cAAc,CAACC,SAAS,CAAC/J,KAAK,GAAG,+BAAgC,CAAC;UACzHuG,KAAK,GAAG,IAAIlP,UAAU,CAAEuK,KAAK,EAAEoI,SAAU,CAAC;UAC1C;MAEF;MAEA,IAAKF,cAAc,CAACiB,WAAW,KAAK9M,SAAS,IAAI6L,cAAc,CAACiB,WAAW,CAAC/K,KAAK,KAAK,CAAC,EAAG;QAEzFuG,KAAK,CAACyE,UAAU,GAAG,IAAI;MAExB;IAED;IAEA,OAAOzE,KAAK;EAEb;EAEA2B,UAAUA,CAAE7D,aAAa,EAAE3I,WAAW,EAAEqF,WAAW,EAAG;IAErD,IAAIwF,KAAK;IACT,IAAI0E,QAAQ,GAAG,IAAI;IACnB,IAAI/J,QAAQ,GAAG,IAAI;IACnB,MAAM5F,SAAS,GAAG,EAAE;;IAEpB;IACA+I,aAAa,CAAC5H,QAAQ,CAACR,OAAO,CAAE,UAAWiH,KAAK,EAAG;MAElD,IAAKxH,WAAW,CAACY,GAAG,CAAE4G,KAAK,CAACvG,EAAG,CAAC,EAAG;QAElCsO,QAAQ,GAAGvP,WAAW,CAACkB,GAAG,CAAEsG,KAAK,CAACvG,EAAG,CAAC;MAEvC;MAEA,IAAKoE,WAAW,CAACzE,GAAG,CAAE4G,KAAK,CAACvG,EAAG,CAAC,EAAG;QAElCrB,SAAS,CAACuB,IAAI,CAAEkE,WAAW,CAACnE,GAAG,CAAEsG,KAAK,CAACvG,EAAG,CAAE,CAAC;MAE9C;IAED,CAAE,CAAC;IAEH,IAAKrB,SAAS,CAACsF,MAAM,GAAG,CAAC,EAAG;MAE3BM,QAAQ,GAAG5F,SAAS;IAErB,CAAC,MAAM,IAAKA,SAAS,CAACsF,MAAM,GAAG,CAAC,EAAG;MAElCM,QAAQ,GAAG5F,SAAS,CAAE,CAAC,CAAE;IAE1B,CAAC,MAAM;MAEN4F,QAAQ,GAAG,IAAIlK,iBAAiB,CAAE;QACjCyI,IAAI,EAAEhJ,MAAM,CAACyU,qBAAqB;QAClCtJ,KAAK,EAAE;MACR,CAAE,CAAC;MACHtG,SAAS,CAACuB,IAAI,CAAEqE,QAAS,CAAC;IAE3B;IAEA,IAAK,OAAO,IAAI+J,QAAQ,CAACE,UAAU,EAAG;MAErC7P,SAAS,CAACW,OAAO,CAAE,UAAWiF,QAAQ,EAAG;QAExCA,QAAQ,CAACkK,YAAY,GAAG,IAAI;MAE7B,CAAE,CAAC;IAEJ;IAEA,IAAKH,QAAQ,CAACI,YAAY,EAAG;MAE5B9E,KAAK,GAAG,IAAI5O,WAAW,CAAEsT,QAAQ,EAAE/J,QAAS,CAAC;MAC7CqF,KAAK,CAAC+E,oBAAoB,CAAC,CAAC;IAE7B,CAAC,MAAM;MAEN/E,KAAK,GAAG,IAAIzP,IAAI,CAAEmU,QAAQ,EAAE/J,QAAS,CAAC;IAEvC;IAEA,OAAOqF,KAAK;EAEb;EAEA4B,WAAWA,CAAE9D,aAAa,EAAE3I,WAAW,EAAG;IAEzC,MAAMuP,QAAQ,GAAG5G,aAAa,CAAC5H,QAAQ,CAAC8O,MAAM,CAAE,UAAWC,GAAG,EAAEtI,KAAK,EAAG;MAEvE,IAAKxH,WAAW,CAACY,GAAG,CAAE4G,KAAK,CAACvG,EAAG,CAAC,EAAG6O,GAAG,GAAG9P,WAAW,CAACkB,GAAG,CAAEsG,KAAK,CAACvG,EAAG,CAAC;MAEpE,OAAO6O,GAAG;IAEX,CAAC,EAAE,IAAK,CAAC;;IAET;IACA,MAAMtK,QAAQ,GAAG,IAAI1K,iBAAiB,CAAE;MACvCiJ,IAAI,EAAEhJ,MAAM,CAACyU,qBAAqB;MAClCtJ,KAAK,EAAE,QAAQ;MACf6J,SAAS,EAAE;IACZ,CAAE,CAAC;IACH,OAAO,IAAIlV,IAAI,CAAE0U,QAAQ,EAAE/J,QAAS,CAAC;EAEtC;;EAEA;EACAoH,gBAAgBA,CAAE/B,KAAK,EAAEC,SAAS,EAAG;IAEpC,MAAMW,aAAa,GAAG,CAAC,CAAC;IAExB,IAAK,aAAa,IAAIX,SAAS,EAAGW,aAAa,CAACuE,WAAW,GAAGpO,QAAQ,CAAEkJ,SAAS,CAACmF,WAAW,CAAC3L,KAAM,CAAC;IAErG,IAAK,eAAe,IAAIwG,SAAS,EAAGW,aAAa,CAACyE,UAAU,GAAGC,aAAa,CAAErF,SAAS,CAACsF,aAAa,CAAC9L,KAAM,CAAC,CAAC,KACzGmH,aAAa,CAACyE,UAAU,GAAG,KAAK;IAErC,IAAK,iBAAiB,IAAIpF,SAAS,EAAGW,aAAa,CAAC4E,WAAW,GAAGvF,SAAS,CAACwF,eAAe,CAAChM,KAAK;IAEjG,IAAK,aAAa,IAAIwG,SAAS,EAAGW,aAAa,CAAC8E,WAAW,GAAGzF,SAAS,CAAC0F,WAAW,CAAClM,KAAK;IACzF,IAAK,cAAc,IAAIwG,SAAS,EAAGW,aAAa,CAACgF,QAAQ,GAAG3F,SAAS,CAAC4F,YAAY,CAACpM,KAAK;IACxF,IAAK,cAAc,IAAIwG,SAAS,EAAGW,aAAa,CAACkF,YAAY,GAAG7F,SAAS,CAAC8F,YAAY,CAACtM,KAAK;IAE5F,IAAK,aAAa,IAAIwG,SAAS,EAAGW,aAAa,CAACoF,KAAK,GAAG/F,SAAS,CAACgG,WAAW,CAACxM,KAAK;IAEnF,IAAK,eAAe,IAAIwG,SAAS,EAAGW,aAAa,CAACsF,aAAa,GAAGjG,SAAS,CAACkG,aAAa,CAAC1M,KAAK;IAC/F,IAAK,cAAc,IAAIwG,SAAS,EAAGW,aAAa,CAACwF,YAAY,GAAGnG,SAAS,CAACoG,YAAY,CAAC5M,KAAK;IAE5F,IAAK,gBAAgB,IAAIwG,SAAS,EAAGW,aAAa,CAAC0F,cAAc,GAAGrG,SAAS,CAACsG,cAAc,CAAC9M,KAAK;IAClG,IAAK,eAAe,IAAIwG,SAAS,EAAGW,aAAa,CAAC4F,aAAa,GAAGvG,SAAS,CAACwG,aAAa,CAAChN,KAAK;IAE/FuG,KAAK,CAACW,QAAQ,CAACC,aAAa,GAAGA,aAAa;EAE7C;EAEAV,mBAAmBA,CAAEF,KAAK,EAAEC,SAAS,EAAG;IAEvC,IAAK,gBAAgB,IAAIA,SAAS,EAAG;MAEpC,MAAM/J,QAAQ,GAAGhE,WAAW,CAACmE,GAAG,CAAE2J,KAAK,CAAC5J,EAAG,CAAC,CAACF,QAAQ;MAErDA,QAAQ,CAACR,OAAO,CAAE,UAAWiH,KAAK,EAAG;QAEpC,IAAKA,KAAK,CAAC7G,YAAY,KAAK,gBAAgB,EAAG;UAE9C,MAAM4Q,YAAY,GAAGzU,OAAO,CAACwE,OAAO,CAACsJ,KAAK,CAAEpD,KAAK,CAACvG,EAAE,CAAE;UAEtD,IAAK,iBAAiB,IAAIsQ,YAAY,EAAG;YAExC,MAAMC,GAAG,GAAGD,YAAY,CAACjB,eAAe,CAAChM,KAAK;;YAE9C;YACA,IAAKuG,KAAK,CAAC4G,MAAM,KAAKlP,SAAS,EAAG;cAEjCsI,KAAK,CAAC4G,MAAM,CAACC,QAAQ,CAACvL,SAAS,CAAEqL,GAAI,CAAC;cACtCxU,UAAU,CAACmO,GAAG,CAAEN,KAAK,CAAC4G,MAAO,CAAC;YAE/B,CAAC,MAAM;cAAE;;cAER5G,KAAK,CAAC8G,MAAM,CAAE,IAAIpV,OAAO,CAAC,CAAC,CAAC4J,SAAS,CAAEqL,GAAI,CAAE,CAAC;YAE/C;UAED;QAED;MAED,CAAE,CAAC;IAEJ;EAED;EAEApG,YAAYA,CAAE9C,SAAS,EAAEtI,WAAW,EAAEyK,QAAQ,EAAG;IAEhD,MAAMmH,YAAY,GAAG,IAAI,CAACC,cAAc,CAAC,CAAC;IAE1C,KAAM,MAAM5Q,EAAE,IAAIqH,SAAS,EAAG;MAE7B,MAAMO,QAAQ,GAAGP,SAAS,CAAErH,EAAE,CAAE;MAEhC,MAAMH,OAAO,GAAG/D,WAAW,CAACmE,GAAG,CAAEU,QAAQ,CAAEiH,QAAQ,CAAC5H,EAAG,CAAE,CAAC,CAACH,OAAO;MAElEA,OAAO,CAACP,OAAO,CAAE,UAAW2K,MAAM,EAAG;QAEpC,IAAKlL,WAAW,CAACY,GAAG,CAAEsK,MAAM,CAACjK,EAAG,CAAC,EAAG;UAEnC,MAAMsJ,KAAK,GAAGW,MAAM,CAACjK,EAAE;UACvB,MAAM6Q,gBAAgB,GAAG/U,WAAW,CAACmE,GAAG,CAAEqJ,KAAM,CAAC;UAEjDuH,gBAAgB,CAAChR,OAAO,CAACP,OAAO,CAAE,UAAWwR,aAAa,EAAG;YAE5D,IAAKtH,QAAQ,CAAC7J,GAAG,CAAEmR,aAAa,CAAC9Q,EAAG,CAAC,EAAG;cAEvC,MAAM4J,KAAK,GAAGJ,QAAQ,CAACvJ,GAAG,CAAE6Q,aAAa,CAAC9Q,EAAG,CAAC;cAE9C4J,KAAK,CAACmH,IAAI,CAAE,IAAIhW,QAAQ,CAAE6M,QAAQ,CAACiB,KAAM,CAAC,EAAE8H,YAAY,CAAEG,aAAa,CAAC9Q,EAAE,CAAG,CAAC;YAE/E;UAED,CAAE,CAAC;QAEJ;MAED,CAAE,CAAC;IAEJ;EAED;EAEA4Q,cAAcA,CAAA,EAAG;IAEhB,MAAMD,YAAY,GAAG,CAAC,CAAC;IAEvB,IAAK,MAAM,IAAI9U,OAAO,CAACwE,OAAO,EAAG;MAEhC,MAAM2Q,YAAY,GAAGnV,OAAO,CAACwE,OAAO,CAAC4Q,IAAI;MAEzC,KAAM,MAAMzQ,MAAM,IAAIwQ,YAAY,EAAG;QAEpC,IAAKA,YAAY,CAAExQ,MAAM,CAAE,CAACmH,QAAQ,KAAK,UAAU,IAAIqJ,YAAY,CAAExQ,MAAM,CAAE,CAAC0Q,WAAW,GAAG,CAAC,EAAG;UAE/F,MAAMC,SAAS,GAAGH,YAAY,CAAExQ,MAAM,CAAE,CAAC4Q,QAAQ;UAEjD,IAAKC,KAAK,CAACC,OAAO,CAAEH,SAAU,CAAC,EAAG;YAEjCA,SAAS,CAAC7R,OAAO,CAAE,UAAWiS,QAAQ,EAAG;cAExCZ,YAAY,CAAEY,QAAQ,CAACC,IAAI,CAAE,GAAG,IAAItX,OAAO,CAAC,CAAC,CAACgL,SAAS,CAAEqM,QAAQ,CAACE,MAAM,CAAC/I,CAAE,CAAC;YAE7E,CAAE,CAAC;UAEJ,CAAC,MAAM;YAENiI,YAAY,CAAEQ,SAAS,CAACK,IAAI,CAAE,GAAG,IAAItX,OAAO,CAAC,CAAC,CAACgL,SAAS,CAAEiM,SAAS,CAACM,MAAM,CAAC/I,CAAE,CAAC;UAE/E;QAED;MAED;IAED;IAEA,OAAOiI,YAAY;EAEpB;EAEAvG,sBAAsBA,CAAA,EAAG;IAExB,IAAK,gBAAgB,IAAIvO,OAAO,EAAG;MAElC,IAAK,cAAc,IAAIA,OAAO,CAAC6V,cAAc,EAAG;QAE/C;;QAEA,MAAMC,YAAY,GAAG9V,OAAO,CAAC6V,cAAc,CAACE,YAAY,CAACvO,KAAK;QAC9D,MAAMwO,CAAC,GAAGF,YAAY,CAAE,CAAC,CAAE;QAC3B,MAAMG,CAAC,GAAGH,YAAY,CAAE,CAAC,CAAE;QAC3B,MAAMI,CAAC,GAAGJ,YAAY,CAAE,CAAC,CAAE;QAE3B,IAAKE,CAAC,KAAK,CAAC,IAAIC,CAAC,KAAK,CAAC,IAAIC,CAAC,KAAK,CAAC,EAAG;UAEpC,MAAM9M,KAAK,GAAG,IAAI5L,KAAK,CAAEwY,CAAC,EAAEC,CAAC,EAAEC,CAAE,CAAC,CAAC5M,mBAAmB,CAAC,CAAC;UACxDpJ,UAAU,CAACmO,GAAG,CAAE,IAAIlR,YAAY,CAAEiM,KAAK,EAAE,CAAE,CAAE,CAAC;QAE/C;MAED;MAEA,IAAK,iBAAiB,IAAIpJ,OAAO,CAAC6V,cAAc,EAAG;QAElD3V,UAAU,CAACwO,QAAQ,CAACyH,eAAe,GAAGnW,OAAO,CAAC6V,cAAc,CAACO,eAAe,CAAC5O,KAAK;MAEnF;IAED;EAED;AAED;;AAEA;AACA,MAAMrE,cAAc,CAAC;EAEpB/C,WAAWA,CAAA,EAAG;IAEb,IAAI,CAACiW,uBAAuB,GAAG,KAAK;EAErC;;EAEA;EACA/U,KAAKA,CAAE0B,SAAS,EAAG;IAElB,MAAME,WAAW,GAAG,IAAII,GAAG,CAAC,CAAC;IAE7B,IAAK,UAAU,IAAItD,OAAO,CAACwE,OAAO,EAAG;MAEpC,MAAM8R,QAAQ,GAAGtW,OAAO,CAACwE,OAAO,CAAC+R,QAAQ;MAEzC,KAAM,MAAM5R,MAAM,IAAI2R,QAAQ,EAAG;QAEhC,MAAMzK,aAAa,GAAG5L,WAAW,CAACmE,GAAG,CAAEU,QAAQ,CAAEH,MAAO,CAAE,CAAC;QAC3D,MAAMqO,GAAG,GAAG,IAAI,CAACwD,aAAa,CAAE3K,aAAa,EAAEyK,QAAQ,CAAE3R,MAAM,CAAE,EAAE3B,SAAU,CAAC;QAE9EE,WAAW,CAACa,GAAG,CAAEe,QAAQ,CAAEH,MAAO,CAAC,EAAEqO,GAAI,CAAC;MAE3C;IAED;;IAEA;;IAEA,IAAK,IAAI,CAACqD,uBAAuB,KAAK,IAAI,EAAG;MAE5C7U,OAAO,CAAC4E,IAAI,CAAE,qHAAsH,CAAC;IAEtI;IAEA,OAAOlD,WAAW;EAEnB;;EAEA;EACAsT,aAAaA,CAAE3K,aAAa,EAAE4K,OAAO,EAAEzT,SAAS,EAAG;IAElD,QAASyT,OAAO,CAAC3K,QAAQ;MAExB,KAAK,MAAM;QACV,OAAO,IAAI,CAAC4K,iBAAiB,CAAE7K,aAAa,EAAE4K,OAAO,EAAEzT,SAAU,CAAC;QAClE;MAED,KAAK,YAAY;QAChB,OAAO,IAAI,CAAC2T,kBAAkB,CAAEF,OAAQ,CAAC;QACzC;IAEF;EAED;;EAEA;EACAC,iBAAiBA,CAAE7K,aAAa,EAAE4K,OAAO,EAAEzT,SAAS,EAAG;IAEtD,MAAMwI,SAAS,GAAGxI,SAAS,CAACwI,SAAS;IACrC,MAAMC,YAAY,GAAG,EAAE;IAEvB,MAAMoC,UAAU,GAAGhC,aAAa,CAAC7H,OAAO,CAAC8G,GAAG,CAAE,UAAWsD,MAAM,EAAG;MAEjE,OAAOpO,OAAO,CAACwE,OAAO,CAACsJ,KAAK,CAAEM,MAAM,CAACjK,EAAE,CAAE;IAE1C,CAAE,CAAC;;IAEH;IACA,IAAK0J,UAAU,CAACzF,MAAM,KAAK,CAAC,EAAG;IAE/B,MAAM2D,QAAQ,GAAGF,aAAa,CAAC5H,QAAQ,CAAC8O,MAAM,CAAE,UAAWhH,QAAQ,EAAErB,KAAK,EAAG;MAE5E,IAAKc,SAAS,CAAEd,KAAK,CAACvG,EAAE,CAAE,KAAKsB,SAAS,EAAGsG,QAAQ,GAAGP,SAAS,CAAEd,KAAK,CAACvG,EAAE,CAAE;MAE3E,OAAO4H,QAAQ;IAEhB,CAAC,EAAE,IAAK,CAAC;IAETF,aAAa,CAAC5H,QAAQ,CAACR,OAAO,CAAE,UAAWiH,KAAK,EAAG;MAElD,IAAK1H,SAAS,CAACyI,YAAY,CAAEf,KAAK,CAACvG,EAAE,CAAE,KAAKsB,SAAS,EAAG;QAEvDgG,YAAY,CAACpH,IAAI,CAAErB,SAAS,CAACyI,YAAY,CAAEf,KAAK,CAACvG,EAAE,CAAG,CAAC;MAExD;IAED,CAAE,CAAC;;IAEH;IACA;IACA,MAAM6J,SAAS,GAAGH,UAAU,CAAE,CAAC,CAAE;IAEjC,MAAMc,aAAa,GAAG,CAAC,CAAC;IAExB,IAAK,eAAe,IAAIX,SAAS,EAAGW,aAAa,CAACyE,UAAU,GAAGC,aAAa,CAAErF,SAAS,CAACsF,aAAa,CAAC9L,KAAM,CAAC;IAC7G,IAAK,aAAa,IAAIwG,SAAS,EAAGW,aAAa,CAACuE,WAAW,GAAGpO,QAAQ,CAAEkJ,SAAS,CAACmF,WAAW,CAAC3L,KAAM,CAAC;IAErG,IAAK,sBAAsB,IAAIwG,SAAS,EAAGW,aAAa,CAAC4E,WAAW,GAAGvF,SAAS,CAAC4I,oBAAoB,CAACpP,KAAK;IAC3G,IAAK,mBAAmB,IAAIwG,SAAS,EAAGW,aAAa,CAACgF,QAAQ,GAAG3F,SAAS,CAAC6I,iBAAiB,CAACrP,KAAK;IAClG,IAAK,kBAAkB,IAAIwG,SAAS,EAAGW,aAAa,CAACoF,KAAK,GAAG/F,SAAS,CAAC8I,gBAAgB,CAACtP,KAAK;IAE7F,MAAMwH,SAAS,GAAGC,iBAAiB,CAAEN,aAAc,CAAC;IAEpD,OAAO,IAAI,CAACoI,WAAW,CAAEN,OAAO,EAAE1K,QAAQ,EAAEN,YAAY,EAAEuD,SAAU,CAAC;EAEtE;;EAEA;EACA+H,WAAWA,CAAEN,OAAO,EAAE1K,QAAQ,EAAEN,YAAY,EAAEuL,YAAY,EAAG;IAE5D,MAAMhE,GAAG,GAAG,IAAI1V,cAAc,CAAC,CAAC;IAChC,IAAKmZ,OAAO,CAACvP,QAAQ,EAAG8L,GAAG,CAAC/L,IAAI,GAAGwP,OAAO,CAACvP,QAAQ;IAEnD,MAAM+P,OAAO,GAAG,IAAI,CAACC,YAAY,CAAET,OAAO,EAAE1K,QAAS,CAAC;IACtD,MAAMoL,OAAO,GAAG,IAAI,CAACC,UAAU,CAAEH,OAAQ,CAAC;IAE1C,MAAMI,iBAAiB,GAAG,IAAIxZ,sBAAsB,CAAEsZ,OAAO,CAACG,MAAM,EAAE,CAAE,CAAC;IAEzED,iBAAiB,CAACnI,YAAY,CAAE8H,YAAa,CAAC;IAE9ChE,GAAG,CAACuE,YAAY,CAAE,UAAU,EAAEF,iBAAkB,CAAC;IAEjD,IAAKF,OAAO,CAACK,MAAM,CAACpP,MAAM,GAAG,CAAC,EAAG;MAEhC4K,GAAG,CAACuE,YAAY,CAAE,OAAO,EAAE,IAAI1Z,sBAAsB,CAAEsZ,OAAO,CAACK,MAAM,EAAE,CAAE,CAAE,CAAC;IAE7E;IAEA,IAAKzL,QAAQ,EAAG;MAEfiH,GAAG,CAACuE,YAAY,CAAE,WAAW,EAAE,IAAIhY,qBAAqB,CAAE4X,OAAO,CAACM,cAAc,EAAE,CAAE,CAAE,CAAC;MAEvFzE,GAAG,CAACuE,YAAY,CAAE,YAAY,EAAE,IAAI1Z,sBAAsB,CAAEsZ,OAAO,CAACO,aAAa,EAAE,CAAE,CAAE,CAAC;;MAExF;MACA1E,GAAG,CAACH,YAAY,GAAG9G,QAAQ;IAE5B;IAEA,IAAKoL,OAAO,CAACQ,MAAM,CAACvP,MAAM,GAAG,CAAC,EAAG;MAEhC,MAAMwP,YAAY,GAAG,IAAIxZ,OAAO,CAAC,CAAC,CAACyZ,eAAe,CAAEb,YAAa,CAAC;MAElE,MAAMc,eAAe,GAAG,IAAIja,sBAAsB,CAAEsZ,OAAO,CAACQ,MAAM,EAAE,CAAE,CAAC;MACvEG,eAAe,CAACC,iBAAiB,CAAEH,YAAa,CAAC;MAEjD5E,GAAG,CAACuE,YAAY,CAAE,QAAQ,EAAEO,eAAgB,CAAC;IAE9C;IAEAX,OAAO,CAACa,GAAG,CAACvU,OAAO,CAAE,UAAWwU,QAAQ,EAAE/K,CAAC,EAAG;MAE7C,MAAMjG,IAAI,GAAGiG,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,KAAMA,CAAC,EAAG;MAExC8F,GAAG,CAACuE,YAAY,CAAEtQ,IAAI,EAAE,IAAIpJ,sBAAsB,CAAEsZ,OAAO,CAACa,GAAG,CAAE9K,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC;IAE5E,CAAE,CAAC;IAEH,IAAK+J,OAAO,CAACvO,QAAQ,IAAIuO,OAAO,CAACvO,QAAQ,CAACwP,WAAW,KAAK,SAAS,EAAG;MAErE;MACA,IAAIC,iBAAiB,GAAGhB,OAAO,CAACiB,aAAa,CAAE,CAAC,CAAE;MAClD,IAAIC,UAAU,GAAG,CAAC;MAElBlB,OAAO,CAACiB,aAAa,CAAC3U,OAAO,CAAE,UAAW6U,YAAY,EAAEpL,CAAC,EAAG;QAE3D,IAAKoL,YAAY,KAAKH,iBAAiB,EAAG;UAEzCnF,GAAG,CAACuF,QAAQ,CAAEF,UAAU,EAAEnL,CAAC,GAAGmL,UAAU,EAAEF,iBAAkB,CAAC;UAE7DA,iBAAiB,GAAGG,YAAY;UAChCD,UAAU,GAAGnL,CAAC;QAEf;MAED,CAAE,CAAC;;MAEH;MACA,IAAK8F,GAAG,CAACwF,MAAM,CAACpQ,MAAM,GAAG,CAAC,EAAG;QAE5B,MAAMqQ,SAAS,GAAGzF,GAAG,CAACwF,MAAM,CAAExF,GAAG,CAACwF,MAAM,CAACpQ,MAAM,GAAG,CAAC,CAAE;QACrD,MAAMsQ,SAAS,GAAGD,SAAS,CAACE,KAAK,GAAGF,SAAS,CAACG,KAAK;QAEnD,IAAKF,SAAS,KAAKvB,OAAO,CAACiB,aAAa,CAAChQ,MAAM,EAAG;UAEjD4K,GAAG,CAACuF,QAAQ,CAAEG,SAAS,EAAEvB,OAAO,CAACiB,aAAa,CAAChQ,MAAM,GAAGsQ,SAAS,EAAEP,iBAAkB,CAAC;QAEvF;MAED;;MAEA;MACA;MACA,IAAKnF,GAAG,CAACwF,MAAM,CAACpQ,MAAM,KAAK,CAAC,EAAG;QAE9B4K,GAAG,CAACuF,QAAQ,CAAE,CAAC,EAAEpB,OAAO,CAACiB,aAAa,CAAChQ,MAAM,EAAE+O,OAAO,CAACiB,aAAa,CAAE,CAAC,CAAG,CAAC;MAE5E;IAED;IAEA,IAAI,CAACS,eAAe,CAAE7F,GAAG,EAAEyD,OAAO,EAAEhL,YAAY,EAAEuL,YAAa,CAAC;IAEhE,OAAOhE,GAAG;EAEX;EAEAkE,YAAYA,CAAET,OAAO,EAAE1K,QAAQ,EAAG;IAEjC,MAAMkL,OAAO,GAAG,CAAC,CAAC;IAElBA,OAAO,CAAC6B,eAAe,GAAKrC,OAAO,CAACsC,QAAQ,KAAKtT,SAAS,GAAKgR,OAAO,CAACsC,QAAQ,CAAClM,CAAC,GAAG,EAAE;IACtFoK,OAAO,CAAC+B,aAAa,GAAKvC,OAAO,CAACwC,kBAAkB,KAAKxT,SAAS,GAAKgR,OAAO,CAACwC,kBAAkB,CAACpM,CAAC,GAAG,EAAE;IAExG,IAAK4J,OAAO,CAACyC,iBAAiB,EAAG;MAEhCjC,OAAO,CAAC7N,KAAK,GAAG,IAAI,CAAC+P,iBAAiB,CAAE1C,OAAO,CAACyC,iBAAiB,CAAE,CAAC,CAAG,CAAC;IAEzE;IAEA,IAAKzC,OAAO,CAAC2C,oBAAoB,EAAG;MAEnCnC,OAAO,CAACvO,QAAQ,GAAG,IAAI,CAAC2Q,oBAAoB,CAAE5C,OAAO,CAAC2C,oBAAoB,CAAE,CAAC,CAAG,CAAC;IAElF;IAEA,IAAK3C,OAAO,CAAC6C,kBAAkB,EAAG;MAEjCrC,OAAO,CAACU,MAAM,GAAG,IAAI,CAAC4B,YAAY,CAAE9C,OAAO,CAAC6C,kBAAkB,CAAE,CAAC,CAAG,CAAC;IAEtE;IAEA,IAAK7C,OAAO,CAAC+C,cAAc,EAAG;MAE7BvC,OAAO,CAACwC,EAAE,GAAG,EAAE;MAEf,IAAIvM,CAAC,GAAG,CAAC;MACT,OAAQuJ,OAAO,CAAC+C,cAAc,CAAEtM,CAAC,CAAE,EAAG;QAErC,IAAKuJ,OAAO,CAAC+C,cAAc,CAAEtM,CAAC,CAAE,CAACwM,EAAE,EAAG;UAErCzC,OAAO,CAACwC,EAAE,CAACpV,IAAI,CAAE,IAAI,CAACsV,QAAQ,CAAElD,OAAO,CAAC+C,cAAc,CAAEtM,CAAC,CAAG,CAAE,CAAC;QAEhE;QAEAA,CAAC,EAAG;MAEL;IAED;IAEA+J,OAAO,CAAC2C,WAAW,GAAG,CAAC,CAAC;IAExB,IAAK7N,QAAQ,KAAK,IAAI,EAAG;MAExBkL,OAAO,CAAClL,QAAQ,GAAGA,QAAQ;MAE3BA,QAAQ,CAACO,QAAQ,CAAC7I,OAAO,CAAE,UAAW+I,OAAO,EAAEU,CAAC,EAAG;QAElD;QACAV,OAAO,CAACC,OAAO,CAAChJ,OAAO,CAAE,UAAWoW,KAAK,EAAEC,CAAC,EAAG;UAE9C,IAAK7C,OAAO,CAAC2C,WAAW,CAAEC,KAAK,CAAE,KAAKpU,SAAS,EAAGwR,OAAO,CAAC2C,WAAW,CAAEC,KAAK,CAAE,GAAG,EAAE;UAEnF5C,OAAO,CAAC2C,WAAW,CAAEC,KAAK,CAAE,CAACxV,IAAI,CAAE;YAElCQ,EAAE,EAAEqI,CAAC;YACL6M,MAAM,EAAEvN,OAAO,CAACE,OAAO,CAAEoN,CAAC;UAE3B,CAAE,CAAC;QAEJ,CAAE,CAAC;MAEJ,CAAE,CAAC;IAEJ;IAEA,OAAO7C,OAAO;EAEf;EAEAG,UAAUA,CAAEH,OAAO,EAAG;IAErB,MAAME,OAAO,GAAG;MACfG,MAAM,EAAE,EAAE;MACVK,MAAM,EAAE,EAAE;MACVH,MAAM,EAAE,EAAE;MACVQ,GAAG,EAAE,EAAE;MACPI,aAAa,EAAE,EAAE;MACjBV,aAAa,EAAE,EAAE;MACjBD,cAAc,EAAE;IACjB,CAAC;IAED,IAAIuC,YAAY,GAAG,CAAC;IACpB,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,uBAAuB,GAAG,KAAK;;IAEnC;IACA,IAAIC,mBAAmB,GAAG,EAAE;IAC5B,IAAIC,WAAW,GAAG,EAAE;IACpB,IAAIC,UAAU,GAAG,EAAE;IACnB,IAAIC,OAAO,GAAG,EAAE;IAChB,IAAIC,WAAW,GAAG,EAAE;IACpB,IAAIC,iBAAiB,GAAG,EAAE;IAE1B,MAAM7Z,KAAK,GAAG,IAAI;IAClBsW,OAAO,CAAC+B,aAAa,CAACvV,OAAO,CAAE,UAAWgX,WAAW,EAAEC,kBAAkB,EAAG;MAE3E,IAAItC,aAAa;MACjB,IAAIuC,SAAS,GAAG,KAAK;;MAErB;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAKF,WAAW,GAAG,CAAC,EAAG;QAEtBA,WAAW,GAAGA,WAAW,GAAG,CAAE,CAAC,CAAC,CAAC;QACjCE,SAAS,GAAG,IAAI;MAEjB;MAEA,IAAIC,aAAa,GAAG,EAAE;MACtB,IAAIlO,OAAO,GAAG,EAAE;MAEhByN,mBAAmB,CAAC9V,IAAI,CAAEoW,WAAW,GAAG,CAAC,EAAEA,WAAW,GAAG,CAAC,GAAG,CAAC,EAAEA,WAAW,GAAG,CAAC,GAAG,CAAE,CAAC;MAErF,IAAKxD,OAAO,CAAC7N,KAAK,EAAG;QAEpB,MAAMyR,IAAI,GAAGC,OAAO,CAAEJ,kBAAkB,EAAEV,YAAY,EAAES,WAAW,EAAExD,OAAO,CAAC7N,KAAM,CAAC;QAEpFiR,UAAU,CAAChW,IAAI,CAAEwW,IAAI,CAAE,CAAC,CAAE,EAAEA,IAAI,CAAE,CAAC,CAAE,EAAEA,IAAI,CAAE,CAAC,CAAG,CAAC;MAEnD;MAEA,IAAK5D,OAAO,CAAClL,QAAQ,EAAG;QAEvB,IAAKkL,OAAO,CAAC2C,WAAW,CAAEa,WAAW,CAAE,KAAKhV,SAAS,EAAG;UAEvDwR,OAAO,CAAC2C,WAAW,CAAEa,WAAW,CAAE,CAAChX,OAAO,CAAE,UAAWsX,EAAE,EAAG;YAE3DrO,OAAO,CAACrI,IAAI,CAAE0W,EAAE,CAAChB,MAAO,CAAC;YACzBa,aAAa,CAACvW,IAAI,CAAE0W,EAAE,CAAClW,EAAG,CAAC;UAE5B,CAAE,CAAC;QAGJ;QAEA,IAAK6H,OAAO,CAACtE,MAAM,GAAG,CAAC,EAAG;UAEzB,IAAK,CAAE8R,uBAAuB,EAAG;YAEhC1Y,OAAO,CAAC4E,IAAI,CAAE,2GAA4G,CAAC;YAC3H8T,uBAAuB,GAAG,IAAI;UAE/B;UAEA,MAAMc,MAAM,GAAG,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;UAC7B,MAAMC,MAAM,GAAG,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;UAE7BvO,OAAO,CAACjJ,OAAO,CAAE,UAAWsW,MAAM,EAAEmB,WAAW,EAAG;YAEjD,IAAIC,aAAa,GAAGpB,MAAM;YAC1B,IAAIzB,YAAY,GAAGsC,aAAa,CAAEM,WAAW,CAAE;YAE/CD,MAAM,CAACxX,OAAO,CAAE,UAAW2X,cAAc,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAG;cAErF,IAAKH,aAAa,GAAGC,cAAc,EAAG;gBAErCE,mBAAmB,CAAED,mBAAmB,CAAE,GAAGF,aAAa;gBAC1DA,aAAa,GAAGC,cAAc;gBAE9B,MAAMG,GAAG,GAAGP,MAAM,CAAEK,mBAAmB,CAAE;gBACzCL,MAAM,CAAEK,mBAAmB,CAAE,GAAG/C,YAAY;gBAC5CA,YAAY,GAAGiD,GAAG;cAEnB;YAED,CAAE,CAAC;UAEJ,CAAE,CAAC;UAEHX,aAAa,GAAGI,MAAM;UACtBtO,OAAO,GAAGuO,MAAM;QAEjB;;QAEA;QACA,OAAQvO,OAAO,CAACtE,MAAM,GAAG,CAAC,EAAG;UAE5BsE,OAAO,CAACrI,IAAI,CAAE,CAAE,CAAC;UACjBuW,aAAa,CAACvW,IAAI,CAAE,CAAE,CAAC;QAExB;QAEA,KAAM,IAAI6I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAE,EAAGA,CAAC,EAAG;UAE9BqN,WAAW,CAAClW,IAAI,CAAEqI,OAAO,CAAEQ,CAAC,CAAG,CAAC;UAChCsN,iBAAiB,CAACnW,IAAI,CAAEuW,aAAa,CAAE1N,CAAC,CAAG,CAAC;QAE7C;MAED;MAEA,IAAK+J,OAAO,CAACU,MAAM,EAAG;QAErB,MAAMkD,IAAI,GAAGC,OAAO,CAAEJ,kBAAkB,EAAEV,YAAY,EAAES,WAAW,EAAExD,OAAO,CAACU,MAAO,CAAC;QAErFyC,WAAW,CAAC/V,IAAI,CAAEwW,IAAI,CAAE,CAAC,CAAE,EAAEA,IAAI,CAAE,CAAC,CAAE,EAAEA,IAAI,CAAE,CAAC,CAAG,CAAC;MAEpD;MAEA,IAAK5D,OAAO,CAACvO,QAAQ,IAAIuO,OAAO,CAACvO,QAAQ,CAACwP,WAAW,KAAK,SAAS,EAAG;QAErEE,aAAa,GAAG0C,OAAO,CAAEJ,kBAAkB,EAAEV,YAAY,EAAES,WAAW,EAAExD,OAAO,CAACvO,QAAS,CAAC,CAAE,CAAC,CAAE;QAE/F,IAAK0P,aAAa,GAAG,CAAC,EAAG;UAExBzX,KAAK,CAAC0V,uBAAuB,GAAG,IAAI;UACpC+B,aAAa,GAAG,CAAC,CAAC,CAAC;QAEpB;MAED;MAEA,IAAKnB,OAAO,CAACwC,EAAE,EAAG;QAEjBxC,OAAO,CAACwC,EAAE,CAAChW,OAAO,CAAE,UAAWgW,EAAE,EAAEvM,CAAC,EAAG;UAEtC,MAAM2N,IAAI,GAAGC,OAAO,CAAEJ,kBAAkB,EAAEV,YAAY,EAAES,WAAW,EAAEhB,EAAG,CAAC;UAEzE,IAAKa,OAAO,CAAEpN,CAAC,CAAE,KAAKzH,SAAS,EAAG;YAEjC6U,OAAO,CAAEpN,CAAC,CAAE,GAAG,EAAE;UAElB;UAEAoN,OAAO,CAAEpN,CAAC,CAAE,CAAC7I,IAAI,CAAEwW,IAAI,CAAE,CAAC,CAAG,CAAC;UAC9BP,OAAO,CAAEpN,CAAC,CAAE,CAAC7I,IAAI,CAAEwW,IAAI,CAAE,CAAC,CAAG,CAAC;QAE/B,CAAE,CAAC;MAEJ;MAEAZ,UAAU,EAAG;MAEb,IAAKU,SAAS,EAAG;QAEhBha,KAAK,CAAC6a,OAAO,CAAErE,OAAO,EAAEF,OAAO,EAAEkD,mBAAmB,EAAE/B,aAAa,EAAEgC,WAAW,EAAEC,UAAU,EAAEC,OAAO,EAAEC,WAAW,EAAEC,iBAAiB,EAAEP,UAAW,CAAC;QAEnJD,YAAY,EAAG;QACfC,UAAU,GAAG,CAAC;;QAEd;QACAE,mBAAmB,GAAG,EAAE;QACxBC,WAAW,GAAG,EAAE;QAChBC,UAAU,GAAG,EAAE;QACfC,OAAO,GAAG,EAAE;QACZC,WAAW,GAAG,EAAE;QAChBC,iBAAiB,GAAG,EAAE;MAEvB;IAED,CAAE,CAAC;IAEH,OAAOrD,OAAO;EAEf;;EAEA;EACAsE,eAAeA,CAAEC,QAAQ,EAAG;IAE3B,MAAM/D,MAAM,GAAG,IAAIlY,OAAO,CAAE,GAAG,EAAE,GAAG,EAAE,GAAI,CAAC;IAE3C,KAAM,IAAIyN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwO,QAAQ,CAACtT,MAAM,EAAE8E,CAAC,EAAG,EAAG;MAE5C,MAAMyO,OAAO,GAAGD,QAAQ,CAAExO,CAAC,CAAE;MAC7B,MAAM0O,IAAI,GAAGF,QAAQ,CAAE,CAAExO,CAAC,GAAG,CAAC,IAAKwO,QAAQ,CAACtT,MAAM,CAAE;MAEpDuP,MAAM,CAAC5P,CAAC,IAAI,CAAE4T,OAAO,CAAC3T,CAAC,GAAG4T,IAAI,CAAC5T,CAAC,KAAO2T,OAAO,CAACE,CAAC,GAAGD,IAAI,CAACC,CAAC,CAAE;MAC3DlE,MAAM,CAAC3P,CAAC,IAAI,CAAE2T,OAAO,CAACE,CAAC,GAAGD,IAAI,CAACC,CAAC,KAAOF,OAAO,CAAC5T,CAAC,GAAG6T,IAAI,CAAC7T,CAAC,CAAE;MAC3D4P,MAAM,CAACkE,CAAC,IAAI,CAAEF,OAAO,CAAC5T,CAAC,GAAG6T,IAAI,CAAC7T,CAAC,KAAO4T,OAAO,CAAC3T,CAAC,GAAG4T,IAAI,CAAC5T,CAAC,CAAE;IAE5D;IAEA2P,MAAM,CAACmE,SAAS,CAAC,CAAC;IAElB,OAAOnE,MAAM;EAEd;EAEAoE,4BAA4BA,CAAEL,QAAQ,EAAG;IAExC,MAAMM,YAAY,GAAG,IAAI,CAACP,eAAe,CAAEC,QAAS,CAAC;IACrD;IACA,MAAMO,EAAE,GAAGjK,IAAI,CAACkK,GAAG,CAAEF,YAAY,CAACH,CAAE,CAAC,GAAG,GAAG,GAAG,IAAIpc,OAAO,CAAE,GAAG,EAAE,GAAG,EAAE,GAAI,CAAC,GAAG,IAAIA,OAAO,CAAE,GAAG,EAAE,GAAG,EAAE,GAAI,CAAC;IACzG,MAAM0c,OAAO,GAAGF,EAAE,CAACG,KAAK,CAAEJ,YAAa,CAAC,CAACF,SAAS,CAAC,CAAC;IACpD,MAAMO,SAAS,GAAGL,YAAY,CAACM,KAAK,CAAC,CAAC,CAACF,KAAK,CAAED,OAAQ,CAAC,CAACL,SAAS,CAAC,CAAC;IAEnE,OAAO;MACNnE,MAAM,EAAEqE,YAAY;MACpBG,OAAO,EAAEA,OAAO;MAChBE,SAAS,EAAEA;IACZ,CAAC;EAEF;EAEAE,aAAaA,CAAEjF,MAAM,EAAEkF,aAAa,EAAEC,eAAe,EAAG;IAEvD,OAAO,IAAIjd,OAAO,CACjB8X,MAAM,CAACoF,GAAG,CAAEF,aAAc,CAAC,EAC3BlF,MAAM,CAACoF,GAAG,CAAED,eAAgB,CAC7B,CAAC;EAEF;;EAEA;EACAjB,OAAOA,CAAErE,OAAO,EAAEF,OAAO,EAAEkD,mBAAmB,EAAE/B,aAAa,EAAEgC,WAAW,EAAEC,UAAU,EAAEC,OAAO,EAAEC,WAAW,EAAEC,iBAAiB,EAAEP,UAAU,EAAG;IAE7I,IAAI0C,SAAS;IAEb,IAAK1C,UAAU,GAAG,CAAC,EAAG;MAErB;;MAEA,MAAMyB,QAAQ,GAAG,EAAE;MAEnB,KAAM,IAAIxO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiN,mBAAmB,CAAC/R,MAAM,EAAE8E,CAAC,IAAI,CAAC,EAAG;QAEzDwO,QAAQ,CAACrX,IAAI,CAAE,IAAI5E,OAAO,CACzBwX,OAAO,CAAC6B,eAAe,CAAEqB,mBAAmB,CAAEjN,CAAC,CAAE,CAAE,EACnD+J,OAAO,CAAC6B,eAAe,CAAEqB,mBAAmB,CAAEjN,CAAC,GAAG,CAAC,CAAE,CAAE,EACvD+J,OAAO,CAAC6B,eAAe,CAAEqB,mBAAmB,CAAEjN,CAAC,GAAG,CAAC,CAAE,CACtD,CAAE,CAAC;MAEJ;MAEA,MAAM;QAAEiP,OAAO;QAAEE;MAAU,CAAC,GAAG,IAAI,CAACN,4BAA4B,CAAEL,QAAS,CAAC;MAC5E,MAAMkB,kBAAkB,GAAG,EAAE;MAE7B,KAAM,MAAMtF,MAAM,IAAIoE,QAAQ,EAAG;QAEhCkB,kBAAkB,CAACvY,IAAI,CAAE,IAAI,CAACkY,aAAa,CAAEjF,MAAM,EAAE6E,OAAO,EAAEE,SAAU,CAAE,CAAC;MAE5E;MAEAM,SAAS,GAAG9c,UAAU,CAACgd,gBAAgB,CAAED,kBAAkB,EAAE,EAAG,CAAC;IAElE,CAAC,MAAM;MAEN;MACAD,SAAS,GAAG,CAAC,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,CAAC;IAE1B;IAEA,KAAM,MAAM,CAAEG,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAE,IAAIL,SAAS,EAAG;MAEzCxF,OAAO,CAACG,MAAM,CAACjT,IAAI,CAAE4S,OAAO,CAAC6B,eAAe,CAAEqB,mBAAmB,CAAE2C,EAAE,GAAG,CAAC,CAAE,CAAG,CAAC;MAC/E3F,OAAO,CAACG,MAAM,CAACjT,IAAI,CAAE4S,OAAO,CAAC6B,eAAe,CAAEqB,mBAAmB,CAAE2C,EAAE,GAAG,CAAC,GAAG,CAAC,CAAE,CAAG,CAAC;MACnF3F,OAAO,CAACG,MAAM,CAACjT,IAAI,CAAE4S,OAAO,CAAC6B,eAAe,CAAEqB,mBAAmB,CAAE2C,EAAE,GAAG,CAAC,GAAG,CAAC,CAAE,CAAG,CAAC;MAEnF3F,OAAO,CAACG,MAAM,CAACjT,IAAI,CAAE4S,OAAO,CAAC6B,eAAe,CAAEqB,mBAAmB,CAAE4C,EAAE,GAAG,CAAC,CAAE,CAAG,CAAC;MAC/E5F,OAAO,CAACG,MAAM,CAACjT,IAAI,CAAE4S,OAAO,CAAC6B,eAAe,CAAEqB,mBAAmB,CAAE4C,EAAE,GAAG,CAAC,GAAG,CAAC,CAAE,CAAG,CAAC;MACnF5F,OAAO,CAACG,MAAM,CAACjT,IAAI,CAAE4S,OAAO,CAAC6B,eAAe,CAAEqB,mBAAmB,CAAE4C,EAAE,GAAG,CAAC,GAAG,CAAC,CAAE,CAAG,CAAC;MAEnF5F,OAAO,CAACG,MAAM,CAACjT,IAAI,CAAE4S,OAAO,CAAC6B,eAAe,CAAEqB,mBAAmB,CAAE6C,EAAE,GAAG,CAAC,CAAE,CAAG,CAAC;MAC/E7F,OAAO,CAACG,MAAM,CAACjT,IAAI,CAAE4S,OAAO,CAAC6B,eAAe,CAAEqB,mBAAmB,CAAE6C,EAAE,GAAG,CAAC,GAAG,CAAC,CAAE,CAAG,CAAC;MACnF7F,OAAO,CAACG,MAAM,CAACjT,IAAI,CAAE4S,OAAO,CAAC6B,eAAe,CAAEqB,mBAAmB,CAAE6C,EAAE,GAAG,CAAC,GAAG,CAAC,CAAE,CAAG,CAAC;MAEnF,IAAK/F,OAAO,CAAClL,QAAQ,EAAG;QAEvBoL,OAAO,CAACO,aAAa,CAACrT,IAAI,CAAEkW,WAAW,CAAEuC,EAAE,GAAG,CAAC,CAAG,CAAC;QACnD3F,OAAO,CAACO,aAAa,CAACrT,IAAI,CAAEkW,WAAW,CAAEuC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QACvD3F,OAAO,CAACO,aAAa,CAACrT,IAAI,CAAEkW,WAAW,CAAEuC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QACvD3F,OAAO,CAACO,aAAa,CAACrT,IAAI,CAAEkW,WAAW,CAAEuC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAEvD3F,OAAO,CAACO,aAAa,CAACrT,IAAI,CAAEkW,WAAW,CAAEwC,EAAE,GAAG,CAAC,CAAG,CAAC;QACnD5F,OAAO,CAACO,aAAa,CAACrT,IAAI,CAAEkW,WAAW,CAAEwC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QACvD5F,OAAO,CAACO,aAAa,CAACrT,IAAI,CAAEkW,WAAW,CAAEwC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QACvD5F,OAAO,CAACO,aAAa,CAACrT,IAAI,CAAEkW,WAAW,CAAEwC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAEvD5F,OAAO,CAACO,aAAa,CAACrT,IAAI,CAAEkW,WAAW,CAAEyC,EAAE,GAAG,CAAC,CAAG,CAAC;QACnD7F,OAAO,CAACO,aAAa,CAACrT,IAAI,CAAEkW,WAAW,CAAEyC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QACvD7F,OAAO,CAACO,aAAa,CAACrT,IAAI,CAAEkW,WAAW,CAAEyC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QACvD7F,OAAO,CAACO,aAAa,CAACrT,IAAI,CAAEkW,WAAW,CAAEyC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAEvD7F,OAAO,CAACM,cAAc,CAACpT,IAAI,CAAEmW,iBAAiB,CAAEsC,EAAE,GAAG,CAAC,CAAG,CAAC;QAC1D3F,OAAO,CAACM,cAAc,CAACpT,IAAI,CAAEmW,iBAAiB,CAAEsC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAC9D3F,OAAO,CAACM,cAAc,CAACpT,IAAI,CAAEmW,iBAAiB,CAAEsC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAC9D3F,OAAO,CAACM,cAAc,CAACpT,IAAI,CAAEmW,iBAAiB,CAAEsC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAE9D3F,OAAO,CAACM,cAAc,CAACpT,IAAI,CAAEmW,iBAAiB,CAAEuC,EAAE,GAAG,CAAC,CAAG,CAAC;QAC1D5F,OAAO,CAACM,cAAc,CAACpT,IAAI,CAAEmW,iBAAiB,CAAEuC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAC9D5F,OAAO,CAACM,cAAc,CAACpT,IAAI,CAAEmW,iBAAiB,CAAEuC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAC9D5F,OAAO,CAACM,cAAc,CAACpT,IAAI,CAAEmW,iBAAiB,CAAEuC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAE9D5F,OAAO,CAACM,cAAc,CAACpT,IAAI,CAAEmW,iBAAiB,CAAEwC,EAAE,GAAG,CAAC,CAAG,CAAC;QAC1D7F,OAAO,CAACM,cAAc,CAACpT,IAAI,CAAEmW,iBAAiB,CAAEwC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAC9D7F,OAAO,CAACM,cAAc,CAACpT,IAAI,CAAEmW,iBAAiB,CAAEwC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAC9D7F,OAAO,CAACM,cAAc,CAACpT,IAAI,CAAEmW,iBAAiB,CAAEwC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;MAE/D;MAEA,IAAK/F,OAAO,CAAC7N,KAAK,EAAG;QAEpB+N,OAAO,CAACK,MAAM,CAACnT,IAAI,CAAEgW,UAAU,CAAEyC,EAAE,GAAG,CAAC,CAAG,CAAC;QAC3C3F,OAAO,CAACK,MAAM,CAACnT,IAAI,CAAEgW,UAAU,CAAEyC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAC/C3F,OAAO,CAACK,MAAM,CAACnT,IAAI,CAAEgW,UAAU,CAAEyC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAE/C3F,OAAO,CAACK,MAAM,CAACnT,IAAI,CAAEgW,UAAU,CAAE0C,EAAE,GAAG,CAAC,CAAG,CAAC;QAC3C5F,OAAO,CAACK,MAAM,CAACnT,IAAI,CAAEgW,UAAU,CAAE0C,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAC/C5F,OAAO,CAACK,MAAM,CAACnT,IAAI,CAAEgW,UAAU,CAAE0C,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAE/C5F,OAAO,CAACK,MAAM,CAACnT,IAAI,CAAEgW,UAAU,CAAE2C,EAAE,GAAG,CAAC,CAAG,CAAC;QAC3C7F,OAAO,CAACK,MAAM,CAACnT,IAAI,CAAEgW,UAAU,CAAE2C,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAC/C7F,OAAO,CAACK,MAAM,CAACnT,IAAI,CAAEgW,UAAU,CAAE2C,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;MAEhD;MAEA,IAAK/F,OAAO,CAACvO,QAAQ,IAAIuO,OAAO,CAACvO,QAAQ,CAACwP,WAAW,KAAK,SAAS,EAAG;QAErEf,OAAO,CAACiB,aAAa,CAAC/T,IAAI,CAAE+T,aAAc,CAAC;QAC3CjB,OAAO,CAACiB,aAAa,CAAC/T,IAAI,CAAE+T,aAAc,CAAC;QAC3CjB,OAAO,CAACiB,aAAa,CAAC/T,IAAI,CAAE+T,aAAc,CAAC;MAE5C;MAEA,IAAKnB,OAAO,CAACU,MAAM,EAAG;QAErBR,OAAO,CAACQ,MAAM,CAACtT,IAAI,CAAE+V,WAAW,CAAE0C,EAAE,GAAG,CAAC,CAAG,CAAC;QAC5C3F,OAAO,CAACQ,MAAM,CAACtT,IAAI,CAAE+V,WAAW,CAAE0C,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAChD3F,OAAO,CAACQ,MAAM,CAACtT,IAAI,CAAE+V,WAAW,CAAE0C,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAEhD3F,OAAO,CAACQ,MAAM,CAACtT,IAAI,CAAE+V,WAAW,CAAE2C,EAAE,GAAG,CAAC,CAAG,CAAC;QAC5C5F,OAAO,CAACQ,MAAM,CAACtT,IAAI,CAAE+V,WAAW,CAAE2C,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAChD5F,OAAO,CAACQ,MAAM,CAACtT,IAAI,CAAE+V,WAAW,CAAE2C,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAEhD5F,OAAO,CAACQ,MAAM,CAACtT,IAAI,CAAE+V,WAAW,CAAE4C,EAAE,GAAG,CAAC,CAAG,CAAC;QAC5C7F,OAAO,CAACQ,MAAM,CAACtT,IAAI,CAAE+V,WAAW,CAAE4C,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAChD7F,OAAO,CAACQ,MAAM,CAACtT,IAAI,CAAE+V,WAAW,CAAE4C,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;MAEjD;MAEA,IAAK/F,OAAO,CAACwC,EAAE,EAAG;QAEjBxC,OAAO,CAACwC,EAAE,CAAChW,OAAO,CAAE,UAAWgW,EAAE,EAAEK,CAAC,EAAG;UAEtC,IAAK3C,OAAO,CAACa,GAAG,CAAE8B,CAAC,CAAE,KAAKrU,SAAS,EAAG0R,OAAO,CAACa,GAAG,CAAE8B,CAAC,CAAE,GAAG,EAAE;UAE3D3C,OAAO,CAACa,GAAG,CAAE8B,CAAC,CAAE,CAACzV,IAAI,CAAEiW,OAAO,CAAER,CAAC,CAAE,CAAEgD,EAAE,GAAG,CAAC,CAAG,CAAC;UAC/C3F,OAAO,CAACa,GAAG,CAAE8B,CAAC,CAAE,CAACzV,IAAI,CAAEiW,OAAO,CAAER,CAAC,CAAE,CAAEgD,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;UAEnD3F,OAAO,CAACa,GAAG,CAAE8B,CAAC,CAAE,CAACzV,IAAI,CAAEiW,OAAO,CAAER,CAAC,CAAE,CAAEiD,EAAE,GAAG,CAAC,CAAG,CAAC;UAC/C5F,OAAO,CAACa,GAAG,CAAE8B,CAAC,CAAE,CAACzV,IAAI,CAAEiW,OAAO,CAAER,CAAC,CAAE,CAAEiD,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;UAEnD5F,OAAO,CAACa,GAAG,CAAE8B,CAAC,CAAE,CAACzV,IAAI,CAAEiW,OAAO,CAAER,CAAC,CAAE,CAAEkD,EAAE,GAAG,CAAC,CAAG,CAAC;UAC/C7F,OAAO,CAACa,GAAG,CAAE8B,CAAC,CAAE,CAACzV,IAAI,CAAEiW,OAAO,CAAER,CAAC,CAAE,CAAEkD,EAAE,GAAG,CAAC,GAAG,CAAC,CAAG,CAAC;QAEpD,CAAE,CAAC;MAEJ;IAED;EAED;EAEAnE,eAAeA,CAAEoE,SAAS,EAAEC,aAAa,EAAEzR,YAAY,EAAEuL,YAAY,EAAG;IAEvE,IAAKvL,YAAY,CAACrD,MAAM,KAAK,CAAC,EAAG;IAEjC6U,SAAS,CAACE,oBAAoB,GAAG,IAAI;IAErCF,SAAS,CAACG,eAAe,CAACxI,QAAQ,GAAG,EAAE;IACvC;;IAEA,MAAMjU,KAAK,GAAG,IAAI;IAClB8K,YAAY,CAAChI,OAAO,CAAE,UAAWyI,WAAW,EAAG;MAE9CA,WAAW,CAACC,UAAU,CAAC1I,OAAO,CAAE,UAAW4Z,SAAS,EAAG;QAEtD,MAAMC,YAAY,GAAGtd,OAAO,CAACwE,OAAO,CAAC+R,QAAQ,CAAE8G,SAAS,CAAC5P,KAAK,CAAE;QAEhE,IAAK6P,YAAY,KAAK7X,SAAS,EAAG;UAEjC9E,KAAK,CAAC4c,gBAAgB,CAAEN,SAAS,EAAEC,aAAa,EAAEI,YAAY,EAAEtG,YAAY,EAAEqG,SAAS,CAACpW,IAAK,CAAC;QAE/F;MAED,CAAE,CAAC;IAEJ,CAAE,CAAC;EAEJ;;EAEA;EACA;EACA;EACA;EACAsW,gBAAgBA,CAAEN,SAAS,EAAEC,aAAa,EAAEI,YAAY,EAAEtG,YAAY,EAAE/P,IAAI,EAAG;IAE9E,MAAM+R,aAAa,GAAKkE,aAAa,CAACjE,kBAAkB,KAAKxT,SAAS,GAAKyX,aAAa,CAACjE,kBAAkB,CAACpM,CAAC,GAAG,EAAE;IAElH,MAAM2Q,oBAAoB,GAAKF,YAAY,CAACvE,QAAQ,KAAKtT,SAAS,GAAK6X,YAAY,CAACvE,QAAQ,CAAClM,CAAC,GAAG,EAAE;IACnG,MAAMJ,OAAO,GAAK6Q,YAAY,CAACxQ,OAAO,KAAKrH,SAAS,GAAK6X,YAAY,CAACxQ,OAAO,CAACD,CAAC,GAAG,EAAE;IAEpF,MAAMzE,MAAM,GAAG6U,SAAS,CAACtK,UAAU,CAACiC,QAAQ,CAACgE,KAAK,GAAG,CAAC;IACtD,MAAM6E,cAAc,GAAG,IAAIC,YAAY,CAAEtV,MAAO,CAAC;IAEjD,KAAM,IAAI8E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,OAAO,CAACrE,MAAM,EAAE8E,CAAC,EAAG,EAAG;MAE3C,MAAMyQ,UAAU,GAAGlR,OAAO,CAAES,CAAC,CAAE,GAAG,CAAC;MAEnCuQ,cAAc,CAAEE,UAAU,CAAE,GAAGH,oBAAoB,CAAEtQ,CAAC,GAAG,CAAC,CAAE;MAC5DuQ,cAAc,CAAEE,UAAU,GAAG,CAAC,CAAE,GAAGH,oBAAoB,CAAEtQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAE;MACpEuQ,cAAc,CAAEE,UAAU,GAAG,CAAC,CAAE,GAAGH,oBAAoB,CAAEtQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAE;IAErE;;IAEA;IACA,MAAM0Q,YAAY,GAAG;MACpB5E,aAAa,EAAEA,aAAa;MAC5BF,eAAe,EAAE2E;IAElB,CAAC;IAED,MAAMI,YAAY,GAAG,IAAI,CAACzG,UAAU,CAAEwG,YAAa,CAAC;IAEpD,MAAMvG,iBAAiB,GAAG,IAAIxZ,sBAAsB,CAAEggB,YAAY,CAACvG,MAAM,EAAE,CAAE,CAAC;IAC9ED,iBAAiB,CAACpQ,IAAI,GAAGA,IAAI,IAAIqW,YAAY,CAACpW,QAAQ;IAEtDmQ,iBAAiB,CAACnI,YAAY,CAAE8H,YAAa,CAAC;IAE9CiG,SAAS,CAACG,eAAe,CAACxI,QAAQ,CAACvQ,IAAI,CAAEgT,iBAAkB,CAAC;EAE7D;;EAEA;EACAkC,YAAYA,CAAEuE,UAAU,EAAG;IAE1B,MAAM5F,WAAW,GAAG4F,UAAU,CAACC,sBAAsB;IACrD,MAAMC,aAAa,GAAGF,UAAU,CAACG,wBAAwB;IACzD,MAAM5c,MAAM,GAAGyc,UAAU,CAACI,OAAO,CAACrR,CAAC;IACnC,IAAIsR,WAAW,GAAG,EAAE;IACpB,IAAKH,aAAa,KAAK,eAAe,EAAG;MAExC,IAAK,aAAa,IAAIF,UAAU,EAAG;QAElCK,WAAW,GAAGL,UAAU,CAACM,WAAW,CAACvR,CAAC;MAEvC,CAAC,MAAM,IAAK,cAAc,IAAIiR,UAAU,EAAG;QAE1CK,WAAW,GAAGL,UAAU,CAACO,YAAY,CAACxR,CAAC;MAExC;IAED;IAEA,OAAO;MACNyR,QAAQ,EAAE,CAAC;MACXjd,MAAM,EAAEA,MAAM;MACdoL,OAAO,EAAE0R,WAAW;MACpBjG,WAAW,EAAEA,WAAW;MACxB8F,aAAa,EAAEA;IAChB,CAAC;EAEF;;EAEA;EACArE,QAAQA,CAAE4E,MAAM,EAAG;IAElB,MAAMrG,WAAW,GAAGqG,MAAM,CAACR,sBAAsB;IACjD,MAAMC,aAAa,GAAGO,MAAM,CAACN,wBAAwB;IACrD,MAAM5c,MAAM,GAAGkd,MAAM,CAAC7E,EAAE,CAAC7M,CAAC;IAC1B,IAAIsR,WAAW,GAAG,EAAE;IACpB,IAAKH,aAAa,KAAK,eAAe,EAAG;MAExCG,WAAW,GAAGI,MAAM,CAACC,OAAO,CAAC3R,CAAC;IAE/B;IAEA,OAAO;MACNyR,QAAQ,EAAE,CAAC;MACXjd,MAAM,EAAEA,MAAM;MACdoL,OAAO,EAAE0R,WAAW;MACpBjG,WAAW,EAAEA,WAAW;MACxB8F,aAAa,EAAEA;IAChB,CAAC;EAEF;;EAEA;EACA7E,iBAAiBA,CAAEsF,SAAS,EAAG;IAE9B,MAAMvG,WAAW,GAAGuG,SAAS,CAACV,sBAAsB;IACpD,MAAMC,aAAa,GAAGS,SAAS,CAACR,wBAAwB;IACxD,MAAM5c,MAAM,GAAGod,SAAS,CAACC,MAAM,CAAC7R,CAAC;IACjC,IAAIsR,WAAW,GAAG,EAAE;IACpB,IAAKH,aAAa,KAAK,eAAe,EAAG;MAExCG,WAAW,GAAGM,SAAS,CAACE,UAAU,CAAC9R,CAAC;IAErC;IAEA,KAAM,IAAIK,CAAC,GAAG,CAAC,EAAE0R,CAAC,GAAG,IAAIphB,KAAK,CAAC,CAAC,EAAE0P,CAAC,GAAG7L,MAAM,CAAC+G,MAAM,EAAE8E,CAAC,IAAI,CAAC,EAAG;MAE7D0R,CAAC,CAACvV,SAAS,CAAEhI,MAAM,EAAE6L,CAAE,CAAC,CAAC5D,mBAAmB,CAAC,CAAC,CAACuV,OAAO,CAAExd,MAAM,EAAE6L,CAAE,CAAC;IAEpE;IAEA,OAAO;MACNoR,QAAQ,EAAE,CAAC;MACXjd,MAAM,EAAEA,MAAM;MACdoL,OAAO,EAAE0R,WAAW;MACpBjG,WAAW,EAAEA,WAAW;MACxB8F,aAAa,EAAEA;IAChB,CAAC;EAEF;;EAEA;EACA3E,oBAAoBA,CAAEyF,YAAY,EAAG;IAEpC,MAAM5G,WAAW,GAAG4G,YAAY,CAACf,sBAAsB;IACvD,MAAMC,aAAa,GAAGc,YAAY,CAACb,wBAAwB;IAE3D,IAAK/F,WAAW,KAAK,sBAAsB,EAAG;MAE7C,OAAO;QACNoG,QAAQ,EAAE,CAAC;QACXjd,MAAM,EAAE,CAAE,CAAC,CAAE;QACboL,OAAO,EAAE,CAAE,CAAC,CAAE;QACdyL,WAAW,EAAE,SAAS;QACtB8F,aAAa,EAAEA;MAChB,CAAC;IAEF;IAEA,MAAMe,mBAAmB,GAAGD,YAAY,CAACE,SAAS,CAACnS,CAAC;;IAEpD;IACA;IACA;IACA,MAAMoS,eAAe,GAAG,EAAE;IAE1B,KAAM,IAAI/R,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6R,mBAAmB,CAAC3W,MAAM,EAAE,EAAG8E,CAAC,EAAG;MAEvD+R,eAAe,CAAC5a,IAAI,CAAE6I,CAAE,CAAC;IAE1B;IAEA,OAAO;MACNoR,QAAQ,EAAE,CAAC;MACXjd,MAAM,EAAE0d,mBAAmB;MAC3BtS,OAAO,EAAEwS,eAAe;MACxB/G,WAAW,EAAEA,WAAW;MACxB8F,aAAa,EAAEA;IAChB,CAAC;EAEF;;EAEA;EACArH,kBAAkBA,CAAEF,OAAO,EAAG;IAE7B,MAAMyI,KAAK,GAAGpa,QAAQ,CAAE2R,OAAO,CAAC0I,KAAM,CAAC;IAEvC,IAAKC,KAAK,CAAEF,KAAM,CAAC,EAAG;MAErB1d,OAAO,CAACC,KAAK,CAAE,6DAA6D,EAAEgV,OAAO,CAAC0I,KAAK,EAAE1I,OAAO,CAAC5R,EAAG,CAAC;MACzG,OAAO,IAAIvH,cAAc,CAAC,CAAC;IAE5B;IAEA,MAAM+hB,MAAM,GAAGH,KAAK,GAAG,CAAC;IAExB,MAAMI,KAAK,GAAG7I,OAAO,CAAC8I,UAAU,CAAC1S,CAAC;IAClC,MAAM2S,aAAa,GAAG,EAAE;IACxB,MAAMC,YAAY,GAAGhJ,OAAO,CAACiJ,MAAM,CAAC7S,CAAC;IAErC,KAAM,IAAIK,CAAC,GAAG,CAAC,EAAEyS,CAAC,GAAGF,YAAY,CAACrX,MAAM,EAAE8E,CAAC,GAAGyS,CAAC,EAAEzS,CAAC,IAAI,CAAC,EAAG;MAEzDsS,aAAa,CAACnb,IAAI,CAAE,IAAI3E,OAAO,CAAC,CAAC,CAAC2J,SAAS,CAAEoW,YAAY,EAAEvS,CAAE,CAAE,CAAC;IAEjE;IAEA,IAAI0S,SAAS,EAAEC,OAAO;IAEtB,IAAKpJ,OAAO,CAACqJ,IAAI,KAAK,QAAQ,EAAG;MAEhCN,aAAa,CAACnb,IAAI,CAAEmb,aAAa,CAAE,CAAC,CAAG,CAAC;IAEzC,CAAC,MAAM,IAAK/I,OAAO,CAACqJ,IAAI,KAAK,UAAU,EAAG;MAEzCF,SAAS,GAAGP,MAAM;MAClBQ,OAAO,GAAGP,KAAK,CAAClX,MAAM,GAAG,CAAC,GAAGwX,SAAS;MAEtC,KAAM,IAAI1S,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmS,MAAM,EAAE,EAAGnS,CAAC,EAAG;QAEnCsS,aAAa,CAACnb,IAAI,CAAEmb,aAAa,CAAEtS,CAAC,CAAG,CAAC;MAEzC;IAED;IAEA,MAAM6S,KAAK,GAAG,IAAIhgB,UAAU,CAAEsf,MAAM,EAAEC,KAAK,EAAEE,aAAa,EAAEI,SAAS,EAAEC,OAAQ,CAAC;IAChF,MAAMG,MAAM,GAAGD,KAAK,CAACE,SAAS,CAAET,aAAa,CAACpX,MAAM,GAAG,EAAG,CAAC;IAE3D,OAAO,IAAI9K,cAAc,CAAC,CAAC,CAAC4iB,aAAa,CAAEF,MAAO,CAAC;EAEpD;AAED;;AAEA;AACA,MAAM3Q,eAAe,CAAC;EAErB;EACA/N,KAAKA,CAAA,EAAG;IAEP,MAAM6e,cAAc,GAAG,EAAE;IAEzB,MAAMC,QAAQ,GAAG,IAAI,CAACC,UAAU,CAAC,CAAC;IAElC,IAAKD,QAAQ,KAAK3a,SAAS,EAAG;MAE7B,KAAM,MAAM6a,GAAG,IAAIF,QAAQ,EAAG;QAE7B,MAAMG,OAAO,GAAGH,QAAQ,CAAEE,GAAG,CAAE;QAE/B,MAAME,IAAI,GAAG,IAAI,CAACC,OAAO,CAAEF,OAAQ,CAAC;QAEpCJ,cAAc,CAAC9b,IAAI,CAAEmc,IAAK,CAAC;MAE5B;IAED;IAEA,OAAOL,cAAc;EAEtB;EAEAE,UAAUA,CAAA,EAAG;IAEZ;IACA;IACA,IAAKrgB,OAAO,CAACwE,OAAO,CAACkc,cAAc,KAAKjb,SAAS,EAAG,OAAOA,SAAS;IAEpE,MAAMkb,aAAa,GAAG,IAAI,CAACC,wBAAwB,CAAC,CAAC;IAErD,IAAI,CAACC,oBAAoB,CAAEF,aAAc,CAAC;IAE1C,MAAMG,SAAS,GAAG,IAAI,CAACC,oBAAoB,CAAEJ,aAAc,CAAC;IAC5D,MAAMP,QAAQ,GAAG,IAAI,CAACY,eAAe,CAAEF,SAAU,CAAC;IAElD,OAAOV,QAAQ;EAEhB;;EAEA;EACA;EACA;EACAQ,wBAAwBA,CAAA,EAAG;IAE1B,MAAMK,aAAa,GAAGjhB,OAAO,CAACwE,OAAO,CAAC0c,kBAAkB;IAExD,MAAMP,aAAa,GAAG,IAAIrd,GAAG,CAAC,CAAC;IAE/B,KAAM,MAAMqB,MAAM,IAAIsc,aAAa,EAAG;MAErC,MAAME,YAAY,GAAGF,aAAa,CAAEtc,MAAM,CAAE;MAE5C,IAAKwc,YAAY,CAACja,QAAQ,CAACka,KAAK,CAAE,qBAAsB,CAAC,KAAK,IAAI,EAAG;QAEpE,MAAMC,SAAS,GAAG;UAEjBxc,EAAE,EAAEsc,YAAY,CAACtc,EAAE;UACnBsL,IAAI,EAAEgR,YAAY,CAACja,QAAQ;UAC3Boa,MAAM,EAAE,CAAC;QAEV,CAAC;QAEDX,aAAa,CAAC5c,GAAG,CAAEsd,SAAS,CAACxc,EAAE,EAAEwc,SAAU,CAAC;MAE7C;IAED;IAEA,OAAOV,aAAa;EAErB;;EAEA;EACA;EACA;EACAE,oBAAoBA,CAAEF,aAAa,EAAG;IAErC,MAAMY,SAAS,GAAGvhB,OAAO,CAACwE,OAAO,CAACkc,cAAc;;IAEhD;IACA;IACA;IACA;IACA;IACA;;IAEA,KAAM,MAAM/b,MAAM,IAAI4c,SAAS,EAAG;MAEjC,MAAMC,cAAc,GAAG;QAEtB3c,EAAE,EAAE0c,SAAS,CAAE5c,MAAM,CAAE,CAACE,EAAE;QAC1B4c,KAAK,EAAEF,SAAS,CAAE5c,MAAM,CAAE,CAAC+c,OAAO,CAAC7U,CAAC,CAAC/B,GAAG,CAAE6W,uBAAwB,CAAC;QACnE/Z,MAAM,EAAE2Z,SAAS,CAAE5c,MAAM,CAAE,CAACid,aAAa,CAAC/U;MAE3C,CAAC;MAED,MAAMhB,aAAa,GAAG5L,WAAW,CAACmE,GAAG,CAAEod,cAAc,CAAC3c,EAAG,CAAC;MAE1D,IAAKgH,aAAa,KAAKpG,SAAS,EAAG;QAElC,MAAMoc,gBAAgB,GAAGhW,aAAa,CAAC7H,OAAO,CAAE,CAAC,CAAE,CAACG,EAAE;QACtD,MAAM2d,0BAA0B,GAAGjW,aAAa,CAAC7H,OAAO,CAAE,CAAC,CAAE,CAACH,YAAY;QAE1E,IAAKie,0BAA0B,CAACV,KAAK,CAAE,GAAI,CAAC,EAAG;UAE9CT,aAAa,CAACvc,GAAG,CAAEyd,gBAAiB,CAAC,CAACP,MAAM,CAAE,GAAG,CAAE,GAAGE,cAAc;QAErE,CAAC,MAAM,IAAKM,0BAA0B,CAACV,KAAK,CAAE,GAAI,CAAC,EAAG;UAErDT,aAAa,CAACvc,GAAG,CAAEyd,gBAAiB,CAAC,CAACP,MAAM,CAAE,GAAG,CAAE,GAAGE,cAAc;QAErE,CAAC,MAAM,IAAKM,0BAA0B,CAACV,KAAK,CAAE,GAAI,CAAC,EAAG;UAErDT,aAAa,CAACvc,GAAG,CAAEyd,gBAAiB,CAAC,CAACP,MAAM,CAAE,GAAG,CAAE,GAAGE,cAAc;QAErE,CAAC,MAAM,IAAKM,0BAA0B,CAACV,KAAK,CAAE,eAAgB,CAAC,IAAIT,aAAa,CAAC7c,GAAG,CAAE+d,gBAAiB,CAAC,EAAG;UAE1GlB,aAAa,CAACvc,GAAG,CAAEyd,gBAAiB,CAAC,CAACP,MAAM,CAAE,OAAO,CAAE,GAAGE,cAAc;QAEzE;MAED;IAED;EAED;;EAEA;EACA;EACA;EACAT,oBAAoBA,CAAEJ,aAAa,EAAG;IAErC,MAAMoB,SAAS,GAAG/hB,OAAO,CAACwE,OAAO,CAACwd,cAAc;IAEhD,MAAMlB,SAAS,GAAG,IAAIxd,GAAG,CAAC,CAAC;IAE3B,KAAM,MAAMqB,MAAM,IAAIod,SAAS,EAAG;MAEjC,MAAME,eAAe,GAAG,EAAE;MAE1B,MAAM9T,UAAU,GAAGlO,WAAW,CAACmE,GAAG,CAAEU,QAAQ,CAAEH,MAAO,CAAE,CAAC;MAExD,IAAKwJ,UAAU,KAAK1I,SAAS,EAAG;QAE/B;QACA,MAAMxB,QAAQ,GAAGkK,UAAU,CAAClK,QAAQ;QAEpCA,QAAQ,CAACR,OAAO,CAAE,UAAWiH,KAAK,EAAEwC,CAAC,EAAG;UAEvC,IAAKyT,aAAa,CAAC7c,GAAG,CAAE4G,KAAK,CAACvG,EAAG,CAAC,EAAG;YAEpC,MAAMkd,SAAS,GAAGV,aAAa,CAACvc,GAAG,CAAEsG,KAAK,CAACvG,EAAG,CAAC;;YAE/C;YACA,IAAKkd,SAAS,CAACC,MAAM,CAACvZ,CAAC,KAAKtC,SAAS,IAAI4b,SAAS,CAACC,MAAM,CAACtZ,CAAC,KAAKvC,SAAS,IAAI4b,SAAS,CAACC,MAAM,CAACzF,CAAC,KAAKpW,SAAS,EAAG;cAE/G,IAAKwc,eAAe,CAAE/U,CAAC,CAAE,KAAKzH,SAAS,EAAG;gBAEzC,MAAMyc,OAAO,GAAGjiB,WAAW,CAACmE,GAAG,CAAEsG,KAAK,CAACvG,EAAG,CAAC,CAACH,OAAO,CAAC0J,MAAM,CAAE,UAAWU,MAAM,EAAG;kBAE/E,OAAOA,MAAM,CAACvK,YAAY,KAAK4B,SAAS;gBAEzC,CAAE,CAAC,CAAE,CAAC,CAAE,CAACtB,EAAE;gBAEX,IAAK+d,OAAO,KAAKzc,SAAS,EAAG;kBAE5B,MAAM0c,QAAQ,GAAGniB,OAAO,CAACwE,OAAO,CAACsJ,KAAK,CAAEoU,OAAO,CAACE,QAAQ,CAAC,CAAC,CAAE;kBAE5D,IAAKD,QAAQ,KAAK1c,SAAS,EAAG;oBAE7BjE,OAAO,CAAC4E,IAAI,CAAE,8CAA8C,EAAEsE,KAAM,CAAC;oBACrE;kBAED;kBAEA,MAAM+D,IAAI,GAAG;oBAEZ4T,SAAS,EAAEF,QAAQ,CAACjb,QAAQ,GAAGpI,eAAe,CAAC8Q,gBAAgB,CAAEuS,QAAQ,CAACjb,QAAS,CAAC,GAAG,EAAE;oBACzF/C,EAAE,EAAEge,QAAQ,CAACtd,EAAE;oBACfyd,eAAe,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;oBAC5BC,eAAe,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;oBAC5BC,YAAY,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC;kBAExB,CAAC;kBAEDtiB,UAAU,CAACsO,QAAQ,CAAE,UAAW9D,KAAK,EAAG;oBAEvC,IAAKA,KAAK,CAACvG,EAAE,KAAKge,QAAQ,CAACtd,EAAE,EAAG;sBAE/B4J,IAAI,CAACO,SAAS,GAAGtE,KAAK,CAACmE,MAAM;sBAE7B,IAAKnE,KAAK,CAACgE,QAAQ,CAACC,aAAa,EAAGF,IAAI,CAAC2E,UAAU,GAAG1I,KAAK,CAACgE,QAAQ,CAACC,aAAa,CAACyE,UAAU;oBAE9F;kBAED,CAAE,CAAC;kBAEH,IAAK,CAAE3E,IAAI,CAACO,SAAS,EAAGP,IAAI,CAACO,SAAS,GAAG,IAAI3Q,OAAO,CAAC,CAAC;;kBAEtD;kBACA;kBACA,IAAK,aAAa,IAAI8jB,QAAQ,EAAG1T,IAAI,CAACgF,WAAW,GAAG0O,QAAQ,CAACzO,WAAW,CAAClM,KAAK;kBAC9E,IAAK,cAAc,IAAI2a,QAAQ,EAAG1T,IAAI,CAACoF,YAAY,GAAGsO,QAAQ,CAACrO,YAAY,CAACtM,KAAK;kBAEjFya,eAAe,CAAE/U,CAAC,CAAE,GAAGuB,IAAI;gBAE5B;cAED;cAEA,IAAKwT,eAAe,CAAE/U,CAAC,CAAE,EAAG+U,eAAe,CAAE/U,CAAC,CAAE,CAAEmU,SAAS,CAAClR,IAAI,CAAE,GAAGkR,SAAS;YAE/E,CAAC,MAAM,IAAKA,SAAS,CAACC,MAAM,CAACmB,KAAK,KAAKhd,SAAS,EAAG;cAElD,IAAKwc,eAAe,CAAE/U,CAAC,CAAE,KAAKzH,SAAS,EAAG;gBAEzC,MAAMid,UAAU,GAAGziB,WAAW,CAACmE,GAAG,CAAEsG,KAAK,CAACvG,EAAG,CAAC,CAACH,OAAO,CAAC0J,MAAM,CAAE,UAAWU,MAAM,EAAG;kBAElF,OAAOA,MAAM,CAACvK,YAAY,KAAK4B,SAAS;gBAEzC,CAAE,CAAC,CAAE,CAAC,CAAE,CAACtB,EAAE;gBAEX,MAAMwe,SAAS,GAAG1iB,WAAW,CAACmE,GAAG,CAAEse,UAAW,CAAC,CAAC1e,OAAO,CAAE,CAAC,CAAE,CAACG,EAAE;gBAC/D,MAAMsJ,KAAK,GAAGxN,WAAW,CAACmE,GAAG,CAAEue,SAAU,CAAC,CAAC3e,OAAO,CAAE,CAAC,CAAE,CAACG,EAAE;;gBAE1D;gBACA,MAAM+d,OAAO,GAAGjiB,WAAW,CAACmE,GAAG,CAAEqJ,KAAM,CAAC,CAACzJ,OAAO,CAAE,CAAC,CAAE,CAACG,EAAE;gBAExD,MAAMge,QAAQ,GAAGniB,OAAO,CAACwE,OAAO,CAACsJ,KAAK,CAAEoU,OAAO,CAAE;gBAEjD,MAAMzT,IAAI,GAAG;kBAEZ4T,SAAS,EAAEF,QAAQ,CAACjb,QAAQ,GAAGpI,eAAe,CAAC8Q,gBAAgB,CAAEuS,QAAQ,CAACjb,QAAS,CAAC,GAAG,EAAE;kBACzF0b,SAAS,EAAE5iB,OAAO,CAACwE,OAAO,CAACmH,QAAQ,CAAE+W,UAAU,CAAE,CAACxb;gBAEnD,CAAC;gBAED+a,eAAe,CAAE/U,CAAC,CAAE,GAAGuB,IAAI;cAE5B;cAEAwT,eAAe,CAAE/U,CAAC,CAAE,CAAEmU,SAAS,CAAClR,IAAI,CAAE,GAAGkR,SAAS;YAEnD;UAED;QAED,CAAE,CAAC;QAEHP,SAAS,CAAC/c,GAAG,CAAEe,QAAQ,CAAEH,MAAO,CAAC,EAAEsd,eAAgB,CAAC;MAErD;IAED;IAEA,OAAOnB,SAAS;EAEjB;;EAEA;EACA;EACAE,eAAeA,CAAEF,SAAS,EAAG;IAE5B,MAAM+B,SAAS,GAAG7iB,OAAO,CAACwE,OAAO,CAACse,cAAc;;IAEhD;IACA,MAAM1C,QAAQ,GAAG,CAAC,CAAC;IAEnB,KAAM,MAAMzb,MAAM,IAAIke,SAAS,EAAG;MAEjC,MAAM5e,QAAQ,GAAGhE,WAAW,CAACmE,GAAG,CAAEU,QAAQ,CAAEH,MAAO,CAAE,CAAC,CAACV,QAAQ;MAE/D,IAAKA,QAAQ,CAACmE,MAAM,GAAG,CAAC,EAAG;QAE1B;QACA;QACA5G,OAAO,CAAC4E,IAAI,CAAE,oIAAqI,CAAC;MAErJ;MAEA,MAAM2c,KAAK,GAAGjC,SAAS,CAAC1c,GAAG,CAAEH,QAAQ,CAAE,CAAC,CAAE,CAACE,EAAG,CAAC;MAE/Cic,QAAQ,CAAEzb,MAAM,CAAE,GAAG;QAEpBsC,IAAI,EAAE4b,SAAS,CAAEle,MAAM,CAAE,CAACuC,QAAQ;QAClC6b,KAAK,EAAEA;MAER,CAAC;IAEF;IAEA,OAAO3C,QAAQ;EAEhB;EAEAK,OAAOA,CAAEF,OAAO,EAAG;IAElB,IAAIyC,MAAM,GAAG,EAAE;IAEf,MAAMriB,KAAK,GAAG,IAAI;IAClB4f,OAAO,CAACwC,KAAK,CAACtf,OAAO,CAAE,UAAWwf,SAAS,EAAG;MAE7CD,MAAM,GAAGA,MAAM,CAACE,MAAM,CAAEviB,KAAK,CAACwiB,cAAc,CAAEF,SAAU,CAAE,CAAC;IAE5D,CAAE,CAAC;IAEH,OAAO,IAAI7lB,aAAa,CAAEmjB,OAAO,CAACtZ,IAAI,EAAE,CAAE,CAAC,EAAE+b,MAAO,CAAC;EAEtD;EAEAG,cAAcA,CAAEF,SAAS,EAAG;IAE3B,MAAMD,MAAM,GAAG,EAAE;IAEjB,IAAIV,eAAe,GAAG,IAAI7iB,OAAO,CAAC,CAAC;IACnC,IAAI+iB,YAAY,GAAG,IAAI/iB,OAAO,CAAC,CAAC;IAEhC,IAAKwjB,SAAS,CAACjU,SAAS,EAAGiU,SAAS,CAACjU,SAAS,CAACoU,SAAS,CAAEd,eAAe,EAAE,IAAIvjB,UAAU,CAAC,CAAC,EAAEyjB,YAAa,CAAC;IAE3GF,eAAe,GAAGA,eAAe,CAACzD,OAAO,CAAC,CAAC;IAC3C2D,YAAY,GAAGA,YAAY,CAAC3D,OAAO,CAAC,CAAC;IAErC,IAAKoE,SAAS,CAACI,CAAC,KAAK5d,SAAS,IAAI6d,MAAM,CAACC,IAAI,CAAEN,SAAS,CAACI,CAAC,CAAC/B,MAAO,CAAC,CAAClZ,MAAM,GAAG,CAAC,EAAG;MAEhF,MAAMob,aAAa,GAAG,IAAI,CAACC,mBAAmB,CAAER,SAAS,CAACZ,SAAS,EAAEY,SAAS,CAACI,CAAC,CAAC/B,MAAM,EAAEgB,eAAe,EAAE,UAAW,CAAC;MACtH,IAAKkB,aAAa,KAAK/d,SAAS,EAAGud,MAAM,CAAC3e,IAAI,CAAEmf,aAAc,CAAC;IAEhE;IAEA,IAAKP,SAAS,CAACS,CAAC,KAAKje,SAAS,IAAI6d,MAAM,CAACC,IAAI,CAAEN,SAAS,CAACS,CAAC,CAACpC,MAAO,CAAC,CAAClZ,MAAM,GAAG,CAAC,EAAG;MAEhF,MAAMub,aAAa,GAAG,IAAI,CAACC,qBAAqB,CAAEX,SAAS,CAACZ,SAAS,EAAEY,SAAS,CAACS,CAAC,CAACpC,MAAM,EAAE2B,SAAS,CAACxP,WAAW,EAAEwP,SAAS,CAACpP,YAAY,EAAEoP,SAAS,CAAC7P,UAAW,CAAC;MAChK,IAAKuQ,aAAa,KAAKle,SAAS,EAAGud,MAAM,CAAC3e,IAAI,CAAEsf,aAAc,CAAC;IAEhE;IAEA,IAAKV,SAAS,CAACY,CAAC,KAAKpe,SAAS,IAAI6d,MAAM,CAACC,IAAI,CAAEN,SAAS,CAACY,CAAC,CAACvC,MAAO,CAAC,CAAClZ,MAAM,GAAG,CAAC,EAAG;MAEhF,MAAM0b,UAAU,GAAG,IAAI,CAACL,mBAAmB,CAAER,SAAS,CAACZ,SAAS,EAAEY,SAAS,CAACY,CAAC,CAACvC,MAAM,EAAEkB,YAAY,EAAE,OAAQ,CAAC;MAC7G,IAAKsB,UAAU,KAAKre,SAAS,EAAGud,MAAM,CAAC3e,IAAI,CAAEyf,UAAW,CAAC;IAE1D;IAEA,IAAKb,SAAS,CAAC3V,aAAa,KAAK7H,SAAS,EAAG;MAE5C,MAAMse,UAAU,GAAG,IAAI,CAACC,kBAAkB,CAAEf,SAAU,CAAC;MACvD,IAAKc,UAAU,KAAKte,SAAS,EAAGud,MAAM,CAAC3e,IAAI,CAAE0f,UAAW,CAAC;IAE1D;IAEA,OAAOf,MAAM;EAEd;EAEAS,mBAAmBA,CAAEpB,SAAS,EAAEf,MAAM,EAAE2C,YAAY,EAAE/d,IAAI,EAAG;IAE5D,MAAMub,KAAK,GAAG,IAAI,CAACyC,kBAAkB,CAAE5C,MAAO,CAAC;IAC/C,MAAM1Z,MAAM,GAAG,IAAI,CAACuc,sBAAsB,CAAE1C,KAAK,EAAEH,MAAM,EAAE2C,YAAa,CAAC;IAEzE,OAAO,IAAItkB,mBAAmB,CAAE0iB,SAAS,GAAG,GAAG,GAAGnc,IAAI,EAAEub,KAAK,EAAE7Z,MAAO,CAAC;EAExE;EAEAgc,qBAAqBA,CAAEvB,SAAS,EAAEf,MAAM,EAAE7N,WAAW,EAAEI,YAAY,EAAET,UAAU,EAAG;IAEjF,IAAIqO,KAAK;IACT,IAAI7Z,MAAM;IAEV,IAAK0Z,MAAM,CAACvZ,CAAC,KAAKtC,SAAS,IAAI6b,MAAM,CAACtZ,CAAC,KAAKvC,SAAS,IAAI6b,MAAM,CAACzF,CAAC,KAAKpW,SAAS,EAAG;MAEjF,MAAM2e,MAAM,GAAG,IAAI,CAACC,oBAAoB,CAAE/C,MAAM,CAACvZ,CAAC,EAAEuZ,MAAM,CAACtZ,CAAC,EAAEsZ,MAAM,CAACzF,CAAC,EAAEzI,UAAW,CAAC;MAEpFqO,KAAK,GAAG2C,MAAM,CAAE,CAAC,CAAE;MACnBxc,MAAM,GAAGwc,MAAM,CAAE,CAAC,CAAE;IAErB;IAEA,IAAK3Q,WAAW,KAAKhO,SAAS,EAAG;MAEhCgO,WAAW,GAAGA,WAAW,CAAC3I,GAAG,CAAE3M,SAAS,CAACgU,QAAS,CAAC;MACnDsB,WAAW,CAACpP,IAAI,CAAE+O,UAAW,CAAC;MAE9BK,WAAW,GAAG,IAAI9V,KAAK,CAAC,CAAC,CAAC0L,SAAS,CAAEoK,WAAY,CAAC;MAClDA,WAAW,GAAG,IAAI1U,UAAU,CAAC,CAAC,CAACulB,YAAY,CAAE7Q,WAAY,CAAC;IAE3D;IAEA,IAAKI,YAAY,KAAKpO,SAAS,EAAG;MAEjCoO,YAAY,GAAGA,YAAY,CAAC/I,GAAG,CAAE3M,SAAS,CAACgU,QAAS,CAAC;MACrD0B,YAAY,CAACxP,IAAI,CAAE+O,UAAW,CAAC;MAE/BS,YAAY,GAAG,IAAIlW,KAAK,CAAC,CAAC,CAAC0L,SAAS,CAAEwK,YAAa,CAAC;MACpDA,YAAY,GAAG,IAAI9U,UAAU,CAAC,CAAC,CAACulB,YAAY,CAAEzQ,YAAa,CAAC,CAAC0Q,MAAM,CAAC,CAAC;IAEtE;IAEA,MAAMC,UAAU,GAAG,IAAIzlB,UAAU,CAAC,CAAC;IACnC,MAAM0lB,KAAK,GAAG,IAAI9mB,KAAK,CAAC,CAAC;IAEzB,MAAM+mB,gBAAgB,GAAG,EAAE;IAE3B,IAAK,CAAE9c,MAAM,IAAI,CAAE6Z,KAAK,EAAG,OAAO,IAAIziB,uBAAuB,CAAEqjB,SAAS,GAAG,aAAa,EAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,CAAG,CAAC;IAExG,KAAM,IAAInV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtF,MAAM,CAACQ,MAAM,EAAE8E,CAAC,IAAI,CAAC,EAAG;MAE5CuX,KAAK,CAAC1gB,GAAG,CAAE6D,MAAM,CAAEsF,CAAC,CAAE,EAAEtF,MAAM,CAAEsF,CAAC,GAAG,CAAC,CAAE,EAAEtF,MAAM,CAAEsF,CAAC,GAAG,CAAC,CAAE,EAAEkG,UAAW,CAAC;MACtEoR,UAAU,CAACF,YAAY,CAAEG,KAAM,CAAC;MAEhC,IAAKhR,WAAW,KAAKhO,SAAS,EAAG+e,UAAU,CAACG,WAAW,CAAElR,WAAY,CAAC;MACtE,IAAKI,YAAY,KAAKpO,SAAS,EAAG+e,UAAU,CAACI,QAAQ,CAAE/Q,YAAa,CAAC;;MAErE;MACA,IAAK3G,CAAC,GAAG,CAAC,EAAG;QAEZ,MAAM2X,QAAQ,GAAG,IAAI9lB,UAAU,CAAC,CAAC,CAACsK,SAAS,CAC1Cqb,gBAAgB,EACd,CAAExX,CAAC,GAAG,CAAC,IAAK,CAAC,GAAK,CACrB,CAAC;QAED,IAAK2X,QAAQ,CAACnI,GAAG,CAAE8H,UAAW,CAAC,GAAG,CAAC,EAAG;UAErCA,UAAU,CAACzgB,GAAG,CAAE,CAAEygB,UAAU,CAACzc,CAAC,EAAE,CAAEyc,UAAU,CAACxc,CAAC,EAAE,CAAEwc,UAAU,CAAC3I,CAAC,EAAE,CAAE2I,UAAU,CAACM,CAAE,CAAC;QAEjF;MAED;MAEAN,UAAU,CAAC3F,OAAO,CAAE6F,gBAAgB,EAAIxX,CAAC,GAAG,CAAC,GAAK,CAAE,CAAC;IAEtD;IAEA,OAAO,IAAIlO,uBAAuB,CAAEqjB,SAAS,GAAG,aAAa,EAAEZ,KAAK,EAAEiD,gBAAiB,CAAC;EAEzF;EAEAV,kBAAkBA,CAAEf,SAAS,EAAG;IAE/B,MAAM3B,MAAM,GAAG2B,SAAS,CAAC3V,aAAa,CAACgU,MAAM,CAACmB,KAAK;IACnD,MAAM7a,MAAM,GAAG0Z,MAAM,CAAC1Z,MAAM,CAACkD,GAAG,CAAE,UAAWia,GAAG,EAAG;MAElD,OAAOA,GAAG,GAAG,GAAG;IAEjB,CAAE,CAAC;IAEH,MAAMC,QAAQ,GAAG9kB,UAAU,CAAC+kB,eAAe,CAAEhC,SAAS,CAACZ,SAAU,CAAC,CAAC6C,qBAAqB,CAAEjC,SAAS,CAACL,SAAS,CAAE;IAE/G,OAAO,IAAInkB,mBAAmB,CAAEwkB,SAAS,CAACZ,SAAS,GAAG,yBAAyB,GAAG2C,QAAQ,GAAG,GAAG,EAAE1D,MAAM,CAACG,KAAK,EAAE7Z,MAAO,CAAC;EAEzH;;EAEA;EACA;EACAsc,kBAAkBA,CAAE5C,MAAM,EAAG;IAE5B,IAAIG,KAAK,GAAG,EAAE;;IAEd;IACA,IAAKH,MAAM,CAACvZ,CAAC,KAAKtC,SAAS,EAAGgc,KAAK,GAAGA,KAAK,CAACyB,MAAM,CAAE5B,MAAM,CAACvZ,CAAC,CAAC0Z,KAAM,CAAC;IACpE,IAAKH,MAAM,CAACtZ,CAAC,KAAKvC,SAAS,EAAGgc,KAAK,GAAGA,KAAK,CAACyB,MAAM,CAAE5B,MAAM,CAACtZ,CAAC,CAACyZ,KAAM,CAAC;IACpE,IAAKH,MAAM,CAACzF,CAAC,KAAKpW,SAAS,EAAGgc,KAAK,GAAGA,KAAK,CAACyB,MAAM,CAAE5B,MAAM,CAACzF,CAAC,CAAC4F,KAAM,CAAC;;IAEpE;IACAA,KAAK,GAAGA,KAAK,CAAC0D,IAAI,CAAE,UAAWtY,CAAC,EAAEqJ,CAAC,EAAG;MAErC,OAAOrJ,CAAC,GAAGqJ,CAAC;IAEb,CAAE,CAAC;;IAEH;IACA,IAAKuL,KAAK,CAACrZ,MAAM,GAAG,CAAC,EAAG;MAEvB,IAAIgd,WAAW,GAAG,CAAC;MACnB,IAAIC,SAAS,GAAG5D,KAAK,CAAE,CAAC,CAAE;MAC1B,KAAM,IAAIvU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuU,KAAK,CAACrZ,MAAM,EAAE8E,CAAC,EAAG,EAAG;QAEzC,MAAMoY,YAAY,GAAG7D,KAAK,CAAEvU,CAAC,CAAE;QAC/B,IAAKoY,YAAY,KAAKD,SAAS,EAAG;UAEjC5D,KAAK,CAAE2D,WAAW,CAAE,GAAGE,YAAY;UACnCD,SAAS,GAAGC,YAAY;UACxBF,WAAW,EAAG;QAEf;MAED;MAEA3D,KAAK,GAAGA,KAAK,CAAC1b,KAAK,CAAE,CAAC,EAAEqf,WAAY,CAAC;IAEtC;IAEA,OAAO3D,KAAK;EAEb;EAEA0C,sBAAsBA,CAAE1C,KAAK,EAAEH,MAAM,EAAE2C,YAAY,EAAG;IAErD,MAAMsB,SAAS,GAAGtB,YAAY;IAE9B,MAAMrc,MAAM,GAAG,EAAE;IAEjB,IAAI4d,MAAM,GAAG,CAAE,CAAC;IAChB,IAAIC,MAAM,GAAG,CAAE,CAAC;IAChB,IAAIC,MAAM,GAAG,CAAE,CAAC;IAEhBjE,KAAK,CAAChe,OAAO,CAAE,UAAWkiB,IAAI,EAAG;MAEhC,IAAKrE,MAAM,CAACvZ,CAAC,EAAGyd,MAAM,GAAGlE,MAAM,CAACvZ,CAAC,CAAC0Z,KAAK,CAACpZ,OAAO,CAAEsd,IAAK,CAAC;MACvD,IAAKrE,MAAM,CAACtZ,CAAC,EAAGyd,MAAM,GAAGnE,MAAM,CAACtZ,CAAC,CAACyZ,KAAK,CAACpZ,OAAO,CAAEsd,IAAK,CAAC;MACvD,IAAKrE,MAAM,CAACzF,CAAC,EAAG6J,MAAM,GAAGpE,MAAM,CAACzF,CAAC,CAAC4F,KAAK,CAACpZ,OAAO,CAAEsd,IAAK,CAAC;;MAEvD;MACA,IAAKH,MAAM,KAAK,CAAE,CAAC,EAAG;QAErB,MAAMI,MAAM,GAAGtE,MAAM,CAACvZ,CAAC,CAACH,MAAM,CAAE4d,MAAM,CAAE;QACxC5d,MAAM,CAACvD,IAAI,CAAEuhB,MAAO,CAAC;QACrBL,SAAS,CAAE,CAAC,CAAE,GAAGK,MAAM;MAExB,CAAC,MAAM;QAEN;QACAhe,MAAM,CAACvD,IAAI,CAAEkhB,SAAS,CAAE,CAAC,CAAG,CAAC;MAE9B;MAEA,IAAKE,MAAM,KAAK,CAAE,CAAC,EAAG;QAErB,MAAMI,MAAM,GAAGvE,MAAM,CAACtZ,CAAC,CAACJ,MAAM,CAAE6d,MAAM,CAAE;QACxC7d,MAAM,CAACvD,IAAI,CAAEwhB,MAAO,CAAC;QACrBN,SAAS,CAAE,CAAC,CAAE,GAAGM,MAAM;MAExB,CAAC,MAAM;QAENje,MAAM,CAACvD,IAAI,CAAEkhB,SAAS,CAAE,CAAC,CAAG,CAAC;MAE9B;MAEA,IAAKG,MAAM,KAAK,CAAE,CAAC,EAAG;QAErB,MAAMI,MAAM,GAAGxE,MAAM,CAACzF,CAAC,CAACjU,MAAM,CAAE8d,MAAM,CAAE;QACxC9d,MAAM,CAACvD,IAAI,CAAEyhB,MAAO,CAAC;QACrBP,SAAS,CAAE,CAAC,CAAE,GAAGO,MAAM;MAExB,CAAC,MAAM;QAENle,MAAM,CAACvD,IAAI,CAAEkhB,SAAS,CAAE,CAAC,CAAG,CAAC;MAE9B;IAED,CAAE,CAAC;IAEH,OAAO3d,MAAM;EAEd;;EAEA;EACA;EACA;EACAyc,oBAAoBA,CAAE0B,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAE7S,UAAU,EAAG;IAE1D,MAAMqO,KAAK,GAAG,EAAE;IAChB,MAAM7Z,MAAM,GAAG,EAAE;;IAEjB;IACA6Z,KAAK,CAACpd,IAAI,CAAE0hB,MAAM,CAACtE,KAAK,CAAE,CAAC,CAAG,CAAC;IAC/B7Z,MAAM,CAACvD,IAAI,CAAElG,SAAS,CAACgU,QAAQ,CAAE4T,MAAM,CAACne,MAAM,CAAE,CAAC,CAAG,CAAE,CAAC;IACvDA,MAAM,CAACvD,IAAI,CAAElG,SAAS,CAACgU,QAAQ,CAAE6T,MAAM,CAACpe,MAAM,CAAE,CAAC,CAAG,CAAE,CAAC;IACvDA,MAAM,CAACvD,IAAI,CAAElG,SAAS,CAACgU,QAAQ,CAAE8T,MAAM,CAACre,MAAM,CAAE,CAAC,CAAG,CAAE,CAAC;IAEvD,KAAM,IAAIsF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6Y,MAAM,CAACne,MAAM,CAACQ,MAAM,EAAE8E,CAAC,EAAG,EAAG;MAEjD,MAAM+W,YAAY,GAAG,CACpB8B,MAAM,CAACne,MAAM,CAAEsF,CAAC,GAAG,CAAC,CAAE,EACtB8Y,MAAM,CAACpe,MAAM,CAAEsF,CAAC,GAAG,CAAC,CAAE,EACtB+Y,MAAM,CAACre,MAAM,CAAEsF,CAAC,GAAG,CAAC,CAAE,CACtB;MAED,IAAKkS,KAAK,CAAE6E,YAAY,CAAE,CAAC,CAAG,CAAC,IAAI7E,KAAK,CAAE6E,YAAY,CAAE,CAAC,CAAG,CAAC,IAAI7E,KAAK,CAAE6E,YAAY,CAAE,CAAC,CAAG,CAAC,EAAG;QAE7F;MAED;MAEA,MAAMiC,eAAe,GAAGjC,YAAY,CAACnZ,GAAG,CAAE3M,SAAS,CAACgU,QAAS,CAAC;MAE9D,MAAMmT,YAAY,GAAG,CACpBS,MAAM,CAACne,MAAM,CAAEsF,CAAC,CAAE,EAClB8Y,MAAM,CAACpe,MAAM,CAAEsF,CAAC,CAAE,EAClB+Y,MAAM,CAACre,MAAM,CAAEsF,CAAC,CAAE,CAClB;MAED,IAAKkS,KAAK,CAAEkG,YAAY,CAAE,CAAC,CAAG,CAAC,IAAIlG,KAAK,CAAEkG,YAAY,CAAE,CAAC,CAAG,CAAC,IAAIlG,KAAK,CAAEkG,YAAY,CAAE,CAAC,CAAG,CAAC,EAAG;QAE7F;MAED;MAEA,MAAMa,eAAe,GAAGb,YAAY,CAACxa,GAAG,CAAE3M,SAAS,CAACgU,QAAS,CAAC;MAE9D,MAAMiU,UAAU,GAAG,CAClBd,YAAY,CAAE,CAAC,CAAE,GAAGrB,YAAY,CAAE,CAAC,CAAE,EACrCqB,YAAY,CAAE,CAAC,CAAE,GAAGrB,YAAY,CAAE,CAAC,CAAE,EACrCqB,YAAY,CAAE,CAAC,CAAE,GAAGrB,YAAY,CAAE,CAAC,CAAE,CACrC;MAED,MAAMoC,YAAY,GAAG,CACpBrU,IAAI,CAACkK,GAAG,CAAEkK,UAAU,CAAE,CAAC,CAAG,CAAC,EAC3BpU,IAAI,CAACkK,GAAG,CAAEkK,UAAU,CAAE,CAAC,CAAG,CAAC,EAC3BpU,IAAI,CAACkK,GAAG,CAAEkK,UAAU,CAAE,CAAC,CAAG,CAAC,CAC3B;MAED,IAAKC,YAAY,CAAE,CAAC,CAAE,IAAI,GAAG,IAAIA,YAAY,CAAE,CAAC,CAAE,IAAI,GAAG,IAAIA,YAAY,CAAE,CAAC,CAAE,IAAI,GAAG,EAAG;QAEvF,MAAMC,UAAU,GAAGtU,IAAI,CAACM,GAAG,CAAE,GAAG+T,YAAa,CAAC;QAE9C,MAAME,eAAe,GAAGD,UAAU,GAAG,GAAG;QAExC,MAAME,EAAE,GAAG,IAAI7oB,KAAK,CAAE,GAAGuoB,eAAe,EAAE9S,UAAW,CAAC;QACtD,MAAMqT,EAAE,GAAG,IAAI9oB,KAAK,CAAE,GAAGwoB,eAAe,EAAE/S,UAAW,CAAC;QAEtD,MAAMsT,EAAE,GAAG,IAAI3nB,UAAU,CAAC,CAAC,CAACulB,YAAY,CAAEkC,EAAG,CAAC;QAC9C,MAAMG,EAAE,GAAG,IAAI5nB,UAAU,CAAC,CAAC,CAACulB,YAAY,CAAEmC,EAAG,CAAC;;QAE9C;QACA,IAAKC,EAAE,CAAChK,GAAG,CAAEiK,EAAG,CAAC,EAAG;UAEnBA,EAAE,CAAC5iB,GAAG,CAAE,CAAE4iB,EAAE,CAAC5e,CAAC,EAAE,CAAE4e,EAAE,CAAC3e,CAAC,EAAE,CAAE2e,EAAE,CAAC9K,CAAC,EAAE,CAAE8K,EAAE,CAAC7B,CAAE,CAAC;QAEzC;;QAEA;QACA,MAAM8B,WAAW,GAAGb,MAAM,CAACtE,KAAK,CAAEvU,CAAC,GAAG,CAAC,CAAE;QACzC,MAAM2Z,QAAQ,GAAGd,MAAM,CAACtE,KAAK,CAAEvU,CAAC,CAAE,GAAG0Z,WAAW;QAEhD,MAAME,CAAC,GAAG,IAAI/nB,UAAU,CAAC,CAAC;QAC1B,MAAMgoB,CAAC,GAAG,IAAIppB,KAAK,CAAC,CAAC;QACrB,KAAM,IAAIqpB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,GAAGT,eAAe,EAAG;UAElDO,CAAC,CAAC7W,IAAI,CAAEyW,EAAE,CAACpK,KAAK,CAAC,CAAC,CAAC2K,KAAK,CAAEN,EAAE,CAACrK,KAAK,CAAC,CAAC,EAAE0K,CAAE,CAAE,CAAC;UAE3CvF,KAAK,CAACpd,IAAI,CAAEuiB,WAAW,GAAGI,CAAC,GAAGH,QAAS,CAAC;UACxCE,CAAC,CAACG,iBAAiB,CAAEJ,CAAC,EAAE1T,UAAW,CAAC;UAEpCxL,MAAM,CAACvD,IAAI,CAAE0iB,CAAC,CAAChf,CAAE,CAAC;UAClBH,MAAM,CAACvD,IAAI,CAAE0iB,CAAC,CAAC/e,CAAE,CAAC;UAClBJ,MAAM,CAACvD,IAAI,CAAE0iB,CAAC,CAAClL,CAAE,CAAC;QAEnB;MAED,CAAC,MAAM;QAEN4F,KAAK,CAACpd,IAAI,CAAE0hB,MAAM,CAACtE,KAAK,CAAEvU,CAAC,CAAG,CAAC;QAC/BtF,MAAM,CAACvD,IAAI,CAAElG,SAAS,CAACgU,QAAQ,CAAE4T,MAAM,CAACne,MAAM,CAAEsF,CAAC,CAAG,CAAE,CAAC;QACvDtF,MAAM,CAACvD,IAAI,CAAElG,SAAS,CAACgU,QAAQ,CAAE6T,MAAM,CAACpe,MAAM,CAAEsF,CAAC,CAAG,CAAE,CAAC;QACvDtF,MAAM,CAACvD,IAAI,CAAElG,SAAS,CAACgU,QAAQ,CAAE8T,MAAM,CAACre,MAAM,CAAEsF,CAAC,CAAG,CAAE,CAAC;MAExD;IAED;IAEA,OAAO,CAAEuU,KAAK,EAAE7Z,MAAM,CAAE;EAEzB;AAED;;AAEA;AACA,MAAMzF,UAAU,CAAC;EAEhBglB,WAAWA,CAAA,EAAG;IAEb,OAAO,IAAI,CAACC,SAAS,CAAE,IAAI,CAACC,aAAa,GAAG,CAAC,CAAE;EAEhD;EAEAC,cAAcA,CAAA,EAAG;IAEhB,OAAO,IAAI,CAACF,SAAS,CAAE,IAAI,CAACC,aAAa,GAAG,CAAC,CAAE;EAEhD;EAEAE,cAAcA,CAAA,EAAG;IAEhB,OAAO,IAAI,CAACC,WAAW;EAExB;EAEAC,SAASA,CAAEhZ,IAAI,EAAG;IAEjB,IAAI,CAAC2Y,SAAS,CAAC/iB,IAAI,CAAEoK,IAAK,CAAC;IAC3B,IAAI,CAAC4Y,aAAa,IAAI,CAAC;EAExB;EAEAK,QAAQA,CAAA,EAAG;IAEV,IAAI,CAACN,SAAS,CAACzhB,GAAG,CAAC,CAAC;IACpB,IAAI,CAAC0hB,aAAa,IAAI,CAAC;EAExB;EAEAM,cAAcA,CAAE5C,GAAG,EAAE9d,IAAI,EAAG;IAE3B,IAAI,CAACugB,WAAW,GAAGzC,GAAG;IACtB,IAAI,CAAC6C,eAAe,GAAG3gB,IAAI;EAE5B;EAEA3F,KAAKA,CAAEumB,IAAI,EAAG;IAEb,IAAI,CAACR,aAAa,GAAG,CAAC;IAEtB,IAAI,CAACS,QAAQ,GAAG,IAAIC,OAAO,CAAC,CAAC;IAC7B,IAAI,CAACX,SAAS,GAAG,EAAE;IACnB,IAAI,CAACI,WAAW,GAAG,EAAE;IACrB,IAAI,CAACI,eAAe,GAAG,EAAE;IAEzB,MAAMjnB,KAAK,GAAG,IAAI;IAElB,MAAM+E,KAAK,GAAGmiB,IAAI,CAACniB,KAAK,CAAE,SAAU,CAAC;IAErCA,KAAK,CAACjC,OAAO,CAAE,UAAWukB,IAAI,EAAE9a,CAAC,EAAG;MAEnC,MAAM+a,YAAY,GAAGD,IAAI,CAAC5G,KAAK,CAAE,WAAY,CAAC;MAC9C,MAAM8G,UAAU,GAAGF,IAAI,CAAC5G,KAAK,CAAE,WAAY,CAAC;MAE5C,IAAK6G,YAAY,IAAIC,UAAU,EAAG;MAElC,MAAMC,cAAc,GAAGH,IAAI,CAAC5G,KAAK,CAAE,OAAO,GAAGzgB,KAAK,CAAC0mB,aAAa,GAAG,eAAe,EAAE,EAAG,CAAC;MACxF,MAAMe,aAAa,GAAGJ,IAAI,CAAC5G,KAAK,CAAE,OAAO,GAAKzgB,KAAK,CAAC0mB,aAAe,GAAG,4BAA6B,CAAC;MACpG,MAAMgB,QAAQ,GAAGL,IAAI,CAAC5G,KAAK,CAAE,OAAO,IAAKzgB,KAAK,CAAC0mB,aAAa,GAAG,CAAC,CAAE,GAAG,IAAK,CAAC;MAE3E,IAAKc,cAAc,EAAG;QAErBxnB,KAAK,CAAC2nB,cAAc,CAAEN,IAAI,EAAEG,cAAe,CAAC;MAE7C,CAAC,MAAM,IAAKC,aAAa,EAAG;QAE3BznB,KAAK,CAAC4nB,iBAAiB,CAAEP,IAAI,EAAEI,aAAa,EAAE1iB,KAAK,CAAE,EAAGwH,CAAC,CAAG,CAAC;MAE9D,CAAC,MAAM,IAAKmb,QAAQ,EAAG;QAEtB1nB,KAAK,CAAC+mB,QAAQ,CAAC,CAAC;MAEjB,CAAC,MAAM,IAAKM,IAAI,CAAC5G,KAAK,CAAE,WAAY,CAAC,EAAG;QAEvC;QACA;QACAzgB,KAAK,CAAC6nB,0BAA0B,CAAER,IAAK,CAAC;MAEzC;IAED,CAAE,CAAC;IAEH,OAAO,IAAI,CAACF,QAAQ;EAErB;EAEAQ,cAAcA,CAAEN,IAAI,EAAES,QAAQ,EAAG;IAEhC,MAAMC,QAAQ,GAAGD,QAAQ,CAAE,CAAC,CAAE,CAACE,IAAI,CAAC,CAAC,CAACC,OAAO,CAAE,IAAI,EAAE,EAAG,CAAC,CAACA,OAAO,CAAE,IAAI,EAAE,EAAG,CAAC;IAE7E,MAAMC,SAAS,GAAGJ,QAAQ,CAAE,CAAC,CAAE,CAAC/iB,KAAK,CAAE,GAAI,CAAC,CAACoF,GAAG,CAAE,UAAWqF,IAAI,EAAG;MAEnE,OAAOA,IAAI,CAACwY,IAAI,CAAC,CAAC,CAACC,OAAO,CAAE,IAAI,EAAE,EAAG,CAAC,CAACA,OAAO,CAAE,IAAI,EAAE,EAAG,CAAC;IAE3D,CAAE,CAAC;IAEH,MAAMna,IAAI,GAAG;MAAExH,IAAI,EAAEyhB;IAAS,CAAC;IAC/B,MAAMI,KAAK,GAAG,IAAI,CAACC,aAAa,CAAEF,SAAU,CAAC;IAE7C,MAAMG,WAAW,GAAG,IAAI,CAAC1B,cAAc,CAAC,CAAC;;IAEzC;IACA,IAAK,IAAI,CAACD,aAAa,KAAK,CAAC,EAAG;MAE/B,IAAI,CAACS,QAAQ,CAACzZ,GAAG,CAAEqa,QAAQ,EAAEja,IAAK,CAAC;IAEpC,CAAC,MAAM;MAAE;;MAER;MACA,IAAKia,QAAQ,IAAIM,WAAW,EAAG;QAE9B;QACA,IAAKN,QAAQ,KAAK,UAAU,EAAG;UAE9BM,WAAW,CAACzT,QAAQ,CAAClR,IAAI,CAAEoK,IAAK,CAAC;QAElC,CAAC,MAAM,IAAKua,WAAW,CAAEN,QAAQ,CAAE,CAAC7jB,EAAE,KAAKY,SAAS,EAAG;UAEtDujB,WAAW,CAAEN,QAAQ,CAAE,GAAG,CAAC,CAAC;UAC5BM,WAAW,CAAEN,QAAQ,CAAE,CAAEM,WAAW,CAAEN,QAAQ,CAAE,CAAC7jB,EAAE,CAAE,GAAGmkB,WAAW,CAAEN,QAAQ,CAAE;QAEhF;QAEA,IAAKI,KAAK,CAACjkB,EAAE,KAAK,EAAE,EAAGmkB,WAAW,CAAEN,QAAQ,CAAE,CAAEI,KAAK,CAACjkB,EAAE,CAAE,GAAG4J,IAAI;MAElE,CAAC,MAAM,IAAK,OAAOqa,KAAK,CAACjkB,EAAE,KAAK,QAAQ,EAAG;QAE1CmkB,WAAW,CAAEN,QAAQ,CAAE,GAAG,CAAC,CAAC;QAC5BM,WAAW,CAAEN,QAAQ,CAAE,CAAEI,KAAK,CAACjkB,EAAE,CAAE,GAAG4J,IAAI;MAE3C,CAAC,MAAM,IAAKia,QAAQ,KAAK,cAAc,EAAG;QAEzC,IAAKA,QAAQ,KAAK,UAAU,EAAGM,WAAW,CAAEN,QAAQ,CAAE,GAAG,CAAEja,IAAI,CAAE,CAAC,KAC7Dua,WAAW,CAAEN,QAAQ,CAAE,GAAGja,IAAI;MAEpC;IAED;IAEA,IAAK,OAAOqa,KAAK,CAACjkB,EAAE,KAAK,QAAQ,EAAG4J,IAAI,CAAC5J,EAAE,GAAGikB,KAAK,CAACjkB,EAAE;IACtD,IAAKikB,KAAK,CAAC7hB,IAAI,KAAK,EAAE,EAAGwH,IAAI,CAACvH,QAAQ,GAAG4hB,KAAK,CAAC7hB,IAAI;IACnD,IAAK6hB,KAAK,CAAC5iB,IAAI,KAAK,EAAE,EAAGuI,IAAI,CAAC3C,QAAQ,GAAGgd,KAAK,CAAC5iB,IAAI;IAEnD,IAAI,CAACuhB,SAAS,CAAEhZ,IAAK,CAAC;EAEvB;EAEAsa,aAAaA,CAAED,KAAK,EAAG;IAEtB,IAAIjkB,EAAE,GAAGikB,KAAK,CAAE,CAAC,CAAE;IAEnB,IAAKA,KAAK,CAAE,CAAC,CAAE,KAAK,EAAE,EAAG;MAExBjkB,EAAE,GAAGC,QAAQ,CAAEgkB,KAAK,CAAE,CAAC,CAAG,CAAC;MAE3B,IAAK1J,KAAK,CAAEva,EAAG,CAAC,EAAG;QAElBA,EAAE,GAAGikB,KAAK,CAAE,CAAC,CAAE;MAEhB;IAED;IAEA,IAAI7hB,IAAI,GAAG,EAAE;MAAEf,IAAI,GAAG,EAAE;IAExB,IAAK4iB,KAAK,CAAC1gB,MAAM,GAAG,CAAC,EAAG;MAEvBnB,IAAI,GAAG6hB,KAAK,CAAE,CAAC,CAAE,CAACF,OAAO,CAAE,UAAU,EAAE,EAAG,CAAC;MAC3C1iB,IAAI,GAAG4iB,KAAK,CAAE,CAAC,CAAE;IAElB;IAEA,OAAO;MAAEjkB,EAAE,EAAEA,EAAE;MAAEoC,IAAI,EAAEA,IAAI;MAAEf,IAAI,EAAEA;IAAK,CAAC;EAE1C;EAEAqiB,iBAAiBA,CAAEP,IAAI,EAAES,QAAQ,EAAEQ,WAAW,EAAG;IAEhD,IAAIC,QAAQ,GAAGT,QAAQ,CAAE,CAAC,CAAE,CAACG,OAAO,CAAE,IAAI,EAAE,EAAG,CAAC,CAACA,OAAO,CAAE,IAAI,EAAE,EAAG,CAAC,CAACD,IAAI,CAAC,CAAC;IAC3E,IAAIQ,SAAS,GAAGV,QAAQ,CAAE,CAAC,CAAE,CAACG,OAAO,CAAE,IAAI,EAAE,EAAG,CAAC,CAACA,OAAO,CAAE,IAAI,EAAE,EAAG,CAAC,CAACD,IAAI,CAAC,CAAC;;IAE5E;IACA;IACA;IACA,IAAKO,QAAQ,KAAK,SAAS,IAAIC,SAAS,KAAK,GAAG,EAAG;MAElDA,SAAS,GAAGF,WAAW,CAACL,OAAO,CAAE,IAAI,EAAE,EAAG,CAAC,CAACA,OAAO,CAAE,IAAI,EAAE,EAAG,CAAC,CAACD,IAAI,CAAC,CAAC;IAEvE;IAEA,MAAMK,WAAW,GAAG,IAAI,CAAC1B,cAAc,CAAC,CAAC;IACzC,MAAM8B,UAAU,GAAGJ,WAAW,CAAC/hB,IAAI;IAEnC,IAAKmiB,UAAU,KAAK,cAAc,EAAG;MAEpC,IAAI,CAACC,wBAAwB,CAAErB,IAAI,EAAEkB,QAAQ,EAAEC,SAAU,CAAC;MAC1D;IAED;;IAEA;IACA,IAAKD,QAAQ,KAAK,GAAG,EAAG;MAEvB,MAAMI,SAAS,GAAGH,SAAS,CAACzjB,KAAK,CAAE,GAAI,CAAC,CAACK,KAAK,CAAE,CAAE,CAAC;MACnD,MAAMwjB,IAAI,GAAGzkB,QAAQ,CAAEwkB,SAAS,CAAE,CAAC,CAAG,CAAC;MACvC,MAAME,EAAE,GAAG1kB,QAAQ,CAAEwkB,SAAS,CAAE,CAAC,CAAG,CAAC;MAErC,IAAIG,IAAI,GAAGN,SAAS,CAACzjB,KAAK,CAAE,GAAI,CAAC,CAACK,KAAK,CAAE,CAAE,CAAC;MAE5C0jB,IAAI,GAAGA,IAAI,CAAC3e,GAAG,CAAE,UAAW4e,IAAI,EAAG;QAElC,OAAOA,IAAI,CAACf,IAAI,CAAC,CAAC,CAACC,OAAO,CAAE,IAAI,EAAE,EAAG,CAAC;MAEvC,CAAE,CAAC;MAEHM,QAAQ,GAAG,aAAa;MACxBC,SAAS,GAAG,CAAEI,IAAI,EAAEC,EAAE,CAAE;MACxBG,MAAM,CAAER,SAAS,EAAEM,IAAK,CAAC;MAEzB,IAAKT,WAAW,CAAEE,QAAQ,CAAE,KAAKzjB,SAAS,EAAG;QAE5CujB,WAAW,CAAEE,QAAQ,CAAE,GAAG,EAAE;MAE7B;IAED;;IAEA;IACA,IAAKA,QAAQ,KAAK,MAAM,EAAGF,WAAW,CAACnkB,EAAE,GAAGskB,SAAS;;IAErD;IACA,IAAKD,QAAQ,IAAIF,WAAW,IAAIxT,KAAK,CAACC,OAAO,CAAEuT,WAAW,CAAEE,QAAQ,CAAG,CAAC,EAAG;MAE1EF,WAAW,CAAEE,QAAQ,CAAE,CAAC7kB,IAAI,CAAE8kB,SAAU,CAAC;IAE1C,CAAC,MAAM;MAEN,IAAKD,QAAQ,KAAK,GAAG,EAAGF,WAAW,CAAEE,QAAQ,CAAE,GAAGC,SAAS,CAAC,KACvDH,WAAW,CAACnc,CAAC,GAAGsc,SAAS;IAE/B;IAEA,IAAI,CAACxB,cAAc,CAAEqB,WAAW,EAAEE,QAAS,CAAC;;IAE5C;IACA,IAAKA,QAAQ,KAAK,GAAG,IAAIC,SAAS,CAACpjB,KAAK,CAAE,CAAE,CAAE,CAAC,KAAK,GAAG,EAAG;MAEzDijB,WAAW,CAACnc,CAAC,GAAG+c,gBAAgB,CAAET,SAAU,CAAC;IAE9C;EAED;EAEAX,0BAA0BA,CAAER,IAAI,EAAG;IAElC,MAAMgB,WAAW,GAAG,IAAI,CAAC1B,cAAc,CAAC,CAAC;IAEzC0B,WAAW,CAACnc,CAAC,IAAImb,IAAI;;IAErB;IACA;IACA,IAAKA,IAAI,CAACjiB,KAAK,CAAE,CAAE,CAAE,CAAC,KAAK,GAAG,EAAG;MAEhCijB,WAAW,CAACnc,CAAC,GAAG+c,gBAAgB,CAAEZ,WAAW,CAACnc,CAAE,CAAC;IAElD;EAED;;EAEA;EACAwc,wBAAwBA,CAAErB,IAAI,EAAEkB,QAAQ,EAAEC,SAAS,EAAG;IAErD;IACA;IACA;IACA;IACA,MAAMU,KAAK,GAAGV,SAAS,CAACzjB,KAAK,CAAE,IAAK,CAAC,CAACoF,GAAG,CAAE,UAAWgf,IAAI,EAAG;MAE5D,OAAOA,IAAI,CAACnB,IAAI,CAAC,CAAC,CAACC,OAAO,CAAE,KAAK,EAAE,EAAG,CAAC,CAACA,OAAO,CAAE,IAAI,EAAE,GAAI,CAAC;IAE7D,CAAE,CAAC;IAEH,MAAMmB,aAAa,GAAGF,KAAK,CAAE,CAAC,CAAE;IAChC,MAAMG,cAAc,GAAGH,KAAK,CAAE,CAAC,CAAE;IACjC,MAAMI,cAAc,GAAGJ,KAAK,CAAE,CAAC,CAAE;IACjC,MAAMK,aAAa,GAAGL,KAAK,CAAE,CAAC,CAAE;IAChC,IAAIM,cAAc,GAAGN,KAAK,CAAE,CAAC,CAAE;;IAE/B;IACA,QAASG,cAAc;MAEtB,KAAK,KAAK;MACV,KAAK,MAAM;MACX,KAAK,MAAM;MACX,KAAK,WAAW;MAChB,KAAK,QAAQ;MACb,KAAK,QAAQ;MACb,KAAK,aAAa;QACjBG,cAAc,GAAGpgB,UAAU,CAAEogB,cAAe,CAAC;QAC7C;MAED,KAAK,OAAO;MACZ,KAAK,UAAU;MACf,KAAK,UAAU;MACf,KAAK,iBAAiB;MACtB,KAAK,cAAc;MACnB,KAAK,aAAa;QACjBA,cAAc,GAAGP,gBAAgB,CAAEO,cAAe,CAAC;QACnD;IAEF;;IAEA;IACA,IAAI,CAAChD,WAAW,CAAC,CAAC,CAAE4C,aAAa,CAAE,GAAG;MAErC,MAAM,EAAEC,cAAc;MACtB,OAAO,EAAEC,cAAc;MACvB,MAAM,EAAEC,aAAa;MACrB,OAAO,EAAEC;IAEV,CAAC;IAED,IAAI,CAACxC,cAAc,CAAE,IAAI,CAACR,WAAW,CAAC,CAAC,EAAE4C,aAAc,CAAC;EAEzD;AAED;;AAEA;AACA,MAAMloB,YAAY,CAAC;EAElBP,KAAKA,CAAED,MAAM,EAAG;IAEf,MAAM+oB,MAAM,GAAG,IAAIC,YAAY,CAAEhpB,MAAO,CAAC;IACzC+oB,MAAM,CAACE,IAAI,CAAE,EAAG,CAAC,CAAC,CAAC;;IAEnB,MAAMC,OAAO,GAAGH,MAAM,CAACI,SAAS,CAAC,CAAC;IAElC,IAAKD,OAAO,GAAG,IAAI,EAAG;MAErB,MAAM,IAAItoB,KAAK,CAAE,2DAA2D,GAAGsoB,OAAQ,CAAC;IAEzF;IAEA,MAAMzC,QAAQ,GAAG,IAAIC,OAAO,CAAC,CAAC;IAE9B,OAAQ,CAAE,IAAI,CAAC0C,YAAY,CAAEL,MAAO,CAAC,EAAG;MAEvC,MAAM3b,IAAI,GAAG,IAAI,CAACic,SAAS,CAAEN,MAAM,EAAEG,OAAQ,CAAC;MAC9C,IAAK9b,IAAI,KAAK,IAAI,EAAGqZ,QAAQ,CAACzZ,GAAG,CAAEI,IAAI,CAACxH,IAAI,EAAEwH,IAAK,CAAC;IAErD;IAEA,OAAOqZ,QAAQ;EAEhB;;EAEA;EACA2C,YAAYA,CAAEL,MAAM,EAAG;IAEtB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAKA,MAAM,CAACO,IAAI,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAG;MAE/B,OAAO,CAAIP,MAAM,CAACQ,SAAS,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,GAAK,CAAE,GAAG,KAAMR,MAAM,CAACO,IAAI,CAAC,CAAC;IAEtE,CAAC,MAAM;MAEN,OAAOP,MAAM,CAACQ,SAAS,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,IAAIR,MAAM,CAACO,IAAI,CAAC,CAAC;IAEtD;EAED;;EAEA;EACAD,SAASA,CAAEN,MAAM,EAAEG,OAAO,EAAG;IAE5B,MAAM9b,IAAI,GAAG,CAAC,CAAC;;IAEf;IACA,MAAMoc,SAAS,GAAKN,OAAO,IAAI,IAAI,GAAKH,MAAM,CAACU,SAAS,CAAC,CAAC,GAAGV,MAAM,CAACI,SAAS,CAAC,CAAC;IAC/E,MAAMO,aAAa,GAAKR,OAAO,IAAI,IAAI,GAAKH,MAAM,CAACU,SAAS,CAAC,CAAC,GAAGV,MAAM,CAACI,SAAS,CAAC,CAAC;IAEjFD,OAAO,IAAI,IAAI,GAAKH,MAAM,CAACU,SAAS,CAAC,CAAC,GAAGV,MAAM,CAACI,SAAS,CAAC,CAAC,CAAC,CAAC;;IAE/D,MAAMQ,OAAO,GAAGZ,MAAM,CAACa,QAAQ,CAAC,CAAC;IACjC,MAAMhkB,IAAI,GAAGmjB,MAAM,CAACc,SAAS,CAAEF,OAAQ,CAAC;;IAExC;IACA,IAAKH,SAAS,KAAK,CAAC,EAAG,OAAO,IAAI;IAElC,MAAMM,YAAY,GAAG,EAAE;IAEvB,KAAM,IAAIje,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6d,aAAa,EAAE7d,CAAC,EAAG,EAAG;MAE1Cie,YAAY,CAAC9mB,IAAI,CAAE,IAAI,CAAC+mB,aAAa,CAAEhB,MAAO,CAAE,CAAC;IAElD;;IAEA;IACA,MAAMvlB,EAAE,GAAGsmB,YAAY,CAAC/iB,MAAM,GAAG,CAAC,GAAG+iB,YAAY,CAAE,CAAC,CAAE,GAAG,EAAE;IAC3D,MAAMjkB,QAAQ,GAAGikB,YAAY,CAAC/iB,MAAM,GAAG,CAAC,GAAG+iB,YAAY,CAAE,CAAC,CAAE,GAAG,EAAE;IACjE,MAAMrf,QAAQ,GAAGqf,YAAY,CAAC/iB,MAAM,GAAG,CAAC,GAAG+iB,YAAY,CAAE,CAAC,CAAE,GAAG,EAAE;;IAEjE;IACA;IACA1c,IAAI,CAAC4c,cAAc,GAAKN,aAAa,KAAK,CAAC,IAAIX,MAAM,CAACQ,SAAS,CAAC,CAAC,KAAKC,SAAS,GAAK,IAAI,GAAG,KAAK;IAEhG,OAAQA,SAAS,GAAGT,MAAM,CAACQ,SAAS,CAAC,CAAC,EAAG;MAExC,MAAMU,OAAO,GAAG,IAAI,CAACZ,SAAS,CAAEN,MAAM,EAAEG,OAAQ,CAAC;MAEjD,IAAKe,OAAO,KAAK,IAAI,EAAG,IAAI,CAACC,YAAY,CAAEtkB,IAAI,EAAEwH,IAAI,EAAE6c,OAAQ,CAAC;IAEjE;IAEA7c,IAAI,CAAC0c,YAAY,GAAGA,YAAY,CAAC,CAAC;;IAElC,IAAK,OAAOtmB,EAAE,KAAK,QAAQ,EAAG4J,IAAI,CAAC5J,EAAE,GAAGA,EAAE;IAC1C,IAAKqC,QAAQ,KAAK,EAAE,EAAGuH,IAAI,CAACvH,QAAQ,GAAGA,QAAQ;IAC/C,IAAK4E,QAAQ,KAAK,EAAE,EAAG2C,IAAI,CAAC3C,QAAQ,GAAGA,QAAQ;IAC/C,IAAK7E,IAAI,KAAK,EAAE,EAAGwH,IAAI,CAACxH,IAAI,GAAGA,IAAI;IAEnC,OAAOwH,IAAI;EAEZ;EAEA8c,YAAYA,CAAEtkB,IAAI,EAAEwH,IAAI,EAAE6c,OAAO,EAAG;IAEnC;IACA,IAAKA,OAAO,CAACD,cAAc,KAAK,IAAI,EAAG;MAEtC,MAAM7jB,KAAK,GAAG8jB,OAAO,CAACH,YAAY,CAAE,CAAC,CAAE;MAEvC,IAAK3V,KAAK,CAACC,OAAO,CAAEjO,KAAM,CAAC,EAAG;QAE7BiH,IAAI,CAAE6c,OAAO,CAACrkB,IAAI,CAAE,GAAGqkB,OAAO;QAE9BA,OAAO,CAACze,CAAC,GAAGrF,KAAK;MAElB,CAAC,MAAM;QAENiH,IAAI,CAAE6c,OAAO,CAACrkB,IAAI,CAAE,GAAGO,KAAK;MAE7B;IAED,CAAC,MAAM,IAAKP,IAAI,KAAK,aAAa,IAAIqkB,OAAO,CAACrkB,IAAI,KAAK,GAAG,EAAG;MAE5D,MAAMZ,KAAK,GAAG,EAAE;MAEhBilB,OAAO,CAACH,YAAY,CAAC1nB,OAAO,CAAE,UAAWglB,QAAQ,EAAEvb,CAAC,EAAG;QAEtD;QACA,IAAKA,CAAC,KAAK,CAAC,EAAG7G,KAAK,CAAChC,IAAI,CAAEokB,QAAS,CAAC;MAEtC,CAAE,CAAC;MAEH,IAAKha,IAAI,CAACxO,WAAW,KAAKwF,SAAS,EAAG;QAErCgJ,IAAI,CAACxO,WAAW,GAAG,EAAE;MAEtB;MAEAwO,IAAI,CAACxO,WAAW,CAACoE,IAAI,CAAEgC,KAAM,CAAC;IAE/B,CAAC,MAAM,IAAKilB,OAAO,CAACrkB,IAAI,KAAK,cAAc,EAAG;MAE7C,MAAMsc,IAAI,GAAGD,MAAM,CAACC,IAAI,CAAE+H,OAAQ,CAAC;MAEnC/H,IAAI,CAAC9f,OAAO,CAAE,UAAW6c,GAAG,EAAG;QAE9B7R,IAAI,CAAE6R,GAAG,CAAE,GAAGgL,OAAO,CAAEhL,GAAG,CAAE;MAE7B,CAAE,CAAC;IAEJ,CAAC,MAAM,IAAKrZ,IAAI,KAAK,cAAc,IAAIqkB,OAAO,CAACrkB,IAAI,KAAK,GAAG,EAAG;MAE7D,IAAI8iB,aAAa,GAAGuB,OAAO,CAACH,YAAY,CAAE,CAAC,CAAE;MAC7C,IAAInB,cAAc,GAAGsB,OAAO,CAACH,YAAY,CAAE,CAAC,CAAE;MAC9C,MAAMlB,cAAc,GAAGqB,OAAO,CAACH,YAAY,CAAE,CAAC,CAAE;MAChD,MAAMjB,aAAa,GAAGoB,OAAO,CAACH,YAAY,CAAE,CAAC,CAAE;MAC/C,IAAIhB,cAAc;MAElB,IAAKJ,aAAa,CAAC1hB,OAAO,CAAE,MAAO,CAAC,KAAK,CAAC,EAAG0hB,aAAa,GAAGA,aAAa,CAACnB,OAAO,CAAE,MAAM,EAAE,MAAO,CAAC;MACpG,IAAKoB,cAAc,CAAC3hB,OAAO,CAAE,MAAO,CAAC,KAAK,CAAC,EAAG2hB,cAAc,GAAGA,cAAc,CAACpB,OAAO,CAAE,MAAM,EAAE,MAAO,CAAC;MAEvG,IAAKoB,cAAc,KAAK,OAAO,IAAIA,cAAc,KAAK,UAAU,IAAIA,cAAc,KAAK,QAAQ,IAAIA,cAAc,KAAK,UAAU,IAAIA,cAAc,CAAC3hB,OAAO,CAAE,MAAO,CAAC,KAAK,CAAC,EAAG;QAE5K8hB,cAAc,GAAG,CAChBmB,OAAO,CAACH,YAAY,CAAE,CAAC,CAAE,EACzBG,OAAO,CAACH,YAAY,CAAE,CAAC,CAAE,EACzBG,OAAO,CAACH,YAAY,CAAE,CAAC,CAAE,CACzB;MAEF,CAAC,MAAM;QAENhB,cAAc,GAAGmB,OAAO,CAACH,YAAY,CAAE,CAAC,CAAE;MAE3C;;MAEA;MACA1c,IAAI,CAAEsb,aAAa,CAAE,GAAG;QAEvB,MAAM,EAAEC,cAAc;QACtB,OAAO,EAAEC,cAAc;QACvB,MAAM,EAAEC,aAAa;QACrB,OAAO,EAAEC;MAEV,CAAC;IAEF,CAAC,MAAM,IAAK1b,IAAI,CAAE6c,OAAO,CAACrkB,IAAI,CAAE,KAAKxB,SAAS,EAAG;MAEhD,IAAK,OAAO6lB,OAAO,CAACzmB,EAAE,KAAK,QAAQ,EAAG;QAErC4J,IAAI,CAAE6c,OAAO,CAACrkB,IAAI,CAAE,GAAG,CAAC,CAAC;QACzBwH,IAAI,CAAE6c,OAAO,CAACrkB,IAAI,CAAE,CAAEqkB,OAAO,CAACzmB,EAAE,CAAE,GAAGymB,OAAO;MAE7C,CAAC,MAAM;QAEN7c,IAAI,CAAE6c,OAAO,CAACrkB,IAAI,CAAE,GAAGqkB,OAAO;MAE/B;IAED,CAAC,MAAM;MAEN,IAAKA,OAAO,CAACrkB,IAAI,KAAK,UAAU,EAAG;QAElC,IAAK,CAAEuO,KAAK,CAACC,OAAO,CAAEhH,IAAI,CAAE6c,OAAO,CAACrkB,IAAI,CAAG,CAAC,EAAG;UAE9CwH,IAAI,CAAE6c,OAAO,CAACrkB,IAAI,CAAE,GAAG,CAAEwH,IAAI,CAAE6c,OAAO,CAACrkB,IAAI,CAAE,CAAE;QAEhD;QAEAwH,IAAI,CAAE6c,OAAO,CAACrkB,IAAI,CAAE,CAAC5C,IAAI,CAAEinB,OAAQ,CAAC;MAErC,CAAC,MAAM,IAAK7c,IAAI,CAAE6c,OAAO,CAACrkB,IAAI,CAAE,CAAEqkB,OAAO,CAACzmB,EAAE,CAAE,KAAKY,SAAS,EAAG;QAE9DgJ,IAAI,CAAE6c,OAAO,CAACrkB,IAAI,CAAE,CAAEqkB,OAAO,CAACzmB,EAAE,CAAE,GAAGymB,OAAO;MAE7C;IAED;EAED;EAEAF,aAAaA,CAAEhB,MAAM,EAAG;IAEvB,MAAMlkB,IAAI,GAAGkkB,MAAM,CAACc,SAAS,CAAE,CAAE,CAAC;IAClC,IAAI9iB,MAAM;IAEV,QAASlC,IAAI;MAEZ,KAAK,GAAG;QACP,OAAOkkB,MAAM,CAACoB,UAAU,CAAC,CAAC;MAE3B,KAAK,GAAG;QACP,OAAOpB,MAAM,CAACqB,UAAU,CAAC,CAAC;MAE3B,KAAK,GAAG;QACP,OAAOrB,MAAM,CAACsB,UAAU,CAAC,CAAC;MAE3B,KAAK,GAAG;QACP,OAAOtB,MAAM,CAACuB,QAAQ,CAAC,CAAC;MAEzB,KAAK,GAAG;QACP,OAAOvB,MAAM,CAACwB,QAAQ,CAAC,CAAC;MAEzB,KAAK,GAAG;QACPxjB,MAAM,GAAGgiB,MAAM,CAACI,SAAS,CAAC,CAAC;QAC3B,OAAOJ,MAAM,CAACyB,cAAc,CAAEzjB,MAAO,CAAC;MAEvC,KAAK,GAAG;QACPA,MAAM,GAAGgiB,MAAM,CAACI,SAAS,CAAC,CAAC;QAC3B,OAAOJ,MAAM,CAACc,SAAS,CAAE9iB,MAAO,CAAC;MAElC,KAAK,GAAG;QACP,OAAOgiB,MAAM,CAAC0B,QAAQ,CAAC,CAAC;MAEzB,KAAK,GAAG;MACR,KAAK,GAAG;MACR,KAAK,GAAG;MACR,KAAK,GAAG;MACR,KAAK,GAAG;MACR,KAAK,GAAG;QAEP,MAAMC,WAAW,GAAG3B,MAAM,CAACI,SAAS,CAAC,CAAC;QACtC,MAAMwB,QAAQ,GAAG5B,MAAM,CAACI,SAAS,CAAC,CAAC,CAAC,CAAC;QACrC,MAAMyB,gBAAgB,GAAG7B,MAAM,CAACI,SAAS,CAAC,CAAC;QAE3C,IAAKwB,QAAQ,KAAK,CAAC,EAAG;UAErB,QAAS9lB,IAAI;YAEZ,KAAK,GAAG;YACR,KAAK,GAAG;cACP,OAAOkkB,MAAM,CAAC8B,eAAe,CAAEH,WAAY,CAAC;YAE7C,KAAK,GAAG;cACP,OAAO3B,MAAM,CAAC+B,eAAe,CAAEJ,WAAY,CAAC;YAE7C,KAAK,GAAG;cACP,OAAO3B,MAAM,CAACgC,eAAe,CAAEL,WAAY,CAAC;YAE7C,KAAK,GAAG;cACP,OAAO3B,MAAM,CAACiC,aAAa,CAAEN,WAAY,CAAC;YAE3C,KAAK,GAAG;cACP,OAAO3B,MAAM,CAACkC,aAAa,CAAEP,WAAY,CAAC;UAE5C;QAED;QAEA,MAAMlR,IAAI,GAAG/a,MAAM,CAACysB,UAAU,CAAE,IAAIjmB,UAAU,CAAE8jB,MAAM,CAACyB,cAAc,CAAEI,gBAAiB,CAAE,CAAE,CAAC;QAC7F,MAAMO,OAAO,GAAG,IAAInC,YAAY,CAAExP,IAAI,CAACxZ,MAAO,CAAC;QAE/C,QAAS6E,IAAI;UAEZ,KAAK,GAAG;UACR,KAAK,GAAG;YACP,OAAOsmB,OAAO,CAACN,eAAe,CAAEH,WAAY,CAAC;UAE9C,KAAK,GAAG;YACP,OAAOS,OAAO,CAACL,eAAe,CAAEJ,WAAY,CAAC;UAE9C,KAAK,GAAG;YACP,OAAOS,OAAO,CAACJ,eAAe,CAAEL,WAAY,CAAC;UAE9C,KAAK,GAAG;YACP,OAAOS,OAAO,CAACH,aAAa,CAAEN,WAAY,CAAC;UAE5C,KAAK,GAAG;YACP,OAAOS,OAAO,CAACF,aAAa,CAAEP,WAAY,CAAC;QAE7C;QAEA;MAAO;;MAER;QACC,MAAM,IAAI9pB,KAAK,CAAE,yCAAyC,GAAGiE,IAAK,CAAC;IAErE;EAED;AAED;AAEA,MAAMmkB,YAAY,CAAC;EAElBjqB,WAAWA,CAAEiB,MAAM,EAAEorB,YAAY,EAAG;IAEnC,IAAI,CAACC,EAAE,GAAG,IAAIC,QAAQ,CAAEtrB,MAAO,CAAC;IAChC,IAAI,CAAC6G,MAAM,GAAG,CAAC;IACf,IAAI,CAACukB,YAAY,GAAKA,YAAY,KAAKhnB,SAAS,GAAKgnB,YAAY,GAAG,IAAI;IACxE,IAAI,CAACG,YAAY,GAAG,IAAIC,WAAW,CAAC,CAAC;EAEtC;EAEAjC,SAASA,CAAA,EAAG;IAEX,OAAO,IAAI,CAAC1iB,MAAM;EAEnB;EAEAyiB,IAAIA,CAAA,EAAG;IAEN,OAAO,IAAI,CAAC+B,EAAE,CAACrrB,MAAM,CAAC+D,UAAU;EAEjC;EAEAklB,IAAIA,CAAEliB,MAAM,EAAG;IAEd,IAAI,CAACF,MAAM,IAAIE,MAAM;EAEtB;;EAEA;EACA;EACA;EACAojB,UAAUA,CAAA,EAAG;IAEZ,OAAO,CAAE,IAAI,CAACP,QAAQ,CAAC,CAAC,GAAG,CAAC,MAAO,CAAC;EAErC;EAEAiB,eAAeA,CAAEvB,IAAI,EAAG;IAEvB,MAAM9d,CAAC,GAAG,EAAE;IAEZ,KAAM,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyd,IAAI,EAAEzd,CAAC,EAAG,EAAG;MAEjCL,CAAC,CAACxI,IAAI,CAAE,IAAI,CAACmnB,UAAU,CAAC,CAAE,CAAC;IAE5B;IAEA,OAAO3e,CAAC;EAET;EAEAoe,QAAQA,CAAA,EAAG;IAEV,MAAMzjB,KAAK,GAAG,IAAI,CAACklB,EAAE,CAACzB,QAAQ,CAAE,IAAI,CAAC/iB,MAAO,CAAC;IAC7C,IAAI,CAACA,MAAM,IAAI,CAAC;IAChB,OAAOV,KAAK;EAEb;EAEAskB,QAAQA,CAAA,EAAG;IAEV,MAAMtkB,KAAK,GAAG,IAAI,CAACklB,EAAE,CAACZ,QAAQ,CAAE,IAAI,CAAC5jB,MAAM,EAAE,IAAI,CAACukB,YAAa,CAAC;IAChE,IAAI,CAACvkB,MAAM,IAAI,CAAC;IAChB,OAAOV,KAAK;EAEb;EAEAmkB,QAAQA,CAAA,EAAG;IAEV,MAAMnkB,KAAK,GAAG,IAAI,CAACklB,EAAE,CAACf,QAAQ,CAAE,IAAI,CAACzjB,MAAM,EAAE,IAAI,CAACukB,YAAa,CAAC;IAChE,IAAI,CAACvkB,MAAM,IAAI,CAAC;IAChB,OAAOV,KAAK;EAEb;EAEA6kB,aAAaA,CAAE1B,IAAI,EAAG;IAErB,MAAM9d,CAAC,GAAG,EAAE;IAEZ,KAAM,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyd,IAAI,EAAEzd,CAAC,EAAG,EAAG;MAEjCL,CAAC,CAACxI,IAAI,CAAE,IAAI,CAACsnB,QAAQ,CAAC,CAAE,CAAC;IAE1B;IAEA,OAAO9e,CAAC;EAET;EAEA2d,SAASA,CAAA,EAAG;IAEX,MAAMhjB,KAAK,GAAG,IAAI,CAACklB,EAAE,CAAClC,SAAS,CAAE,IAAI,CAACtiB,MAAM,EAAE,IAAI,CAACukB,YAAa,CAAC;IACjE,IAAI,CAACvkB,MAAM,IAAI,CAAC;IAChB,OAAOV,KAAK;EAEb;;EAEA;EACA;EACA;EACA;EACA;EACAokB,QAAQA,CAAA,EAAG;IAEV,IAAIkB,GAAG,EAAEC,IAAI;IAEb,IAAK,IAAI,CAACN,YAAY,EAAG;MAExBK,GAAG,GAAG,IAAI,CAACtC,SAAS,CAAC,CAAC;MACtBuC,IAAI,GAAG,IAAI,CAACvC,SAAS,CAAC,CAAC;IAExB,CAAC,MAAM;MAENuC,IAAI,GAAG,IAAI,CAACvC,SAAS,CAAC,CAAC;MACvBsC,GAAG,GAAG,IAAI,CAACtC,SAAS,CAAC,CAAC;IAEvB;;IAEA;IACA,IAAKuC,IAAI,GAAG,UAAU,EAAG;MAExBA,IAAI,GAAG,CAAEA,IAAI,GAAG,UAAU;MAC1BD,GAAG,GAAG,CAAEA,GAAG,GAAG,UAAU;MAExB,IAAKA,GAAG,KAAK,UAAU,EAAGC,IAAI,GAAKA,IAAI,GAAG,CAAC,GAAK,UAAU;MAE1DD,GAAG,GAAKA,GAAG,GAAG,CAAC,GAAK,UAAU;MAE9B,OAAO,EAAIC,IAAI,GAAG,WAAW,GAAGD,GAAG,CAAE;IAEtC;IAEA,OAAOC,IAAI,GAAG,WAAW,GAAGD,GAAG;EAEhC;EAEAR,aAAaA,CAAE3B,IAAI,EAAG;IAErB,MAAM9d,CAAC,GAAG,EAAE;IAEZ,KAAM,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyd,IAAI,EAAEzd,CAAC,EAAG,EAAG;MAEjCL,CAAC,CAACxI,IAAI,CAAE,IAAI,CAACunB,QAAQ,CAAC,CAAE,CAAC;IAE1B;IAEA,OAAO/e,CAAC;EAET;;EAEA;EACAie,SAASA,CAAA,EAAG;IAEX,IAAIgC,GAAG,EAAEC,IAAI;IAEb,IAAK,IAAI,CAACN,YAAY,EAAG;MAExBK,GAAG,GAAG,IAAI,CAACtC,SAAS,CAAC,CAAC;MACtBuC,IAAI,GAAG,IAAI,CAACvC,SAAS,CAAC,CAAC;IAExB,CAAC,MAAM;MAENuC,IAAI,GAAG,IAAI,CAACvC,SAAS,CAAC,CAAC;MACvBsC,GAAG,GAAG,IAAI,CAACtC,SAAS,CAAC,CAAC;IAEvB;IAEA,OAAOuC,IAAI,GAAG,WAAW,GAAGD,GAAG;EAEhC;EAEApB,UAAUA,CAAA,EAAG;IAEZ,MAAMlkB,KAAK,GAAG,IAAI,CAACklB,EAAE,CAAChB,UAAU,CAAE,IAAI,CAACxjB,MAAM,EAAE,IAAI,CAACukB,YAAa,CAAC;IAClE,IAAI,CAACvkB,MAAM,IAAI,CAAC;IAChB,OAAOV,KAAK;EAEb;EAEA4kB,eAAeA,CAAEzB,IAAI,EAAG;IAEvB,MAAM9d,CAAC,GAAG,EAAE;IAEZ,KAAM,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyd,IAAI,EAAEzd,CAAC,EAAG,EAAG;MAEjCL,CAAC,CAACxI,IAAI,CAAE,IAAI,CAACqnB,UAAU,CAAC,CAAE,CAAC;IAE5B;IAEA,OAAO7e,CAAC;EAET;EAEA4e,UAAUA,CAAA,EAAG;IAEZ,MAAMjkB,KAAK,GAAG,IAAI,CAACklB,EAAE,CAACjB,UAAU,CAAE,IAAI,CAACvjB,MAAM,EAAE,IAAI,CAACukB,YAAa,CAAC;IAClE,IAAI,CAACvkB,MAAM,IAAI,CAAC;IAChB,OAAOV,KAAK;EAEb;EAEA2kB,eAAeA,CAAExB,IAAI,EAAG;IAEvB,MAAM9d,CAAC,GAAG,EAAE;IAEZ,KAAM,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyd,IAAI,EAAEzd,CAAC,EAAG,EAAG;MAEjCL,CAAC,CAACxI,IAAI,CAAE,IAAI,CAAConB,UAAU,CAAC,CAAE,CAAC;IAE5B;IAEA,OAAO5e,CAAC;EAET;EAEAgf,cAAcA,CAAElB,IAAI,EAAG;IAEtB,MAAMnjB,KAAK,GAAG,IAAI,CAACklB,EAAE,CAACrrB,MAAM,CAAC0E,KAAK,CAAE,IAAI,CAACmC,MAAM,EAAE,IAAI,CAACA,MAAM,GAAGyiB,IAAK,CAAC;IACrE,IAAI,CAACziB,MAAM,IAAIyiB,IAAI;IACnB,OAAOnjB,KAAK;EAEb;EAEA0jB,SAASA,CAAEP,IAAI,EAAG;IAEjB,MAAMhS,KAAK,GAAG,IAAI,CAACzQ,MAAM;IACzB,IAAI2E,CAAC,GAAG,IAAIvG,UAAU,CAAE,IAAI,CAAComB,EAAE,CAACrrB,MAAM,EAAEsX,KAAK,EAAEgS,IAAK,CAAC;IAErD,IAAI,CAACL,IAAI,CAAEK,IAAK,CAAC;IAEjB,MAAMqC,QAAQ,GAAGngB,CAAC,CAACxE,OAAO,CAAE,CAAE,CAAC;IAC/B,IAAK2kB,QAAQ,IAAI,CAAC,EAAGngB,CAAC,GAAG,IAAIvG,UAAU,CAAE,IAAI,CAAComB,EAAE,CAACrrB,MAAM,EAAEsX,KAAK,EAAEqU,QAAS,CAAC;IAE1E,OAAO,IAAI,CAACJ,YAAY,CAACK,MAAM,CAAEpgB,CAAE,CAAC;EAErC;AAED;;AAEA;AACA;AACA,MAAMkb,OAAO,CAAC;EAEb1Z,GAAGA,CAAEiS,GAAG,EAAEyE,GAAG,EAAG;IAEf,IAAI,CAAEzE,GAAG,CAAE,GAAGyE,GAAG;EAElB;AAED;;AAEA;;AAEA,SAASnjB,iBAAiBA,CAAEP,MAAM,EAAG;EAEpC,MAAM6rB,OAAO,GAAG,4CAA4C;EAE5D,OAAO7rB,MAAM,CAAC+D,UAAU,IAAI8nB,OAAO,CAAC9kB,MAAM,IAAI8kB,OAAO,KAAKnrB,0BAA0B,CAAEV,MAAM,EAAE,CAAC,EAAE6rB,OAAO,CAAC9kB,MAAO,CAAC;AAElH;AAEA,SAASpG,gBAAgBA,CAAE6lB,IAAI,EAAG;EAEjC,MAAMqF,OAAO,GAAG,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAE;EAE1H,IAAIC,MAAM,GAAG,CAAC;EAEd,SAASC,IAAIA,CAAEllB,MAAM,EAAG;IAEvB,MAAMkc,MAAM,GAAGyD,IAAI,CAAE3f,MAAM,GAAG,CAAC,CAAE;IACjC2f,IAAI,GAAGA,IAAI,CAAC9hB,KAAK,CAAEonB,MAAM,GAAGjlB,MAAO,CAAC;IACpCilB,MAAM,EAAG;IACT,OAAO/I,MAAM;EAEd;EAEA,KAAM,IAAIlX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGggB,OAAO,CAAC9kB,MAAM,EAAE,EAAG8E,CAAC,EAAG;IAE3C,MAAMmgB,GAAG,GAAGD,IAAI,CAAE,CAAE,CAAC;IACrB,IAAKC,GAAG,KAAKH,OAAO,CAAEhgB,CAAC,CAAE,EAAG;MAE3B,OAAO,KAAK;IAEb;EAED;EAEA,OAAO,IAAI;AAEZ;AAEA,SAAShL,aAAaA,CAAE2lB,IAAI,EAAG;EAE9B,MAAMyF,aAAa,GAAG,mBAAmB;EACzC,MAAMlM,KAAK,GAAGyG,IAAI,CAACzG,KAAK,CAAEkM,aAAc,CAAC;EAEzC,IAAKlM,KAAK,EAAG;IAEZ,MAAMmJ,OAAO,GAAGzlB,QAAQ,CAAEsc,KAAK,CAAE,CAAC,CAAG,CAAC;IACtC,OAAOmJ,OAAO;EAEf;EAEA,MAAM,IAAItoB,KAAK,CAAE,qEAAsE,CAAC;AAEzF;;AAEA;AACA,SAAS0f,uBAAuBA,CAAEgE,IAAI,EAAG;EAExC,OAAOA,IAAI,GAAG,WAAW;AAE1B;AAEA,MAAM4H,SAAS,GAAG,EAAE;;AAEpB;AACA,SAASzS,OAAOA,CAAEJ,kBAAkB,EAAEV,YAAY,EAAES,WAAW,EAAE+S,UAAU,EAAG;EAE7E,IAAI3T,KAAK;EAET,QAAS2T,UAAU,CAACtV,WAAW;IAE9B,KAAK,iBAAiB;MACrB2B,KAAK,GAAGa,kBAAkB;MAC1B;IACD,KAAK,WAAW;MACfb,KAAK,GAAGG,YAAY;MACpB;IACD,KAAK,WAAW;MACfH,KAAK,GAAGY,WAAW;MACnB;IACD,KAAK,SAAS;MACbZ,KAAK,GAAG2T,UAAU,CAAC/gB,OAAO,CAAE,CAAC,CAAE;MAC/B;IACD;MACCjL,OAAO,CAAC4E,IAAI,CAAE,kDAAkD,GAAGonB,UAAU,CAACtV,WAAY,CAAC;EAE7F;EAEA,IAAKsV,UAAU,CAACxP,aAAa,KAAK,eAAe,EAAGnE,KAAK,GAAG2T,UAAU,CAAC/gB,OAAO,CAAEoN,KAAK,CAAE;EAEvF,MAAM0P,IAAI,GAAG1P,KAAK,GAAG2T,UAAU,CAAClP,QAAQ;EACxC,MAAMkL,EAAE,GAAGD,IAAI,GAAGiE,UAAU,CAAClP,QAAQ;EAErC,OAAOvY,KAAK,CAAEwnB,SAAS,EAAEC,UAAU,CAACnsB,MAAM,EAAEkoB,IAAI,EAAEC,EAAG,CAAC;AAEvD;AAEA,MAAMiE,SAAS,GAAG,IAAI9vB,KAAK,CAAC,CAAC;AAC7B,MAAM+vB,OAAO,GAAG,IAAIjuB,OAAO,CAAC,CAAC;;AAE7B;AACA;AACA;AACA,SAASwP,iBAAiBA,CAAEN,aAAa,EAAG;EAE3C,MAAMgf,aAAa,GAAG,IAAItvB,OAAO,CAAC,CAAC;EACnC,MAAMuvB,aAAa,GAAG,IAAIvvB,OAAO,CAAC,CAAC;EACnC,MAAMwvB,UAAU,GAAG,IAAIxvB,OAAO,CAAC,CAAC;EAChC,MAAMyvB,cAAc,GAAG,IAAIzvB,OAAO,CAAC,CAAC;EAEpC,MAAM0vB,SAAS,GAAG,IAAI1vB,OAAO,CAAC,CAAC;EAC/B,MAAM2vB,cAAc,GAAG,IAAI3vB,OAAO,CAAC,CAAC;EACpC,MAAM4vB,eAAe,GAAG,IAAI5vB,OAAO,CAAC,CAAC;EACrC,MAAM6vB,gBAAgB,GAAG,IAAI7vB,OAAO,CAAC,CAAC;EACtC,MAAM8vB,eAAe,GAAG,IAAI9vB,OAAO,CAAC,CAAC;EAErC,MAAM+vB,SAAS,GAAG,IAAI/vB,OAAO,CAAC,CAAC;EAC/B,MAAMgwB,SAAS,GAAG,IAAIhwB,OAAO,CAAC,CAAC;EAC/B,MAAMiwB,QAAQ,GAAG,IAAIjwB,OAAO,CAAC,CAAC;EAE9B,MAAM6U,WAAW,GAAKvE,aAAa,CAACuE,WAAW,GAAKvE,aAAa,CAACuE,WAAW,GAAG,CAAC;EAEjF,IAAKvE,aAAa,CAAC4E,WAAW,EAAGoa,aAAa,CAACY,WAAW,CAAEb,OAAO,CAACrkB,SAAS,CAAEsF,aAAa,CAAC4E,WAAY,CAAE,CAAC;EAE5G,IAAK5E,aAAa,CAAC8E,WAAW,EAAG;IAEhC,MAAMpN,KAAK,GAAGsI,aAAa,CAAC8E,WAAW,CAAC3I,GAAG,CAAE3M,SAAS,CAACgU,QAAS,CAAC;IACjE9L,KAAK,CAAChC,IAAI,CAAEsK,aAAa,CAACyE,UAAU,IAAIzV,KAAK,CAAC6wB,aAAc,CAAC;IAC7DZ,aAAa,CAACa,qBAAqB,CAAEhB,SAAS,CAACpkB,SAAS,CAAEhD,KAAM,CAAE,CAAC;EAEpE;EAEA,IAAKsI,aAAa,CAACgF,QAAQ,EAAG;IAE7B,MAAMtN,KAAK,GAAGsI,aAAa,CAACgF,QAAQ,CAAC7I,GAAG,CAAE3M,SAAS,CAACgU,QAAS,CAAC;IAC9D9L,KAAK,CAAChC,IAAI,CAAEsK,aAAa,CAACyE,UAAU,IAAIzV,KAAK,CAAC6wB,aAAc,CAAC;IAC7DX,UAAU,CAACY,qBAAqB,CAAEhB,SAAS,CAACpkB,SAAS,CAAEhD,KAAM,CAAE,CAAC;EAEjE;EAEA,IAAKsI,aAAa,CAACkF,YAAY,EAAG;IAEjC,MAAMxN,KAAK,GAAGsI,aAAa,CAACkF,YAAY,CAAC/I,GAAG,CAAE3M,SAAS,CAACgU,QAAS,CAAC;IAClE9L,KAAK,CAAChC,IAAI,CAAEsK,aAAa,CAACyE,UAAU,IAAIzV,KAAK,CAAC6wB,aAAc,CAAC;IAC7DV,cAAc,CAACW,qBAAqB,CAAEhB,SAAS,CAACpkB,SAAS,CAAEhD,KAAM,CAAE,CAAC;IACpEynB,cAAc,CAACvJ,MAAM,CAAC,CAAC;EAExB;EAEA,IAAK5V,aAAa,CAACoF,KAAK,EAAGga,SAAS,CAACha,KAAK,CAAE2Z,OAAO,CAACrkB,SAAS,CAAEsF,aAAa,CAACoF,KAAM,CAAE,CAAC;;EAEtF;EACA,IAAKpF,aAAa,CAACsF,aAAa,EAAGga,eAAe,CAACM,WAAW,CAAEb,OAAO,CAACrkB,SAAS,CAAEsF,aAAa,CAACsF,aAAc,CAAE,CAAC;EAClH,IAAKtF,aAAa,CAACwF,YAAY,EAAG6Z,cAAc,CAACO,WAAW,CAAEb,OAAO,CAACrkB,SAAS,CAAEsF,aAAa,CAACwF,YAAa,CAAE,CAAC;EAC/G,IAAKxF,aAAa,CAAC0F,cAAc,EAAG6Z,gBAAgB,CAACK,WAAW,CAAEb,OAAO,CAACrkB,SAAS,CAAEsF,aAAa,CAAC0F,cAAe,CAAE,CAAC;EACrH,IAAK1F,aAAa,CAAC4F,aAAa,EAAG4Z,eAAe,CAACI,WAAW,CAAEb,OAAO,CAACrkB,SAAS,CAAEsF,aAAa,CAAC4F,aAAc,CAAE,CAAC;;EAElH;EACA,IAAK5F,aAAa,CAACG,iBAAiB,EAAG;IAEtCuf,SAAS,CAACpe,IAAI,CAAEtB,aAAa,CAACC,YAAa,CAAC;IAC5Cwf,SAAS,CAACne,IAAI,CAAEtB,aAAa,CAACG,iBAAkB,CAAC;EAElD;EAEA,MAAM4f,IAAI,GAAGd,aAAa,CAACtR,KAAK,CAAC,CAAC,CAACsI,QAAQ,CAAEiJ,UAAW,CAAC,CAACjJ,QAAQ,CAAEkJ,cAAe,CAAC;EACpF;EACA,MAAMa,UAAU,GAAG,IAAItwB,OAAO,CAAC,CAAC;EAChCswB,UAAU,CAACC,eAAe,CAAER,SAAU,CAAC;;EAEvC;EACA,MAAMS,SAAS,GAAG,IAAIxwB,OAAO,CAAC,CAAC;EAC/BwwB,SAAS,CAACC,YAAY,CAAEV,SAAU,CAAC;EAEnC,MAAMW,WAAW,GAAGF,SAAS,CAACvS,KAAK,CAAC,CAAC,CAACiI,MAAM,CAAC,CAAC,CAACK,QAAQ,CAAEwJ,SAAU,CAAC;EACpE,MAAMY,UAAU,GAAGL,UAAU,CAACrS,KAAK,CAAC,CAAC,CAACiI,MAAM,CAAC,CAAC,CAACK,QAAQ,CAAEmK,WAAY,CAAC;EACtE,MAAME,IAAI,GAAGlB,SAAS;EAEtB,MAAMmB,SAAS,GAAG,IAAI7wB,OAAO,CAAC,CAAC;EAE/B,IAAK6U,WAAW,KAAK,CAAC,EAAG;IAExBgc,SAAS,CAACjf,IAAI,CAAE0e,UAAW,CAAC,CAAC/J,QAAQ,CAAE8J,IAAK,CAAC,CAAC9J,QAAQ,CAAEoK,UAAW,CAAC,CAACpK,QAAQ,CAAEqK,IAAK,CAAC;EAEtF,CAAC,MAAM,IAAK/b,WAAW,KAAK,CAAC,EAAG;IAE/Bgc,SAAS,CAACjf,IAAI,CAAE0e,UAAW,CAAC,CAAC/J,QAAQ,CAAEoK,UAAW,CAAC,CAACpK,QAAQ,CAAE8J,IAAK,CAAC,CAAC9J,QAAQ,CAAEqK,IAAK,CAAC;EAEtF,CAAC,MAAM;IAEN,MAAME,UAAU,GAAG,IAAI9wB,OAAO,CAAC,CAAC,CAAC0V,KAAK,CAAE,IAAItU,OAAO,CAAC,CAAC,CAAC2vB,kBAAkB,CAAEf,SAAU,CAAE,CAAC;IACvF,MAAMgB,cAAc,GAAGF,UAAU,CAAC7S,KAAK,CAAC,CAAC,CAACiI,MAAM,CAAC,CAAC;IAClD,MAAM+K,kBAAkB,GAAGN,UAAU,CAAC1S,KAAK,CAAC,CAAC,CAACsI,QAAQ,CAAEyK,cAAe,CAAC;IAExEH,SAAS,CAACjf,IAAI,CAAE0e,UAAW,CAAC,CAAC/J,QAAQ,CAAE8J,IAAK,CAAC,CAAC9J,QAAQ,CAAE0K,kBAAmB,CAAC,CAAC1K,QAAQ,CAAEqK,IAAK,CAAC;EAE9F;EAEA,MAAMM,mBAAmB,GAAGpB,eAAe,CAAC7R,KAAK,CAAC,CAAC,CAACiI,MAAM,CAAC,CAAC;EAC5D,MAAMiL,kBAAkB,GAAGxB,cAAc,CAAC1R,KAAK,CAAC,CAAC,CAACiI,MAAM,CAAC,CAAC;EAC1D;EACA,IAAIkL,UAAU,GAAG9B,aAAa,CAACrR,KAAK,CAAC,CAAC,CAACsI,QAAQ,CAAEsJ,gBAAiB,CAAC,CAACtJ,QAAQ,CAAEuJ,eAAgB,CAAC,CAACvJ,QAAQ,CAAEgJ,aAAc,CAAC,CAAChJ,QAAQ,CAAEiJ,UAAW,CAAC,CAACjJ,QAAQ,CAAEkJ,cAAe,CAAC,CAAClJ,QAAQ,CAAE2K,mBAAoB,CAAC,CAAC3K,QAAQ,CAAEqJ,eAAgB,CAAC,CAACrJ,QAAQ,CAAEoJ,cAAe,CAAC,CAACpJ,QAAQ,CAAEmJ,SAAU,CAAC,CAACnJ,QAAQ,CAAE4K,kBAAmB,CAAC;EAEvT,MAAME,gCAAgC,GAAG,IAAIrxB,OAAO,CAAC,CAAC,CAACywB,YAAY,CAAEW,UAAW,CAAC;EAEjF,MAAME,kBAAkB,GAAGvB,SAAS,CAAC9R,KAAK,CAAC,CAAC,CAACsI,QAAQ,CAAE8K,gCAAiC,CAAC;EACzFpB,QAAQ,CAACQ,YAAY,CAAEa,kBAAmB,CAAC;EAE3CF,UAAU,GAAGnB,QAAQ,CAAChS,KAAK,CAAC,CAAC,CAACsI,QAAQ,CAAEsK,SAAU,CAAC;;EAEnD;EACAO,UAAU,CAAC9K,WAAW,CAAEyJ,SAAS,CAAC7J,MAAM,CAAC,CAAE,CAAC;EAE5C,OAAOkL,UAAU;AAElB;;AAEA;AACA;AACA,SAASpc,aAAaA,CAAE6L,KAAK,EAAG;EAE/BA,KAAK,GAAGA,KAAK,IAAI,CAAC;EAElB,MAAM0Q,KAAK,GAAG,CACb,KAAK;EAAE;EACP,KAAK;EAAE;EACP,KAAK;EAAE;EACP,KAAK;EAAE;EACP,KAAK;EAAE;EACP,KAAK,CAAE;EACP;EAAA,CACA;EAED,IAAK1Q,KAAK,KAAK,CAAC,EAAG;IAElB1d,OAAO,CAAC4E,IAAI,CAAE,qGAAsG,CAAC;IACrH,OAAOwpB,KAAK,CAAE,CAAC,CAAE;EAElB;EAEA,OAAOA,KAAK,CAAE1Q,KAAK,CAAE;AAEtB;;AAEA;AACA;AACA,SAAS0K,gBAAgBA,CAAEpiB,KAAK,EAAG;EAElC,MAAMnB,KAAK,GAAGmB,KAAK,CAAC9B,KAAK,CAAE,GAAI,CAAC,CAACoF,GAAG,CAAE,UAAWia,GAAG,EAAG;IAEtD,OAAOhb,UAAU,CAAEgb,GAAI,CAAC;EAEzB,CAAE,CAAC;EAEH,OAAO1e,KAAK;AAEb;AAEA,SAAStE,0BAA0BA,CAAEV,MAAM,EAAEkoB,IAAI,EAAEC,EAAE,EAAG;EAEvD,IAAKD,IAAI,KAAK9jB,SAAS,EAAG8jB,IAAI,GAAG,CAAC;EAClC,IAAKC,EAAE,KAAK/jB,SAAS,EAAG+jB,EAAE,GAAGnoB,MAAM,CAAC+D,UAAU;EAE9C,OAAO,IAAIynB,WAAW,CAAC,CAAC,CAACI,MAAM,CAAE,IAAI3mB,UAAU,CAAEjF,MAAM,EAAEkoB,IAAI,EAAEC,EAAG,CAAE,CAAC;AAEtE;AAEA,SAASG,MAAMA,CAAE9c,CAAC,EAAEqJ,CAAC,EAAG;EAEvB,KAAM,IAAIhJ,CAAC,GAAG,CAAC,EAAE4M,CAAC,GAAGjN,CAAC,CAACzE,MAAM,EAAEuX,CAAC,GAAGzJ,CAAC,CAAC9N,MAAM,EAAE8E,CAAC,GAAGyS,CAAC,EAAEzS,CAAC,EAAG,EAAE4M,CAAC,EAAG,EAAG;IAEhEjN,CAAC,CAAEiN,CAAC,CAAE,GAAG5D,CAAC,CAAEhJ,CAAC,CAAE;EAEhB;AAED;AAEA,SAASnH,KAAKA,CAAE8G,CAAC,EAAEqJ,CAAC,EAAEqT,IAAI,EAAEC,EAAE,EAAG;EAEhC,KAAM,IAAItc,CAAC,GAAGqc,IAAI,EAAEzP,CAAC,GAAG,CAAC,EAAE5M,CAAC,GAAGsc,EAAE,EAAEtc,CAAC,EAAG,EAAE4M,CAAC,EAAG,EAAG;IAE/CjN,CAAC,CAAEiN,CAAC,CAAE,GAAG5D,CAAC,CAAEhJ,CAAC,CAAE;EAEhB;EAEA,OAAOL,CAAC;AAET;AAGA,SAAS1M,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}