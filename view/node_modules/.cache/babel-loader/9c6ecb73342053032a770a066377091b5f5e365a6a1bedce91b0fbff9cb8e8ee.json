{"ast":null,"code":"import { bisect } from \"d3-array\";\nimport { interpolate as interpolateValue, interpolateNumber, interpolateRound } from \"d3-interpolate\";\nimport { map, slice } from \"./array\";\nimport constant from \"./constant\";\nimport number from \"./number\";\nvar unit = [0, 1];\nexport function identity(x) {\n  return x;\n}\nfunction normalize(a, b) {\n  return (b -= a = +a) ? function (x) {\n    return (x - a) / b;\n  } : constant(isNaN(b) ? NaN : 0.5);\n}\nfunction clamper(domain) {\n  var a = domain[0],\n    b = domain[domain.length - 1],\n    t;\n  if (a > b) t = a, a = b, b = t;\n  return function (x) {\n    return Math.max(a, Math.min(b, x));\n  };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0],\n    d1 = domain[1],\n    r0 = range[0],\n    r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function (x) {\n    return r0(d0(x));\n  };\n}\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n    d = new Array(j),\n    r = new Array(j),\n    i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n  return function (x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\nexport function copy(source, target) {\n  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());\n}\nexport function transformer() {\n  var domain = unit,\n    range = unit,\n    interpolate = interpolateValue,\n    transform,\n    untransform,\n    unknown,\n    clamp = identity,\n    piecewise,\n    output,\n    input;\n  function rescale() {\n    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n  scale.invert = function (y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n  scale.domain = function (_) {\n    return arguments.length ? (domain = map.call(_, number), clamp === identity || (clamp = clamper(domain)), rescale()) : domain.slice();\n  };\n  scale.range = function (_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n  scale.rangeRound = function (_) {\n    return range = slice.call(_), interpolate = interpolateRound, rescale();\n  };\n  scale.clamp = function (_) {\n    return arguments.length ? (clamp = _ ? clamper(domain) : identity, scale) : clamp !== identity;\n  };\n  scale.interpolate = function (_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n  return function (t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\nexport default function continuous(transform, untransform) {\n  return transformer()(transform, untransform);\n}","map":{"version":3,"names":["bisect","interpolate","interpolateValue","interpolateNumber","interpolateRound","map","slice","constant","number","unit","identity","x","normalize","a","b","isNaN","NaN","clamper","domain","length","t","Math","max","min","bimap","range","d0","d1","r0","r1","polymap","j","d","Array","r","i","reverse","copy","source","target","clamp","unknown","transformer","transform","untransform","piecewise","output","input","rescale","scale","invert","y","_","arguments","call","rangeRound","u","continuous"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/graph_model_midicine/view/node_modules/d3-scale/src/continuous.js"],"sourcesContent":["import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateNumber, interpolateRound} from \"d3-interpolate\";\nimport {map, slice} from \"./array\";\nimport constant from \"./constant\";\nimport number from \"./number\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(domain) {\n  var a = domain[0], b = domain[domain.length - 1], t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = map.call(_, number), clamp === identity || (clamp = clamper(domain)), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = slice.call(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? clamper(domain) : identity, scale) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous(transform, untransform) {\n  return transformer()(transform, untransform);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}