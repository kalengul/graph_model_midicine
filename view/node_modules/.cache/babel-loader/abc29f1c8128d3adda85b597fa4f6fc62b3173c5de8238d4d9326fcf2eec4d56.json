{"ast":null,"code":"import { max, range, tickStep } from \"d3-array\";\nimport { slice } from \"./array\";\nimport { blurX, blurY } from \"./blur\";\nimport constant from \"./constant\";\nimport contours from \"./contours\";\nfunction defaultX(d) {\n  return d[0];\n}\nfunction defaultY(d) {\n  return d[1];\n}\nfunction defaultWeight() {\n  return 1;\n}\nexport default function () {\n  var x = defaultX,\n    y = defaultY,\n    weight = defaultWeight,\n    dx = 960,\n    dy = 500,\n    r = 20,\n    // blur radius\n    k = 2,\n    // log2(grid cell size)\n    o = r * 3,\n    // grid offset, to pad for blur\n    n = dx + o * 2 >> k,\n    // grid width\n    m = dy + o * 2 >> k,\n    // grid height\n    threshold = constant(20);\n  function density(data) {\n    var values0 = new Float32Array(n * m),\n      values1 = new Float32Array(n * m);\n    data.forEach(function (d, i, data) {\n      var xi = +x(d, i, data) + o >> k,\n        yi = +y(d, i, data) + o >> k,\n        wi = +weight(d, i, data);\n      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        values0[xi + yi * n] += wi;\n      }\n    });\n\n    // TODO Optimize.\n    blurX({\n      width: n,\n      height: m,\n      data: values0\n    }, {\n      width: n,\n      height: m,\n      data: values1\n    }, r >> k);\n    blurY({\n      width: n,\n      height: m,\n      data: values1\n    }, {\n      width: n,\n      height: m,\n      data: values0\n    }, r >> k);\n    blurX({\n      width: n,\n      height: m,\n      data: values0\n    }, {\n      width: n,\n      height: m,\n      data: values1\n    }, r >> k);\n    blurY({\n      width: n,\n      height: m,\n      data: values1\n    }, {\n      width: n,\n      height: m,\n      data: values0\n    }, r >> k);\n    blurX({\n      width: n,\n      height: m,\n      data: values0\n    }, {\n      width: n,\n      height: m,\n      data: values1\n    }, r >> k);\n    blurY({\n      width: n,\n      height: m,\n      data: values1\n    }, {\n      width: n,\n      height: m,\n      data: values0\n    }, r >> k);\n    var tz = threshold(values0);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      var stop = max(values0);\n      tz = tickStep(0, stop, tz);\n      tz = range(0, Math.floor(stop / tz) * tz, tz);\n      tz.shift();\n    }\n    return contours().thresholds(tz).size([n, m])(values0).map(transform);\n  }\n  function transform(geometry) {\n    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.\n    geometry.coordinates.forEach(transformPolygon);\n    return geometry;\n  }\n  function transformPolygon(coordinates) {\n    coordinates.forEach(transformRing);\n  }\n  function transformRing(coordinates) {\n    coordinates.forEach(transformPoint);\n  }\n\n  // TODO Optimize.\n  function transformPoint(coordinates) {\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\n  }\n  function resize() {\n    o = r * 3;\n    n = dx + o * 2 >> k;\n    m = dy + o * 2 >> k;\n    return density;\n  }\n  density.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), density) : x;\n  };\n  density.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), density) : y;\n  };\n  density.weight = function (_) {\n    return arguments.length ? (weight = typeof _ === \"function\" ? _ : constant(+_), density) : weight;\n  };\n  density.size = function (_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = Math.ceil(_[0]),\n      _1 = Math.ceil(_[1]);\n    if (!(_0 >= 0) && !(_0 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, resize();\n  };\n  density.cellSize = function (_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\n  };\n  density.thresholds = function (_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;\n  };\n  density.bandwidth = function (_) {\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\n    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();\n  };\n  return density;\n}","map":{"version":3,"names":["max","range","tickStep","slice","blurX","blurY","constant","contours","defaultX","d","defaultY","defaultWeight","x","y","weight","dx","dy","r","k","o","n","m","threshold","density","data","values0","Float32Array","values1","forEach","i","xi","yi","wi","width","height","tz","Array","isArray","stop","Math","floor","shift","thresholds","size","map","transform","geometry","value","pow","coordinates","transformPolygon","transformRing","transformPoint","resize","_","arguments","length","_0","ceil","_1","Error","cellSize","log","LN2","call","bandwidth","sqrt","round"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/view/node_modules/d3-contour/src/density.js"],"sourcesContent":["import {max, range, tickStep} from \"d3-array\";\nimport {slice} from \"./array\";\nimport {blurX, blurY} from \"./blur\";\nimport constant from \"./constant\";\nimport contours from \"./contours\";\n\nfunction defaultX(d) {\n  return d[0];\n}\n\nfunction defaultY(d) {\n  return d[1];\n}\n\nfunction defaultWeight() {\n  return 1;\n}\n\nexport default function() {\n  var x = defaultX,\n      y = defaultY,\n      weight = defaultWeight,\n      dx = 960,\n      dy = 500,\n      r = 20, // blur radius\n      k = 2, // log2(grid cell size)\n      o = r * 3, // grid offset, to pad for blur\n      n = (dx + o * 2) >> k, // grid width\n      m = (dy + o * 2) >> k, // grid height\n      threshold = constant(20);\n\n  function density(data) {\n    var values0 = new Float32Array(n * m),\n        values1 = new Float32Array(n * m);\n\n    data.forEach(function(d, i, data) {\n      var xi = (+x(d, i, data) + o) >> k,\n          yi = (+y(d, i, data) + o) >> k,\n          wi = +weight(d, i, data);\n      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        values0[xi + yi * n] += wi;\n      }\n    });\n\n    // TODO Optimize.\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\n\n    var tz = threshold(values0);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      var stop = max(values0);\n      tz = tickStep(0, stop, tz);\n      tz = range(0, Math.floor(stop / tz) * tz, tz);\n      tz.shift();\n    }\n\n    return contours()\n        .thresholds(tz)\n        .size([n, m])\n      (values0)\n        .map(transform);\n  }\n\n  function transform(geometry) {\n    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.\n    geometry.coordinates.forEach(transformPolygon);\n    return geometry;\n  }\n\n  function transformPolygon(coordinates) {\n    coordinates.forEach(transformRing);\n  }\n\n  function transformRing(coordinates) {\n    coordinates.forEach(transformPoint);\n  }\n\n  // TODO Optimize.\n  function transformPoint(coordinates) {\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\n  }\n\n  function resize() {\n    o = r * 3;\n    n = (dx + o * 2) >> k;\n    m = (dy + o * 2) >> k;\n    return density;\n  }\n\n  density.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), density) : x;\n  };\n\n  density.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), density) : y;\n  };\n\n  density.weight = function(_) {\n    return arguments.length ? (weight = typeof _ === \"function\" ? _ : constant(+_), density) : weight;\n  };\n\n  density.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);\n    if (!(_0 >= 0) && !(_0 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, resize();\n  };\n\n  density.cellSize = function(_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\n  };\n\n  density.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;\n  };\n\n  density.bandwidth = function(_) {\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\n    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();\n  };\n\n  return density;\n}\n"],"mappings":"AAAA,SAAQA,GAAG,EAAEC,KAAK,EAAEC,QAAQ,QAAO,UAAU;AAC7C,SAAQC,KAAK,QAAO,SAAS;AAC7B,SAAQC,KAAK,EAAEC,KAAK,QAAO,QAAQ;AACnC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,QAAQ,MAAM,YAAY;AAEjC,SAASC,QAAQA,CAACC,CAAC,EAAE;EACnB,OAAOA,CAAC,CAAC,CAAC,CAAC;AACb;AAEA,SAASC,QAAQA,CAACD,CAAC,EAAE;EACnB,OAAOA,CAAC,CAAC,CAAC,CAAC;AACb;AAEA,SAASE,aAAaA,CAAA,EAAG;EACvB,OAAO,CAAC;AACV;AAEA,eAAe,YAAW;EACxB,IAAIC,CAAC,GAAGJ,QAAQ;IACZK,CAAC,GAAGH,QAAQ;IACZI,MAAM,GAAGH,aAAa;IACtBI,EAAE,GAAG,GAAG;IACRC,EAAE,GAAG,GAAG;IACRC,CAAC,GAAG,EAAE;IAAE;IACRC,CAAC,GAAG,CAAC;IAAE;IACPC,CAAC,GAAGF,CAAC,GAAG,CAAC;IAAE;IACXG,CAAC,GAAIL,EAAE,GAAGI,CAAC,GAAG,CAAC,IAAKD,CAAC;IAAE;IACvBG,CAAC,GAAIL,EAAE,GAAGG,CAAC,GAAG,CAAC,IAAKD,CAAC;IAAE;IACvBI,SAAS,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAE5B,SAASiB,OAAOA,CAACC,IAAI,EAAE;IACrB,IAAIC,OAAO,GAAG,IAAIC,YAAY,CAACN,CAAC,GAAGC,CAAC,CAAC;MACjCM,OAAO,GAAG,IAAID,YAAY,CAACN,CAAC,GAAGC,CAAC,CAAC;IAErCG,IAAI,CAACI,OAAO,CAAC,UAASnB,CAAC,EAAEoB,CAAC,EAAEL,IAAI,EAAE;MAChC,IAAIM,EAAE,GAAI,CAAClB,CAAC,CAACH,CAAC,EAAEoB,CAAC,EAAEL,IAAI,CAAC,GAAGL,CAAC,IAAKD,CAAC;QAC9Ba,EAAE,GAAI,CAAClB,CAAC,CAACJ,CAAC,EAAEoB,CAAC,EAAEL,IAAI,CAAC,GAAGL,CAAC,IAAKD,CAAC;QAC9Bc,EAAE,GAAG,CAAClB,MAAM,CAACL,CAAC,EAAEoB,CAAC,EAAEL,IAAI,CAAC;MAC5B,IAAIM,EAAE,IAAI,CAAC,IAAIA,EAAE,GAAGV,CAAC,IAAIW,EAAE,IAAI,CAAC,IAAIA,EAAE,GAAGV,CAAC,EAAE;QAC1CI,OAAO,CAACK,EAAE,GAAGC,EAAE,GAAGX,CAAC,CAAC,IAAIY,EAAE;MAC5B;IACF,CAAC,CAAC;;IAEF;IACA5B,KAAK,CAAC;MAAC6B,KAAK,EAAEb,CAAC;MAAEc,MAAM,EAAEb,CAAC;MAAEG,IAAI,EAAEC;IAAO,CAAC,EAAE;MAACQ,KAAK,EAAEb,CAAC;MAAEc,MAAM,EAAEb,CAAC;MAAEG,IAAI,EAAEG;IAAO,CAAC,EAAEV,CAAC,IAAIC,CAAC,CAAC;IACzFb,KAAK,CAAC;MAAC4B,KAAK,EAAEb,CAAC;MAAEc,MAAM,EAAEb,CAAC;MAAEG,IAAI,EAAEG;IAAO,CAAC,EAAE;MAACM,KAAK,EAAEb,CAAC;MAAEc,MAAM,EAAEb,CAAC;MAAEG,IAAI,EAAEC;IAAO,CAAC,EAAER,CAAC,IAAIC,CAAC,CAAC;IACzFd,KAAK,CAAC;MAAC6B,KAAK,EAAEb,CAAC;MAAEc,MAAM,EAAEb,CAAC;MAAEG,IAAI,EAAEC;IAAO,CAAC,EAAE;MAACQ,KAAK,EAAEb,CAAC;MAAEc,MAAM,EAAEb,CAAC;MAAEG,IAAI,EAAEG;IAAO,CAAC,EAAEV,CAAC,IAAIC,CAAC,CAAC;IACzFb,KAAK,CAAC;MAAC4B,KAAK,EAAEb,CAAC;MAAEc,MAAM,EAAEb,CAAC;MAAEG,IAAI,EAAEG;IAAO,CAAC,EAAE;MAACM,KAAK,EAAEb,CAAC;MAAEc,MAAM,EAAEb,CAAC;MAAEG,IAAI,EAAEC;IAAO,CAAC,EAAER,CAAC,IAAIC,CAAC,CAAC;IACzFd,KAAK,CAAC;MAAC6B,KAAK,EAAEb,CAAC;MAAEc,MAAM,EAAEb,CAAC;MAAEG,IAAI,EAAEC;IAAO,CAAC,EAAE;MAACQ,KAAK,EAAEb,CAAC;MAAEc,MAAM,EAAEb,CAAC;MAAEG,IAAI,EAAEG;IAAO,CAAC,EAAEV,CAAC,IAAIC,CAAC,CAAC;IACzFb,KAAK,CAAC;MAAC4B,KAAK,EAAEb,CAAC;MAAEc,MAAM,EAAEb,CAAC;MAAEG,IAAI,EAAEG;IAAO,CAAC,EAAE;MAACM,KAAK,EAAEb,CAAC;MAAEc,MAAM,EAAEb,CAAC;MAAEG,IAAI,EAAEC;IAAO,CAAC,EAAER,CAAC,IAAIC,CAAC,CAAC;IAEzF,IAAIiB,EAAE,GAAGb,SAAS,CAACG,OAAO,CAAC;;IAE3B;IACA,IAAI,CAACW,KAAK,CAACC,OAAO,CAACF,EAAE,CAAC,EAAE;MACtB,IAAIG,IAAI,GAAGtC,GAAG,CAACyB,OAAO,CAAC;MACvBU,EAAE,GAAGjC,QAAQ,CAAC,CAAC,EAAEoC,IAAI,EAAEH,EAAE,CAAC;MAC1BA,EAAE,GAAGlC,KAAK,CAAC,CAAC,EAAEsC,IAAI,CAACC,KAAK,CAACF,IAAI,GAAGH,EAAE,CAAC,GAAGA,EAAE,EAAEA,EAAE,CAAC;MAC7CA,EAAE,CAACM,KAAK,CAAC,CAAC;IACZ;IAEA,OAAOlC,QAAQ,CAAC,CAAC,CACZmC,UAAU,CAACP,EAAE,CAAC,CACdQ,IAAI,CAAC,CAACvB,CAAC,EAAEC,CAAC,CAAC,CAAC,CACdI,OAAO,CAAC,CACNmB,GAAG,CAACC,SAAS,CAAC;EACrB;EAEA,SAASA,SAASA,CAACC,QAAQ,EAAE;IAC3BA,QAAQ,CAACC,KAAK,IAAIR,IAAI,CAACS,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG9B,CAAC,CAAC,CAAC,CAAC;IACvC4B,QAAQ,CAACG,WAAW,CAACrB,OAAO,CAACsB,gBAAgB,CAAC;IAC9C,OAAOJ,QAAQ;EACjB;EAEA,SAASI,gBAAgBA,CAACD,WAAW,EAAE;IACrCA,WAAW,CAACrB,OAAO,CAACuB,aAAa,CAAC;EACpC;EAEA,SAASA,aAAaA,CAACF,WAAW,EAAE;IAClCA,WAAW,CAACrB,OAAO,CAACwB,cAAc,CAAC;EACrC;;EAEA;EACA,SAASA,cAAcA,CAACH,WAAW,EAAE;IACnCA,WAAW,CAAC,CAAC,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAGV,IAAI,CAACS,GAAG,CAAC,CAAC,EAAE9B,CAAC,CAAC,GAAGC,CAAC;IACpD8B,WAAW,CAAC,CAAC,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAGV,IAAI,CAACS,GAAG,CAAC,CAAC,EAAE9B,CAAC,CAAC,GAAGC,CAAC;EACtD;EAEA,SAASkC,MAAMA,CAAA,EAAG;IAChBlC,CAAC,GAAGF,CAAC,GAAG,CAAC;IACTG,CAAC,GAAIL,EAAE,GAAGI,CAAC,GAAG,CAAC,IAAKD,CAAC;IACrBG,CAAC,GAAIL,EAAE,GAAGG,CAAC,GAAG,CAAC,IAAKD,CAAC;IACrB,OAAOK,OAAO;EAChB;EAEAA,OAAO,CAACX,CAAC,GAAG,UAAS0C,CAAC,EAAE;IACtB,OAAOC,SAAS,CAACC,MAAM,IAAI5C,CAAC,GAAG,OAAO0C,CAAC,KAAK,UAAU,GAAGA,CAAC,GAAGhD,QAAQ,CAAC,CAACgD,CAAC,CAAC,EAAE/B,OAAO,IAAIX,CAAC;EACzF,CAAC;EAEDW,OAAO,CAACV,CAAC,GAAG,UAASyC,CAAC,EAAE;IACtB,OAAOC,SAAS,CAACC,MAAM,IAAI3C,CAAC,GAAG,OAAOyC,CAAC,KAAK,UAAU,GAAGA,CAAC,GAAGhD,QAAQ,CAAC,CAACgD,CAAC,CAAC,EAAE/B,OAAO,IAAIV,CAAC;EACzF,CAAC;EAEDU,OAAO,CAACT,MAAM,GAAG,UAASwC,CAAC,EAAE;IAC3B,OAAOC,SAAS,CAACC,MAAM,IAAI1C,MAAM,GAAG,OAAOwC,CAAC,KAAK,UAAU,GAAGA,CAAC,GAAGhD,QAAQ,CAAC,CAACgD,CAAC,CAAC,EAAE/B,OAAO,IAAIT,MAAM;EACnG,CAAC;EAEDS,OAAO,CAACoB,IAAI,GAAG,UAASW,CAAC,EAAE;IACzB,IAAI,CAACC,SAAS,CAACC,MAAM,EAAE,OAAO,CAACzC,EAAE,EAAEC,EAAE,CAAC;IACtC,IAAIyC,EAAE,GAAGlB,IAAI,CAACmB,IAAI,CAACJ,CAAC,CAAC,CAAC,CAAC,CAAC;MAAEK,EAAE,GAAGpB,IAAI,CAACmB,IAAI,CAACJ,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,IAAI,EAAEG,EAAE,IAAI,CAAC,CAAC,IAAI,EAAEA,EAAE,IAAI,CAAC,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,cAAc,CAAC;IAC7D,OAAO7C,EAAE,GAAG0C,EAAE,EAAEzC,EAAE,GAAG2C,EAAE,EAAEN,MAAM,CAAC,CAAC;EACnC,CAAC;EAED9B,OAAO,CAACsC,QAAQ,GAAG,UAASP,CAAC,EAAE;IAC7B,IAAI,CAACC,SAAS,CAACC,MAAM,EAAE,OAAO,CAAC,IAAItC,CAAC;IACpC,IAAI,EAAE,CAACoC,CAAC,GAAG,CAACA,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,IAAIM,KAAK,CAAC,mBAAmB,CAAC;IAC1D,OAAO1C,CAAC,GAAGqB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACuB,GAAG,CAACR,CAAC,CAAC,GAAGf,IAAI,CAACwB,GAAG,CAAC,EAAEV,MAAM,CAAC,CAAC;EACzD,CAAC;EAED9B,OAAO,CAACmB,UAAU,GAAG,UAASY,CAAC,EAAE;IAC/B,OAAOC,SAAS,CAACC,MAAM,IAAIlC,SAAS,GAAG,OAAOgC,CAAC,KAAK,UAAU,GAAGA,CAAC,GAAGlB,KAAK,CAACC,OAAO,CAACiB,CAAC,CAAC,GAAGhD,QAAQ,CAACH,KAAK,CAAC6D,IAAI,CAACV,CAAC,CAAC,CAAC,GAAGhD,QAAQ,CAACgD,CAAC,CAAC,EAAE/B,OAAO,IAAID,SAAS;EACrJ,CAAC;EAEDC,OAAO,CAAC0C,SAAS,GAAG,UAASX,CAAC,EAAE;IAC9B,IAAI,CAACC,SAAS,CAACC,MAAM,EAAE,OAAOjB,IAAI,CAAC2B,IAAI,CAACjD,CAAC,IAAIA,CAAC,GAAG,CAAC,CAAC,CAAC;IACpD,IAAI,EAAE,CAACqC,CAAC,GAAG,CAACA,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,IAAIM,KAAK,CAAC,mBAAmB,CAAC;IAC1D,OAAO3C,CAAC,GAAGsB,IAAI,CAAC4B,KAAK,CAAC,CAAC5B,IAAI,CAAC2B,IAAI,CAAC,CAAC,GAAGZ,CAAC,GAAGA,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAED,MAAM,CAAC,CAAC;EACrE,CAAC;EAED,OAAO9B,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}