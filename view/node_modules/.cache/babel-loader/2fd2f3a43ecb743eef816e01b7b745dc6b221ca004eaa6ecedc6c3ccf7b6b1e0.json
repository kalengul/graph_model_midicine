{"ast":null,"code":"var _jsxFileName = \"C:\\\\UsersFolders\\\\Polina\\\\\\u0420\\u042D\\u0423\\\\Graph\\\\graph_model_midicine\\\\view\\\\src\\\\components\\\\graph\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport * as d3 from \"d3\";\nimport { Data } from \"./graph_data.js\";\nimport { DataParser } from './DataParser.js';\nimport './graph.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst myData2 = {\n  \"nodes\": [{\n    \"id\": \"id1\",\n    \"name\": \"name1\",\n    \"val\": 1,\n    \"color\": \"#D9EDFF\"\n  }, {\n    \"id\": \"id2\",\n    \"name\": \"name2\",\n    \"val\": 10,\n    \"color\": \"#B3CFE9\"\n  }, {\n    \"id\": \"id3\",\n    \"name\": \"name3\",\n    \"val\": 1,\n    \"color\": \"#D9EDFF\"\n  }],\n  \"links\": [{\n    \"source\": \"id1\",\n    \"target\": \"id2\"\n  }, {\n    \"source\": \"id2\",\n    \"target\": \"id3\"\n  }]\n};\nconst myData = Data;\nexport const GraphView = () => {\n  _s();\n  const graphRef = useRef(null);\n  const forceRef = useRef();\n  const [MyData, setMyData] = useState({\n    'nodes': [],\n    'links': []\n  });\n  const [collapsedClusters, setCollapsedClusters] = useState([]);\n  useEffect(() => {\n    const dataParser = new DataParser(Data);\n    let newData = dataParser.Parse();\n    setMyData({\n      'nodes': newData.nodes,\n      'links': newData.links\n    });\n    let rootNodes = [];\n    newData.nodes.forEach(node => {\n      if (node.cluster.isRoot) rootNodes.push(node.id);\n    });\n    setCollapsedClusters(rootNodes);\n    forceRef.current.d3Force(\"charge\").strength(-10);\n    forceRef.current.d3Force(\"link\").distance(9);\n    forceRef.current.d3Force(\"charge\").distanceMax(10);\n  }, []);\n\n  //Отображение узлов\n  const CanvasHandler = (node, ctx, globalScale) => {\n    //console.log(node)\n    const label = node.name; //Подпись узла\n    const fontSize = node.cluster.isRoot ? 14 * (node.val / 250) : 14 / (globalScale * 1.5); //9\n\n    ctx.font = `${fontSize}px Sans-Serif`;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillStyle = 'black'; //node.isClusterNode ? \"white\" : \"black\"; //Если корень, то цвет белый иначе черный\n\n    //отображение текста в зависимости от его типа (кластер или нет)\n    if (node.cluster.isRoot) {\n      const lineHeight = fontSize * 1.1;\n      const lines = label.split(\" \");\n      if (lines.length === 1) {\n        let x = node.x;\n        let y = node.y;\n        ctx.fillText(lines[0], x, y);\n      } else {\n        let x = node.x;\n        let y = node.y - lineHeight;\n        for (let i = 0; i < lines.length; ++i) {\n          ctx.fillText(lines[i], x, y);\n          y += lineHeight;\n        }\n      }\n    } else {\n      ctx.fillText(label, node.x, node.y);\n    }\n  };\n  const linkCanvasHandler = (link, ctx, globalScale) => {\n    //const ctx = link.context;\n    //ctx.beginPath();\n    //ctx.moveTo(link.source.x, link.source.y);\n    //ctx.lineTo(link.target.x, link.target.y);\n\n    if (link.highlighted) {\n      ctx.strokeStyle = 'red'; // Цвет для выделенных связей\n      ctx.lineWidth = 3; // Толщина для выделенных связей\n    } else {\n      ctx.strokeStyle = 'gray'; // Цвет для обычных связей\n      ctx.lineWidth = 0.05; // Толщина для обычных связей\n    }\n    ctx.stroke();\n  };\n\n  //Наведение на узел графа\n  const HoverHandler = (node, hovering) => {\n    console.log('MyData');\n    console.log(MyData);\n    console.log(\"node\");\n    console.log(node);\n    if (MyData && node) {\n      console.log('Навели на узел ' + node.name);\n      // Выделить связи узла\n      MyData.links.forEach(link => {\n        if (link.source === node.id || link.target === node.id) {\n          link.highlighted = true;\n          console.log(link);\n        }\n      });\n      console.log(MyData.links);\n    } else {\n      // Снять выделение с связей\n      MyData.links.forEach(link => {\n        link.highlighted = false;\n      });\n      console.log(MyData.links);\n    }\n  };\n  const NodeClickHandler = node => {\n    //toggleClusterCollapse(node.id);\n    if (collapsedClusters.includes(node.id)) {\n      forceRef.current.zoom(3.5, 400);\n      forceRef.current.centerAt(node.x, node.y, 400);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Graphcontainer flex jc-center\",\n    ref: graphRef,\n    children: /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n      ref: forceRef,\n      graphData: MyData,\n      width: 1105,\n      height: 500,\n      nodeRelSize: 1,\n      nodeCanvasObjectMode: () => \"after\" //Сначала отрсовка узла по умолчанию, затем применение nodeCanvasObject для его доработки\n      ,\n      nodeCanvasObject: CanvasHandler,\n      linkCanvasObjectMode: () => \"after\",\n      linkCanvasObject: linkCanvasHandler\n\n      //enableNodeDrag={false} //Можно двигать узлы мышкой или нет\n\n      //Видимость узлов\n      ,\n      nodeVisibility: node => {\n        if (!collapsedClusters.includes(node.id)) {\n          return false;\n        } else return true;\n      }\n\n      //Видимость связей\n      ,\n      linkVisibility: link => {\n        if (collapsedClusters.includes(link.source.id) && collapsedClusters.includes(link.target.id)) {\n          return true;\n        } else return false;\n      },\n      nNodeClick: NodeClickHandler,\n      onNodeHover: HoverHandler //Навередение на узел\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this);\n};\n_s(GraphView, \"Nlo7nLGv/HfWM2VMTyu3fUe1foE=\");\n_c = GraphView;\nvar _c;\n$RefreshReg$(_c, \"GraphView\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ForceGraph2D","d3","Data","DataParser","jsxDEV","_jsxDEV","myData2","myData","GraphView","_s","graphRef","forceRef","MyData","setMyData","collapsedClusters","setCollapsedClusters","dataParser","newData","Parse","nodes","links","rootNodes","forEach","node","cluster","isRoot","push","id","current","d3Force","strength","distance","distanceMax","CanvasHandler","ctx","globalScale","label","name","fontSize","val","font","textAlign","textBaseline","fillStyle","lineHeight","lines","split","length","x","y","fillText","i","linkCanvasHandler","link","highlighted","strokeStyle","lineWidth","stroke","HoverHandler","hovering","console","log","source","target","NodeClickHandler","includes","zoom","centerAt","className","ref","children","graphData","width","height","nodeRelSize","nodeCanvasObjectMode","nodeCanvasObject","linkCanvasObjectMode","linkCanvasObject","nodeVisibility","linkVisibility","nNodeClick","onNodeHover","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/graph_model_midicine/view/src/components/graph/graph.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport ForceGraph2D from \"react-force-graph-2d\";\r\nimport * as d3 from \"d3\";\r\n\r\nimport {Data} from \"./graph_data.js\"\r\nimport { DataParser } from './DataParser.js';\r\n\r\nimport './graph.css'\r\n\r\nconst myData2 = {\r\n    \"nodes\": [ \r\n        { \r\n          \"id\": \"id1\",\r\n          \"name\": \"name1\",\r\n          \"val\": 1,\r\n          \"color\": \"#D9EDFF\"\r\n        },\r\n        { \r\n          \"id\": \"id2\",\r\n          \"name\": \"name2\",\r\n          \"val\": 10,\r\n          \"color\": \"#B3CFE9\" \r\n        },\r\n        { \r\n            \"id\": \"id3\",\r\n            \"name\": \"name3\",\r\n            \"val\": 1,\r\n            \"color\": \"#D9EDFF\" \r\n        },\r\n    ],\r\n    \"links\": [\r\n        {\r\n            \"source\": \"id1\",\r\n            \"target\": \"id2\"\r\n        },\r\n        {\r\n            \"source\": \"id2\",\r\n            \"target\": \"id3\"\r\n        },\r\n    ]\r\n}\r\n\r\nconst myData = Data\r\n\r\nexport const GraphView =() =>{\r\n    const graphRef = useRef(null);\r\n    const forceRef = useRef();\r\n\r\n    const [MyData, setMyData] = useState({'nodes': [], 'links':[]})\r\n    const [collapsedClusters, setCollapsedClusters] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const dataParser = new DataParser(Data)\r\n        let newData = dataParser.Parse()\r\n\r\n        setMyData({'nodes': newData.nodes, 'links': newData.links})\r\n\r\n        let rootNodes = []\r\n        newData.nodes.forEach(node=>{\r\n            if (node.cluster.isRoot) rootNodes.push(node.id)\r\n        })\r\n        setCollapsedClusters(rootNodes)\r\n\r\n        forceRef.current.d3Force(\"charge\").strength(-10);\r\n        forceRef.current.d3Force(\"link\").distance(9);\r\n        forceRef.current.d3Force(\"charge\").distanceMax(10);\r\n      }, []);\r\n\r\n\r\n    //Отображение узлов\r\n    const CanvasHandler = (node, ctx, globalScale) => {\r\n        //console.log(node)\r\n        const label = node.name; //Подпись узла\r\n        const fontSize = node.cluster.isRoot ? 14 * (node.val / 250): 14 / (globalScale * 1.5);//9\r\n\r\n        ctx.font = `${fontSize}px Sans-Serif`;\r\n        ctx.textAlign = \"center\";\r\n        ctx.textBaseline = \"middle\";\r\n        ctx.fillStyle = 'black'//node.isClusterNode ? \"white\" : \"black\"; //Если корень, то цвет белый иначе черный\r\n\r\n        //отображение текста в зависимости от его типа (кластер или нет)\r\n        if(node.cluster.isRoot){\r\n              const lineHeight = fontSize * 1.1;\r\n              const lines = label.split(\" \");\r\n              if(lines.length === 1){\r\n                let x = node.x;\r\n                let y = node.y; \r\n                ctx.fillText(lines[0], x, y);\r\n              }else{\r\n                let x = node.x;\r\n                let y = node.y - lineHeight;\r\n                for (let i = 0; i < lines.length; ++i) {\r\n                        ctx.fillText(lines[i], x, y);\r\n                        y += lineHeight;\r\n                }\r\n              }\r\n              \r\n        } else {\r\n            ctx.fillText(label, node.x, node.y);\r\n        }\r\n\r\n    }\r\n\r\n    const linkCanvasHandler = (link, ctx, globalScale) => {\r\n        //const ctx = link.context;\r\n        //ctx.beginPath();\r\n        //ctx.moveTo(link.source.x, link.source.y);\r\n        //ctx.lineTo(link.target.x, link.target.y);\r\n   \r\n        if (link.highlighted) {\r\n          ctx.strokeStyle = 'red'; // Цвет для выделенных связей\r\n          ctx.lineWidth = 3; // Толщина для выделенных связей\r\n        } else {\r\n          ctx.strokeStyle = 'gray'; // Цвет для обычных связей\r\n          ctx.lineWidth = 0.05; // Толщина для обычных связей\r\n        }\r\n   \r\n        ctx.stroke();\r\n      };\r\n\r\n    //Наведение на узел графа\r\n    const HoverHandler = (node, hovering) => {\r\n      console.log('MyData')\r\n      console.log(MyData)\r\n      console.log(\"node\")\r\n      console.log(node)\r\n      if(MyData && node){\r\n        console.log('Навели на узел ' + node.name)\r\n        // Выделить связи узла\r\n        MyData.links.forEach((link) => {\r\n          if (link.source === node.id || link.target === node.id) {\r\n            link.highlighted = true;\r\n            console.log(link)\r\n          }\r\n          \r\n        });\r\n\r\n        console.log(MyData.links)\r\n      } else {\r\n              // Снять выделение с связей\r\n              MyData.links.forEach((link) => {\r\n                  link.highlighted = false;\r\n              });\r\n              console.log(MyData.links)\r\n          }\r\n      \r\n    }\r\n    \r\n\r\n    const NodeClickHandler = (node) => {\r\n      //toggleClusterCollapse(node.id);\r\n      if (collapsedClusters.includes(node.id)) {\r\n        forceRef.current.zoom(3.5, 400);\r\n        forceRef.current.centerAt(node.x, node.y, 400);\r\n      }\r\n    };\r\n    \r\n    \r\n    \r\n    return(\r\n        <div className='Graphcontainer flex jc-center' ref={graphRef}>\r\n            <ForceGraph2D\r\n                ref={forceRef}\r\n                graphData={MyData}\r\n\r\n                width={1105}\r\n                height={500}\r\n\r\n                nodeRelSize={1}\r\n                \r\n                nodeCanvasObjectMode={() => \"after\"} //Сначала отрсовка узла по умолчанию, затем применение nodeCanvasObject для его доработки\r\n                nodeCanvasObject={CanvasHandler}\r\n                \r\n                \r\n                linkCanvasObjectMode={()=>\"after\"}\r\n                linkCanvasObject={linkCanvasHandler}\r\n                \r\n                //enableNodeDrag={false} //Можно двигать узлы мышкой или нет\r\n\r\n                //Видимость узлов\r\n                nodeVisibility={(node) => {\r\n                    if (!collapsedClusters.includes(node.id)) {\r\n                      return false;\r\n                    } else return true;\r\n                }}\r\n\r\n                //Видимость связей\r\n                linkVisibility={(link) => {\r\n                    if (\r\n                      collapsedClusters.includes(link.source.id) && collapsedClusters.includes(link.target.id)\r\n                    ) {\r\n                      return true;\r\n                    } else return false;\r\n                }}\r\n\r\n                nNodeClick={NodeClickHandler}\r\n\r\n                onNodeHover = {HoverHandler} //Навередение на узел\r\n            />\r\n        </div>\r\n    )\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}