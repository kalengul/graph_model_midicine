{"ast":null,"code":"var _jsxFileName = \"C:\\\\UsersFolders\\\\Polina\\\\\\u0420\\u042D\\u0423\\\\Graph\\\\view\\\\src\\\\components\\\\graph\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport * as d3 from \"d3\";\nimport { Data } from \"./data.js\";\nimport './graph.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst myData2 = {\n  \"nodes\": [{\n    \"id\": \"id1\",\n    \"name\": \"name1\",\n    \"val\": 1,\n    \"color\": \"#D9EDFF\"\n  }, {\n    \"id\": \"id2\",\n    \"name\": \"name2\",\n    \"val\": 10,\n    \"color\": \"#B3CFE9\"\n  }, {\n    \"id\": \"id3\",\n    \"name\": \"name3\",\n    \"val\": 1,\n    \"color\": \"#D9EDFF\"\n  }],\n  \"links\": [{\n    \"source\": \"id1\",\n    \"target\": \"id2\"\n  }, {\n    \"source\": \"id2\",\n    \"target\": \"id3\"\n  }]\n};\nconst myData = Data;\nexport const GraphView = () => {\n  _s();\n  const graphRef = useRef(null);\n  const forceRef = useRef();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Graphcontainer flex jc-center\",\n    ref: graphRef,\n    children: /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n      graphData: myData,\n      nodeLabel: node => node.id,\n      width: 1105,\n      height: 500,\n      ref: forceRef,\n      nodeCanvasObject: (node, ctx, globalScale) => {\n        const label = node.name;\n        const fontSize = node.isClusterNode ? 14 * (node.val / 1500) : 14 / (globalScale * 1.2);\n        ctx.font = `${fontSize}px Sans-Serif`;\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = node.isClusterNode ? \"white\" : \"black\"; //node.color;\n        if (node.isClusterNode) {\n          // console.log();\n          const lineHeight = fontSize * 1.2;\n          const lines = label.split(\",\");\n          let x = node.x;\n          let y = node.y - lineHeight;\n          for (let i = 0; i < lines.length; ++i) {\n            ctx.fillText(lines[i], x, y);\n            y += lineHeight;\n          }\n        } else if (globalScale >= 3.5) {\n          ctx.fillText(label, node.x, node.y + 2.5);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(GraphView, \"NCs3g18calrFO4zSJytFCUkCgwo=\");\n_c = GraphView;\nvar _c;\n$RefreshReg$(_c, \"GraphView\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ForceGraph2D","d3","Data","jsxDEV","_jsxDEV","myData2","myData","GraphView","_s","graphRef","forceRef","className","ref","children","graphData","nodeLabel","node","id","width","height","nodeCanvasObject","ctx","globalScale","label","name","fontSize","isClusterNode","val","font","textAlign","textBaseline","fillStyle","lineHeight","lines","split","x","y","i","length","fillText","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/UsersFolders/Polina/РЭУ/Graph/view/src/components/graph/graph.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport ForceGraph2D from \"react-force-graph-2d\";\r\nimport * as d3 from \"d3\";\r\n\r\nimport {Data} from \"./data.js\"\r\n\r\nimport './graph.css'\r\n\r\nconst myData2 = {\r\n    \"nodes\": [ \r\n        { \r\n          \"id\": \"id1\",\r\n          \"name\": \"name1\",\r\n          \"val\": 1,\r\n          \"color\": \"#D9EDFF\"\r\n        },\r\n        { \r\n          \"id\": \"id2\",\r\n          \"name\": \"name2\",\r\n          \"val\": 10,\r\n          \"color\": \"#B3CFE9\" \r\n        },\r\n        { \r\n            \"id\": \"id3\",\r\n            \"name\": \"name3\",\r\n            \"val\": 1,\r\n            \"color\": \"#D9EDFF\" \r\n        },\r\n    ],\r\n    \"links\": [\r\n        {\r\n            \"source\": \"id1\",\r\n            \"target\": \"id2\"\r\n        },\r\n        {\r\n            \"source\": \"id2\",\r\n            \"target\": \"id3\"\r\n        },\r\n    ]\r\n}\r\n\r\nconst myData = Data\r\n\r\nexport const GraphView =() =>{\r\n    const graphRef = useRef(null);\r\n    const forceRef = useRef();\r\n\r\n    \r\n    return(\r\n        <div className='Graphcontainer flex jc-center' ref={graphRef}>\r\n            <ForceGraph2D\r\n                graphData={myData}\r\n                nodeLabel={(node) => node.id} \r\n                width = {1105}\r\n                height = {500}\r\n                ref={forceRef}\r\n\r\n                nodeCanvasObject={(node, ctx, globalScale) => {\r\n                    const label = node.name;\r\n                    const fontSize = node.isClusterNode\r\n                      ? 14 * (node.val / 1500)\r\n                      : 14 / (globalScale * 1.2);\r\n                    ctx.font = `${fontSize}px Sans-Serif`;\r\n                    ctx.textAlign = \"center\";\r\n                    ctx.textBaseline = \"middle\";\r\n                    ctx.fillStyle = node.isClusterNode ? \"white\" : \"black\"; //node.color;\r\n                    if (node.isClusterNode) {\r\n                      // console.log();\r\n                      const lineHeight = fontSize * 1.2;\r\n                      const lines = label.split(\",\");\r\n                      let x = node.x;\r\n                      let y = node.y - lineHeight;\r\n                      for (let i = 0; i < lines.length; ++i) {\r\n                        ctx.fillText(lines[i], x, y);\r\n                        y += lineHeight;\r\n                      }\r\n                    } else if (globalScale >= 3.5) {\r\n                      ctx.fillText(label, node.x, node.y + 2.5);\r\n                    }\r\n                  }}\r\n            />\r\n        </div>\r\n    )\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}